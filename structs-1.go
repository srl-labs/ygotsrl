/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /root/go/pkg/mod/github.com/openconfig/ygot@v0.24.4/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/macsec/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-sr-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-reboot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions represents the /srl_nokia-interfaces/interface/subinterface/ipv6/dhcp-client/trace-options YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions struct {
	Trace []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions_Trace `path:"trace" module:"srl_nokia-interfaces-ip-dhcp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) IsYANGGoStruct() {}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) GetTrace() []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-interfaces-ip-dhcp"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay represents the /srl_nokia-interfaces/interface/subinterface/ipv6/dhcp-relay YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay struct {
	AdminState      E_SrlNokiaCommon_AdminState                                            `path:"admin-state" module:"srl_nokia-interfaces-ip-dhcp-relay"`
	NetworkInstance *string                                                                `path:"network-instance" module:"srl_nokia-interfaces-ip-dhcp-relay"`
	Option          []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_Option    `path:"option" module:"srl_nokia-interfaces-ip-dhcp-relay"`
	Server          []string                                                               `path:"server" module:"srl_nokia-interfaces-ip-dhcp-relay"`
	SourceAddress   *string                                                                `path:"source-address" module:"srl_nokia-interfaces-ip-dhcp-relay"`
	TraceOptions    *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions `path:"trace-options" module:"srl_nokia-interfaces-ip-dhcp-relay"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) IsYANGGoStruct() {}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetOrCreateTraceOptions() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetTraceOptions() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetOption retrieves the value of the leaf Option from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Option is set, it can
// safely use t.GetOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Option == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetOption() []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_Option {
	if t == nil || t.Option == nil {
		return nil
	}
	return t.Option
}

// GetServer retrieves the value of the leaf Server from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay) ΛBelongingModule() string {
	return "srl_nokia-interfaces-ip-dhcp-relay"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions represents the /srl_nokia-interfaces/interface/subinterface/ipv6/dhcp-relay/trace-options YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions struct {
	Trace []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions_Trace `path:"trace" module:"srl_nokia-interfaces-ip-dhcp-relay"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) IsYANGGoStruct() {}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) GetTrace() []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpRelay_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-interfaces-ip-dhcp-relay"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server represents the /srl_nokia-interfaces/interface/subinterface/ipv6/dhcpv6-server YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-interfaces-ip-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Dhcpv6Server) ΛBelongingModule() string {
	return "srl_nokia-interfaces-ip-dhcp-server"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery struct {
	Debug                     []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Debug             `path:"debug" module:"srl_nokia-interfaces-nbr"`
	DuplicateAddressDetection *bool                                                                                  `path:"duplicate-address-detection" module:"srl_nokia-interfaces-nbr"`
	Evpn                      *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn                 `path:"evpn" module:"srl_nokia-interfaces-nbr-evpn" yangPresence:"true"`
	HostRoute                 *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute            `path:"host-route" module:"srl_nokia-interfaces-nbr"`
	LearnUnsolicited          E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_LearnUnsolicited    `path:"learn-unsolicited" module:"srl_nokia-interfaces-nbr"`
	Neighbor                  map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor  `path:"neighbor" module:"srl_nokia-interfaces-nbr"`
	ProxyNd                   *bool                                                                                  `path:"proxy-nd" module:"srl_nokia-interfaces-nbr"`
	ReachableTime             *uint32                                                                                `path:"reachable-time" module:"srl_nokia-interfaces-nbr"`
	StaleTime                 *uint32                                                                                `path:"stale-time" module:"srl_nokia-interfaces-nbr"`
	VirtualIpv6Discovery      *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery `path:"virtual-ipv6-discovery" module:"srl_nokia-interfaces-nbr-virtual-ip-discovery" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) NewNeighbor(
	Ipv6Address string,
) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetOrCreateNeighbor(
	Ipv6Address string,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor {
	key := Ipv6Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetNeighbor(
	Ipv6Address string,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor {
	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) DeleteNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor struct to the
// list Neighbor of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) AppendNeighbor(
	v *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor,
) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetOrCreateEvpn() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn{}
	return t.Evpn
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetOrCreateHostRoute() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateVirtualIpv6Discovery retrieves the value of the VirtualIpv6Discovery field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetOrCreateVirtualIpv6Discovery() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery {
	if t.VirtualIpv6Discovery != nil {
		return t.VirtualIpv6Discovery
	}
	t.VirtualIpv6Discovery = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery{}
	return t.VirtualIpv6Discovery
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetEvpn() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetHostRoute() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetVirtualIpv6Discovery returns the value of the VirtualIpv6Discovery struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery. If the receiver or the field VirtualIpv6Discovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetVirtualIpv6Discovery() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery {
	if t != nil && t.VirtualIpv6Discovery != nil {
		return t.VirtualIpv6Discovery
	}
	return nil
}

// GetDebug retrieves the value of the leaf Debug from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debug is set, it can
// safely use t.GetDebug() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debug == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetDebug() []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Debug {
	if t == nil || t.Debug == nil {
		return nil
	}
	return t.Debug
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetLearnUnsolicited() E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_LearnUnsolicited {
	if t == nil || t.LearnUnsolicited == 0 {
		return SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_LearnUnsolicited_none
	}
	return t.LearnUnsolicited
}

// GetProxyNd retrieves the value of the leaf ProxyNd from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyNd is set, it can
// safely use t.GetProxyNd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyNd == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetProxyNd() bool {
	if t == nil || t.ProxyNd == nil {
		return false
	}
	return *t.ProxyNd
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 30
	}
	return *t.ReachableTime
}

// GetStaleTime retrieves the value of the leaf StaleTime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 14400
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.LearnUnsolicited == 0 {
		t.LearnUnsolicited = SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_LearnUnsolicited_none
	}
	if t.ProxyNd == nil {
		var v bool = false
		t.ProxyNd = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 30
		t.ReachableTime = &v
	}
	if t.StaleTime == nil {
		var v uint32 = 14400
		t.StaleTime = &v
	}
	t.Evpn.PopulateDefaults()
	t.HostRoute.PopulateDefaults()
	t.VirtualIpv6Discovery.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/evpn YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn struct {
	Advertise map[E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise `path:"advertise" module:"srl_nokia-interfaces-nbr-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) NewAdvertise(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType,
) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) RenameAdvertise(
	oldK, newK E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType,
) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) GetOrCreateAdvertise(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise {
	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) GetAdvertise(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise {
	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) DeleteAdvertise(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType,
) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise struct to the
// list Advertise of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) AppendAdvertise(
	v *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise,
) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr-evpn"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/evpn/advertise YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise struct {
	AdminTag  *uint32                                                                       `path:"admin-tag" module:"srl_nokia-interfaces-nbr-evpn"`
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType `path:"route-type" module:"srl_nokia-interfaces-nbr-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) IsYANGGoStruct() {
}

// GetAdminTag retrieves the value of the leaf AdminTag from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTag is set, it can
// safely use t.GetAdminTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) GetAdminTag() uint32 {
	if t == nil || t.AdminTag == nil {
		return 0
	}
	return *t.AdminTag
}

// GetRouteType retrieves the value of the leaf RouteType from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) GetRouteType() E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Evpn_Advertise_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminTag == nil {
		var v uint32 = 0
		t.AdminTag = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Evpn_Advertise) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr-evpn"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/host-route YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute struct {
	Populate map[E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) IsYANGGoStruct() {}

// NewPopulate creates a new entry in the Populate list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) NewPopulate(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType,
) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) RenamePopulate(
	oldK, newK E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType,
) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) GetOrCreatePopulate(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate {
	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) GetPopulate(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate {
	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) DeletePopulate(
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType,
) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) AppendPopulate(
	v *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate,
) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/host-route/populate YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate struct {
	AdminTag  *uint32                                                                           `path:"admin-tag" module:"srl_nokia-interfaces-nbr"`
	RouteType E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType `path:"route-type" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetAdminTag retrieves the value of the leaf AdminTag from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTag is set, it can
// safely use t.GetAdminTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetAdminTag() uint32 {
	if t == nil || t.AdminTag == nil {
		return 0
	}
	return *t.AdminTag
}

// GetRouteType retrieves the value of the leaf RouteType from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteType() E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_HostRoute_Populate_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/neighbor YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor struct {
	Ipv6Address      *string `path:"ipv6-address" module:"srl_nokia-interfaces-nbr"`
	LinkLayerAddress *string `path:"link-layer-address" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/virtual-ipv6-discovery YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery struct {
	Address map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address `path:"address" module:"srl_nokia-interfaces-nbr-virtual-ip-discovery"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) IsYANGGoStruct() {
}

// NewAddress creates a new entry in the Address list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) NewAddress(
	Ipv6Address string,
) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) GetOrCreateAddress(
	Ipv6Address string,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address {
	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) GetAddress(
	Ipv6Address string,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address {
	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address struct to the
// list Address of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) AppendAddress(
	v *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address,
) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr-virtual-ip-discovery"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/virtual-ipv6-discovery/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address struct {
	AllowedMacs               []string `path:"allowed-macs" module:"srl_nokia-interfaces-nbr-virtual-ip-discovery"`
	Ipv6Address               *string  `path:"ipv6-address" module:"srl_nokia-interfaces-nbr-virtual-ip-discovery"`
	ProbeBridgedSubinterfaces []string `path:"probe-bridged-subinterfaces" module:"srl_nokia-interfaces-nbr-virtual-ip-discovery"`
	ProbeInterval             *uint32  `path:"probe-interval" module:"srl_nokia-interfaces-nbr-virtual-ip-discovery"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) IsYANGGoStruct() {
}

// GetAllowedMacs retrieves the value of the leaf AllowedMacs from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedMacs is set, it can
// safely use t.GetAllowedMacs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedMacs == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) GetAllowedMacs() []string {
	if t == nil || t.AllowedMacs == nil {
		return nil
	}
	return t.AllowedMacs
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetProbeBridgedSubinterfaces retrieves the value of the leaf ProbeBridgedSubinterfaces from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbeBridgedSubinterfaces is set, it can
// safely use t.GetProbeBridgedSubinterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbeBridgedSubinterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) GetProbeBridgedSubinterfaces() []string {
	if t == nil || t.ProbeBridgedSubinterfaces == nil {
		return nil
	}
	return t.ProbeBridgedSubinterfaces
}

// GetProbeInterval retrieves the value of the leaf ProbeInterval from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbeInterval is set, it can
// safely use t.GetProbeInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbeInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) GetProbeInterval() uint32 {
	if t == nil || t.ProbeInterval == nil {
		return 0
	}
	return *t.ProbeInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ProbeInterval == nil {
		var v uint32 = 0
		t.ProbeInterval = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_VirtualIpv6Discovery_Address) ΛBelongingModule() string {
	return "srl_nokia-interfaces-nbr-virtual-ip-discovery"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement represents the /srl_nokia-interfaces/interface/subinterface/ipv6/router-advertisement YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement struct {
	Debug      []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_Debug   `path:"debug" module:"srl_nokia-interfaces-router-adv"`
	RouterRole *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole `path:"router-role" module:"srl_nokia-interfaces-router-adv"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// GetOrCreateRouterRole retrieves the value of the RouterRole field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) GetOrCreateRouterRole() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole {
	if t.RouterRole != nil {
		return t.RouterRole
	}
	t.RouterRole = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole{}
	return t.RouterRole
}

// GetRouterRole returns the value of the RouterRole struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement. If the receiver or the field RouterRole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) GetRouterRole() *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole {
	if t != nil && t.RouterRole != nil {
		return t.RouterRole
	}
	return nil
}

// GetDebug retrieves the value of the leaf Debug from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debug is set, it can
// safely use t.GetDebug() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debug == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) GetDebug() []E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_Debug {
	if t == nil || t.Debug == nil {
		return nil
	}
	return t.Debug
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouterRole.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement) ΛBelongingModule() string {
	return "srl_nokia-interfaces-router-adv"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole represents the /srl_nokia-interfaces/interface/subinterface/ipv6/router-advertisement/router-role YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole struct {
	AdminState               E_SrlNokiaCommon_AdminState                                                                      `path:"admin-state" module:"srl_nokia-interfaces-router-adv"`
	CurrentHopLimit          *uint8                                                                                           `path:"current-hop-limit" module:"srl_nokia-interfaces-router-adv"`
	IpMtu                    *uint16                                                                                          `path:"ip-mtu" module:"srl_nokia-interfaces-router-adv"`
	ManagedConfigurationFlag *bool                                                                                            `path:"managed-configuration-flag" module:"srl_nokia-interfaces-router-adv"`
	MaxAdvertisementInterval *uint16                                                                                          `path:"max-advertisement-interval" module:"srl_nokia-interfaces-router-adv"`
	MinAdvertisementInterval *uint16                                                                                          `path:"min-advertisement-interval" module:"srl_nokia-interfaces-router-adv"`
	OtherConfigurationFlag   *bool                                                                                            `path:"other-configuration-flag" module:"srl_nokia-interfaces-router-adv"`
	Prefix                   map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix `path:"prefix" module:"srl_nokia-interfaces-router-adv"`
	ReachableTime            *uint32                                                                                          `path:"reachable-time" module:"srl_nokia-interfaces-router-adv"`
	RetransmitTime           *uint32                                                                                          `path:"retransmit-time" module:"srl_nokia-interfaces-router-adv"`
	RouterLifetime           *uint16                                                                                          `path:"router-lifetime" module:"srl_nokia-interfaces-router-adv"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) IsYANGGoStruct() {
}

// NewPrefix creates a new entry in the Prefix list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) NewPrefix(
	Ipv6Prefix string,
) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetOrCreatePrefix(
	Ipv6Prefix string,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix {
	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetPrefix(
	Ipv6Prefix string,
) *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix {
	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix struct to the
// list Prefix of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) AppendPrefix(
	v *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix,
) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetCurrentHopLimit() uint8 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetIpMtu retrieves the value of the leaf IpMtu from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetIpMtu() uint16 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetManagedConfigurationFlag retrieves the value of the leaf ManagedConfigurationFlag from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfigurationFlag is set, it can
// safely use t.GetManagedConfigurationFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfigurationFlag == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetManagedConfigurationFlag() bool {
	if t == nil || t.ManagedConfigurationFlag == nil {
		return false
	}
	return *t.ManagedConfigurationFlag
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetMaxAdvertisementInterval() uint16 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 600
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetMinAdvertisementInterval() uint16 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 200
	}
	return *t.MinAdvertisementInterval
}

// GetOtherConfigurationFlag retrieves the value of the leaf OtherConfigurationFlag from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherConfigurationFlag is set, it can
// safely use t.GetOtherConfigurationFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherConfigurationFlag == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetOtherConfigurationFlag() bool {
	if t == nil || t.OtherConfigurationFlag == nil {
		return false
	}
	return *t.OtherConfigurationFlag
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTime retrieves the value of the leaf RetransmitTime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTime is set, it can
// safely use t.GetRetransmitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetRetransmitTime() uint32 {
	if t == nil || t.RetransmitTime == nil {
		return 0
	}
	return *t.RetransmitTime
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) GetRouterLifetime() uint16 {
	if t == nil || t.RouterLifetime == nil {
		return 1800
	}
	return *t.RouterLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.CurrentHopLimit == nil {
		var v uint8 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfigurationFlag == nil {
		var v bool = false
		t.ManagedConfigurationFlag = &v
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint16 = 600
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint16 = 200
		t.MinAdvertisementInterval = &v
	}
	if t.OtherConfigurationFlag == nil {
		var v bool = false
		t.OtherConfigurationFlag = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTime == nil {
		var v uint32 = 0
		t.RetransmitTime = &v
	}
	if t.RouterLifetime == nil {
		var v uint16 = 1800
		t.RouterLifetime = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole) ΛBelongingModule() string {
	return "srl_nokia-interfaces-router-adv"
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix represents the /srl_nokia-interfaces/interface/subinterface/ipv6/router-advertisement/router-role/prefix YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix struct {
	AutonomousFlag    *bool                                                                                                        `path:"autonomous-flag" module:"srl_nokia-interfaces-router-adv"`
	Ipv6Prefix        *string                                                                                                      `path:"ipv6-prefix" module:"srl_nokia-interfaces-router-adv"`
	OnLinkFlag        *bool                                                                                                        `path:"on-link-flag" module:"srl_nokia-interfaces-router-adv"`
	PreferredLifetime SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"srl_nokia-interfaces-router-adv"`
	ValidLifetime     SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"srl_nokia-interfaces-router-adv"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) IsYANGGoStruct() {
}

// GetAutonomousFlag retrieves the value of the leaf AutonomousFlag from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousFlag is set, it can
// safely use t.GetAutonomousFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousFlag == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) GetAutonomousFlag() bool {
	if t == nil || t.AutonomousFlag == nil {
		return true
	}
	return *t.AutonomousFlag
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetOnLinkFlag retrieves the value of the leaf OnLinkFlag from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLinkFlag is set, it can
// safely use t.GetOnLinkFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLinkFlag == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) GetOnLinkFlag() bool {
	if t == nil || t.OnLinkFlag == nil {
		return true
	}
	return *t.OnLinkFlag
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) GetPreferredLifetime() SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) GetValidLifetime() SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutonomousFlag == nil {
		var v bool = true
		t.AutonomousFlag = &v
	}
	if t.OnLinkFlag == nil {
		var v bool = true
		t.OnLinkFlag = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) ΛBelongingModule() string {
	return "srl_nokia-interfaces-router-adv"
}

// SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination represents the /srl_nokia-interfaces/interface/subinterface/local-mirror-destination YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-interfaces-local-mirror-destination"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination.
func (*SrlNokiaInterfaces_Interface_Subinterface_LocalMirrorDestination) ΛBelongingModule() string {
	return "srl_nokia-interfaces-local-mirror-destination"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos represents the /srl_nokia-interfaces/interface/subinterface/qos YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos struct {
	Input  *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input  `path:"input" module:"srl_nokia-qos"`
	Output *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output `path:"output" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) GetOrCreateInput() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Input{}
	return t.Input
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) GetOrCreateOutput() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) GetInput() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) GetOutput() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Input.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input represents the /srl_nokia-interfaces/interface/subinterface/qos/input YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input struct {
	Classifiers *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers `path:"classifiers" module:"srl_nokia-qos"`
	Policers    *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers    `path:"policers" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) IsYANGGoStruct() {}

// GetOrCreateClassifiers retrieves the value of the Classifiers field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) GetOrCreateClassifiers() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers {
	if t.Classifiers != nil {
		return t.Classifiers
	}
	t.Classifiers = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers{}
	return t.Classifiers
}

// GetOrCreatePolicers retrieves the value of the Policers field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) GetOrCreatePolicers() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers {
	if t.Policers != nil {
		return t.Policers
	}
	t.Policers = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers{}
	return t.Policers
}

// GetClassifiers returns the value of the Classifiers struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos_Input. If the receiver or the field Classifiers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) GetClassifiers() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers {
	if t != nil && t.Classifiers != nil {
		return t.Classifiers
	}
	return nil
}

// GetPolicers returns the value of the Policers struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos_Input. If the receiver or the field Policers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) GetPolicers() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers {
	if t != nil && t.Policers != nil {
		return t.Policers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Classifiers.PopulateDefaults()
	t.Policers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Input.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers represents the /srl_nokia-interfaces/interface/subinterface/qos/input/classifiers YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers struct {
	DefaultDropProbability E_SrlNokiaQos_DropProbability                                                                `path:"default-drop-probability" module:"srl_nokia-qos"`
	DefaultForwardingClass SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union `path:"default-forwarding-class" module:"srl_nokia-qos"`
	DefaultProfile         E_SrlNokiaCommon_ClassifyProfile                                                             `path:"default-profile" module:"srl_nokia-qos"`
	Dot1PPolicy            *string                                                                                      `path:"dot1p-policy" module:"srl_nokia-qos"`
	DscpPolicy             *string                                                                                      `path:"dscp-policy" module:"srl_nokia-qos"`
	Ipv4DscpPolicy         *string                                                                                      `path:"ipv4-dscp-policy" module:"srl_nokia-qos"`
	Ipv6DscpPolicy         *string                                                                                      `path:"ipv6-dscp-policy" module:"srl_nokia-qos"`
	LerUseDscp             *bool                                                                                        `path:"ler-use-dscp" module:"srl_nokia-qos"`
	MatchQinqDot1P         E_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_MatchQinqDot1P             `path:"match-qinq-dot1p" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy *string                                                                                      `path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
	Multifield             *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield                  `path:"multifield" module:"srl_nokia-acl-qos"`
	TosMarkingState        E_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_TosMarkingState            `path:"tos-marking-state" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) IsYANGGoStruct() {}

// GetOrCreateMultifield retrieves the value of the Multifield field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetOrCreateMultifield() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield {
	if t.Multifield != nil {
		return t.Multifield
	}
	t.Multifield = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield{}
	return t.Multifield
}

// GetMultifield returns the value of the Multifield struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers. If the receiver or the field Multifield is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetMultifield() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield {
	if t != nil && t.Multifield != nil {
		return t.Multifield
	}
	return nil
}

// GetDefaultDropProbability retrieves the value of the leaf DefaultDropProbability from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDropProbability is set, it can
// safely use t.GetDefaultDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetDefaultDropProbability() E_SrlNokiaQos_DropProbability {
	if t == nil || t.DefaultDropProbability == 0 {
		return 0
	}
	return t.DefaultDropProbability
}

// GetDefaultForwardingClass retrieves the value of the leaf DefaultForwardingClass from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultForwardingClass is set, it can
// safely use t.GetDefaultForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetDefaultForwardingClass() SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union {
	if t == nil || t.DefaultForwardingClass == nil {
		return nil
	}
	return t.DefaultForwardingClass
}

// GetDefaultProfile retrieves the value of the leaf DefaultProfile from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultProfile is set, it can
// safely use t.GetDefaultProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetDefaultProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.DefaultProfile == 0 {
		return 0
	}
	return t.DefaultProfile
}

// GetDot1PPolicy retrieves the value of the leaf Dot1PPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PPolicy is set, it can
// safely use t.GetDot1PPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetDot1PPolicy() string {
	if t == nil || t.Dot1PPolicy == nil {
		return ""
	}
	return *t.Dot1PPolicy
}

// GetDscpPolicy retrieves the value of the leaf DscpPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpPolicy is set, it can
// safely use t.GetDscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetDscpPolicy() string {
	if t == nil || t.DscpPolicy == nil {
		return ""
	}
	return *t.DscpPolicy
}

// GetIpv4DscpPolicy retrieves the value of the leaf Ipv4DscpPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4DscpPolicy is set, it can
// safely use t.GetIpv4DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetIpv4DscpPolicy() string {
	if t == nil || t.Ipv4DscpPolicy == nil {
		return ""
	}
	return *t.Ipv4DscpPolicy
}

// GetIpv6DscpPolicy retrieves the value of the leaf Ipv6DscpPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6DscpPolicy is set, it can
// safely use t.GetIpv6DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetIpv6DscpPolicy() string {
	if t == nil || t.Ipv6DscpPolicy == nil {
		return ""
	}
	return *t.Ipv6DscpPolicy
}

// GetLerUseDscp retrieves the value of the leaf LerUseDscp from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LerUseDscp is set, it can
// safely use t.GetLerUseDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LerUseDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetLerUseDscp() bool {
	if t == nil || t.LerUseDscp == nil {
		return false
	}
	return *t.LerUseDscp
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetMatchQinqDot1P() E_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_MatchQinqDot1P_top
	}
	return t.MatchQinqDot1P
}

// GetMplsTrafficClassPolicy retrieves the value of the leaf MplsTrafficClassPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTrafficClassPolicy is set, it can
// safely use t.GetMplsTrafficClassPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTrafficClassPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetMplsTrafficClassPolicy() string {
	if t == nil || t.MplsTrafficClassPolicy == nil {
		return ""
	}
	return *t.MplsTrafficClassPolicy
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) GetTosMarkingState() E_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_TosMarkingState_trusted
	}
	return t.TosMarkingState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LerUseDscp == nil {
		var v bool = false
		t.LerUseDscp = &v
	}
	if t.MatchQinqDot1P == 0 {
		t.MatchQinqDot1P = SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_MatchQinqDot1P_top
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_TosMarkingState_trusted
	}
	t.Multifield.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield represents the /srl_nokia-interfaces/interface/subinterface/qos/input/classifiers/multifield YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield struct {
	Ipv4Policy *string `path:"ipv4-policy" module:"srl_nokia-acl-qos"`
	Ipv6Policy *string `path:"ipv6-policy" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) IsYANGGoStruct() {}

// GetIpv4Policy retrieves the value of the leaf Ipv4Policy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Policy is set, it can
// safely use t.GetIpv4Policy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Policy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) GetIpv4Policy() string {
	if t == nil || t.Ipv4Policy == nil {
		return ""
	}
	return *t.Ipv4Policy
}

// GetIpv6Policy retrieves the value of the leaf Ipv6Policy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Policy is set, it can
// safely use t.GetIpv6Policy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Policy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) GetIpv6Policy() string {
	if t == nil || t.Ipv6Policy == nil {
		return ""
	}
	return *t.Ipv6Policy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_Multifield) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers represents the /srl_nokia-interfaces/interface/subinterface/qos/input/policers YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers struct {
	PolicerTemplate *string `path:"policer-template" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) IsYANGGoStruct() {}

// GetPolicerTemplate retrieves the value of the leaf PolicerTemplate from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerTemplate is set, it can
// safely use t.GetPolicerTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerTemplate == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) GetPolicerTemplate() string {
	if t == nil || t.PolicerTemplate == nil {
		return ""
	}
	return *t.PolicerTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Policers) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Output represents the /srl_nokia-interfaces/interface/subinterface/qos/output YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Output struct {
	DscpReclassifyPolicy *string                                                            `path:"dscp-reclassify-policy" module:"srl_nokia-qos"`
	OutClassMap          *string                                                            `path:"out-class-map" module:"srl_nokia-qos"`
	RewriteRules         *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules `path:"rewrite-rules" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) IsYANGGoStruct() {}

// GetOrCreateRewriteRules retrieves the value of the RewriteRules field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) GetOrCreateRewriteRules() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules {
	if t.RewriteRules != nil {
		return t.RewriteRules
	}
	t.RewriteRules = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules{}
	return t.RewriteRules
}

// GetRewriteRules returns the value of the RewriteRules struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos_Output. If the receiver or the field RewriteRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) GetRewriteRules() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules {
	if t != nil && t.RewriteRules != nil {
		return t.RewriteRules
	}
	return nil
}

// GetDscpReclassifyPolicy retrieves the value of the leaf DscpReclassifyPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpReclassifyPolicy is set, it can
// safely use t.GetDscpReclassifyPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpReclassifyPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) GetDscpReclassifyPolicy() string {
	if t == nil || t.DscpReclassifyPolicy == nil {
		return ""
	}
	return *t.DscpReclassifyPolicy
}

// GetOutClassMap retrieves the value of the leaf OutClassMap from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutClassMap is set, it can
// safely use t.GetOutClassMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutClassMap == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) GetOutClassMap() string {
	if t == nil || t.OutClassMap == nil {
		return ""
	}
	return *t.OutClassMap
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RewriteRules.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Output.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules represents the /srl_nokia-interfaces/interface/subinterface/qos/output/rewrite-rules YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules struct {
	Dot1PPolicy            *string                                                                      `path:"dot1p-policy" module:"srl_nokia-qos"`
	DscpPolicy             *string                                                                      `path:"dscp-policy" module:"srl_nokia-qos"`
	Ipv4DscpPolicy         *string                                                                      `path:"ipv4-dscp-policy" module:"srl_nokia-qos"`
	Ipv6DscpPolicy         *string                                                                      `path:"ipv6-dscp-policy" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy *string                                                                      `path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
	QinqMarkTopOnly        *bool                                                                        `path:"qinq-mark-top-only" module:"srl_nokia-qos"`
	Remarking              *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking `path:"remarking" module:"srl_nokia-qos" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) IsYANGGoStruct() {}

// GetOrCreateRemarking retrieves the value of the Remarking field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetOrCreateRemarking() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking {
	if t.Remarking != nil {
		return t.Remarking
	}
	t.Remarking = &SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking{}
	return t.Remarking
}

// GetRemarking returns the value of the Remarking struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules. If the receiver or the field Remarking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetRemarking() *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking {
	if t != nil && t.Remarking != nil {
		return t.Remarking
	}
	return nil
}

// GetDot1PPolicy retrieves the value of the leaf Dot1PPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PPolicy is set, it can
// safely use t.GetDot1PPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetDot1PPolicy() string {
	if t == nil || t.Dot1PPolicy == nil {
		return ""
	}
	return *t.Dot1PPolicy
}

// GetDscpPolicy retrieves the value of the leaf DscpPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpPolicy is set, it can
// safely use t.GetDscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetDscpPolicy() string {
	if t == nil || t.DscpPolicy == nil {
		return ""
	}
	return *t.DscpPolicy
}

// GetIpv4DscpPolicy retrieves the value of the leaf Ipv4DscpPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4DscpPolicy is set, it can
// safely use t.GetIpv4DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetIpv4DscpPolicy() string {
	if t == nil || t.Ipv4DscpPolicy == nil {
		return ""
	}
	return *t.Ipv4DscpPolicy
}

// GetIpv6DscpPolicy retrieves the value of the leaf Ipv6DscpPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6DscpPolicy is set, it can
// safely use t.GetIpv6DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetIpv6DscpPolicy() string {
	if t == nil || t.Ipv6DscpPolicy == nil {
		return ""
	}
	return *t.Ipv6DscpPolicy
}

// GetMplsTrafficClassPolicy retrieves the value of the leaf MplsTrafficClassPolicy from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTrafficClassPolicy is set, it can
// safely use t.GetMplsTrafficClassPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTrafficClassPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetMplsTrafficClassPolicy() string {
	if t == nil || t.MplsTrafficClassPolicy == nil {
		return ""
	}
	return *t.MplsTrafficClassPolicy
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return true
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = true
		t.QinqMarkTopOnly = &v
	}
	t.Remarking.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking represents the /srl_nokia-interfaces/interface/subinterface/qos/output/rewrite-rules/remarking YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking struct {
	ForceRemarkTrusted *bool `path:"force-remark-trusted" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) IsYANGGoStruct() {
}

// GetForceRemarkTrusted retrieves the value of the leaf ForceRemarkTrusted from the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceRemarkTrusted is set, it can
// safely use t.GetForceRemarkTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceRemarkTrusted == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) GetForceRemarkTrusted() bool {
	if t == nil || t.ForceRemarkTrusted == nil {
		return false
	}
	return *t.ForceRemarkTrusted
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceRemarkTrusted == nil {
		var v bool = false
		t.ForceRemarkTrusted = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules_Remarking) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaInterfaces_Interface_Subinterface_RaGuard represents the /srl_nokia-interfaces/interface/subinterface/ra-guard YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_RaGuard struct {
	Policy   *string                                                                `path:"policy" module:"srl_nokia-ra_guard"`
	VlanList map[uint16]*SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList `path:"vlan-list" module:"srl_nokia-ra_guard"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_RaGuard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_RaGuard) IsYANGGoStruct() {}

// NewVlanList creates a new entry in the VlanList list of the
// SrlNokiaInterfaces_Interface_Subinterface_RaGuard struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) NewVlanList(VlanId uint16) (*SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanList == nil {
		t.VlanList = make(map[uint16]*SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanList", key)
	}

	t.VlanList[key] = &SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList{
		VlanId: &VlanId,
	}

	return t.VlanList[key], nil
}

// RenameVlanList renames an entry in the list VlanList within
// the SrlNokiaInterfaces_Interface_Subinterface_RaGuard struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) RenameVlanList(oldK, newK uint16) error {
	if _, ok := t.VlanList[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanList", newK)
	}

	e, ok := t.VlanList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanList", oldK)
	}
	e.VlanId = &newK

	t.VlanList[newK] = e
	delete(t.VlanList, oldK)
	return nil
}

// GetOrCreateVlanList retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_RaGuard. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) GetOrCreateVlanList(VlanId uint16) *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList {
	key := VlanId

	if v, ok := t.VlanList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanList(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanList got unexpected error: %v", err))
	}
	return v
}

// GetVlanList retrieves the value with the specified key from
// the VlanList map field of SrlNokiaInterfaces_Interface_Subinterface_RaGuard. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) GetVlanList(VlanId uint16) *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList {
	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.VlanList[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlanList deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_RaGuard. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) DeleteVlanList(VlanId uint16) {
	key := VlanId

	delete(t.VlanList, key)
}

// AppendVlanList appends the supplied SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList struct to the
// list VlanList of SrlNokiaInterfaces_Interface_Subinterface_RaGuard. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) AppendVlanList(
	v *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList,
) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanList == nil {
		t.VlanList = make(map[uint16]*SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList)
	}

	if _, ok := t.VlanList[key]; ok {
		return fmt.Errorf("duplicate key for list VlanList %v", key)
	}

	t.VlanList[key] = v
	return nil
}

// GetPolicy retrieves the value of the leaf Policy from the SrlNokiaInterfaces_Interface_Subinterface_RaGuard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_RaGuard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.VlanList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_RaGuard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_RaGuard.
func (*SrlNokiaInterfaces_Interface_Subinterface_RaGuard) ΛBelongingModule() string {
	return "srl_nokia-ra_guard"
}

// SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList represents the /srl_nokia-interfaces/interface/subinterface/ra-guard/vlan-list YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList struct {
	VlanId *uint16 `path:"vlan-id" module:"srl_nokia-ra_guard"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) IsYANGGoStruct() {}

// GetVlanId retrieves the value of the leaf VlanId from the SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList.
func (*SrlNokiaInterfaces_Interface_Subinterface_RaGuard_VlanList) ΛBelongingModule() string {
	return "srl_nokia-ra_guard"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan represents the /srl_nokia-interfaces/interface/subinterface/vlan YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan struct {
	Encap         *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap         `path:"encap" module:"srl_nokia-interfaces-vlans"`
	VlanDiscovery *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery `path:"vlan-discovery" module:"srl_nokia-interfaces-vlans" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan) IsYANGGoStruct() {}

// GetOrCreateEncap retrieves the value of the Encap field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) GetOrCreateEncap() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap {
	if t.Encap != nil {
		return t.Encap
	}
	t.Encap = &SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap{}
	return t.Encap
}

// GetOrCreateVlanDiscovery retrieves the value of the VlanDiscovery field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) GetOrCreateVlanDiscovery() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery {
	if t.VlanDiscovery != nil {
		return t.VlanDiscovery
	}
	t.VlanDiscovery = &SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery{}
	return t.VlanDiscovery
}

// GetEncap returns the value of the Encap struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Vlan. If the receiver or the field Encap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) GetEncap() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap {
	if t != nil && t.Encap != nil {
		return t.Encap
	}
	return nil
}

// GetVlanDiscovery returns the value of the VlanDiscovery struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Vlan. If the receiver or the field VlanDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) GetVlanDiscovery() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery {
	if t != nil && t.VlanDiscovery != nil {
		return t.VlanDiscovery
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Encap.PopulateDefaults()
	t.VlanDiscovery.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap struct {
	SingleTagged      *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged      `path:"single-tagged" module:"srl_nokia-interfaces-vlans" yangPresence:"true"`
	SingleTaggedRange *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange `path:"single-tagged-range" module:"srl_nokia-interfaces-vlans" yangPresence:"true"`
	Untagged          *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged          `path:"untagged" module:"srl_nokia-interfaces-vlans" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) IsYANGGoStruct() {}

// GetOrCreateSingleTagged retrieves the value of the SingleTagged field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) GetOrCreateSingleTagged() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged {
	if t.SingleTagged != nil {
		return t.SingleTagged
	}
	t.SingleTagged = &SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged{}
	return t.SingleTagged
}

// GetOrCreateSingleTaggedRange retrieves the value of the SingleTaggedRange field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) GetOrCreateSingleTaggedRange() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange {
	if t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	t.SingleTaggedRange = &SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange{}
	return t.SingleTaggedRange
}

// GetOrCreateUntagged retrieves the value of the Untagged field
// or returns the existing field if it already exists.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) GetOrCreateUntagged() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged {
	if t.Untagged != nil {
		return t.Untagged
	}
	t.Untagged = &SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged{}
	return t.Untagged
}

// GetSingleTagged returns the value of the SingleTagged struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap. If the receiver or the field SingleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) GetSingleTagged() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged {
	if t != nil && t.SingleTagged != nil {
		return t.SingleTagged
	}
	return nil
}

// GetSingleTaggedRange returns the value of the SingleTaggedRange struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap. If the receiver or the field SingleTaggedRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) GetSingleTaggedRange() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange {
	if t != nil && t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	return nil
}

// GetUntagged returns the value of the Untagged struct pointer
// from SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap. If the receiver or the field Untagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) GetUntagged() *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged {
	if t != nil && t.Untagged != nil {
		return t.Untagged
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SingleTagged.PopulateDefaults()
	t.SingleTaggedRange.PopulateDefaults()
	t.Untagged.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap/single-tagged YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged struct {
	VlanId SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union `path:"vlan-id" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) IsYANGGoStruct() {}

// GetVlanId retrieves the value of the leaf VlanId from the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) GetVlanId() SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union {
	if t == nil || t.VlanId == nil {
		return nil
	}
	return t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap/single-tagged-range YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange struct {
	LowVlanId map[uint16]*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId `path:"low-vlan-id" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) IsYANGGoStruct() {}

// NewLowVlanId creates a new entry in the LowVlanId list of the
// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) NewLowVlanId(
	RangeLowVlanId uint16,
) (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LowVlanId == nil {
		t.LowVlanId = make(map[uint16]*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId)
	}

	key := RangeLowVlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LowVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LowVlanId", key)
	}

	t.LowVlanId[key] = &SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId{
		RangeLowVlanId: &RangeLowVlanId,
	}

	return t.LowVlanId[key], nil
}

// RenameLowVlanId renames an entry in the list LowVlanId within
// the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) RenameLowVlanId(oldK, newK uint16) error {
	if _, ok := t.LowVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in LowVlanId", newK)
	}

	e, ok := t.LowVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LowVlanId", oldK)
	}
	e.RangeLowVlanId = &newK

	t.LowVlanId[newK] = e
	delete(t.LowVlanId, oldK)
	return nil
}

// GetOrCreateLowVlanId retrieves the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) GetOrCreateLowVlanId(
	RangeLowVlanId uint16,
) *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId {
	key := RangeLowVlanId

	if v, ok := t.LowVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLowVlanId(RangeLowVlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLowVlanId got unexpected error: %v", err))
	}
	return v
}

// GetLowVlanId retrieves the value with the specified key from
// the LowVlanId map field of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) GetLowVlanId(
	RangeLowVlanId uint16,
) *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId {
	if t == nil {
		return nil
	}

	key := RangeLowVlanId

	if lm, ok := t.LowVlanId[key]; ok {
		return lm
	}
	return nil
}

// DeleteLowVlanId deletes the value with the specified keys from
// the receiver SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) DeleteLowVlanId(RangeLowVlanId uint16) {
	key := RangeLowVlanId

	delete(t.LowVlanId, key)
}

// AppendLowVlanId appends the supplied SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId struct to the
// list LowVlanId of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange. If the key value(s) specified in
// the supplied SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId already exist in the list, an error is
// returned.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) AppendLowVlanId(
	v *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId,
) error {
	if v.RangeLowVlanId == nil {
		return fmt.Errorf("invalid nil key received for RangeLowVlanId")
	}

	key := *v.RangeLowVlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LowVlanId == nil {
		t.LowVlanId = make(map[uint16]*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId)
	}

	if _, ok := t.LowVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list LowVlanId %v", key)
	}

	t.LowVlanId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LowVlanId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap/single-tagged-range/low-vlan-id YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId struct {
	HighVlanId     *uint16 `path:"high-vlan-id" module:"srl_nokia-interfaces-vlans"`
	RangeLowVlanId *uint16 `path:"range-low-vlan-id" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) IsYANGGoStruct() {
}

// GetHighVlanId retrieves the value of the leaf HighVlanId from the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighVlanId is set, it can
// safely use t.GetHighVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighVlanId == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) GetHighVlanId() uint16 {
	if t == nil || t.HighVlanId == nil {
		return 0
	}
	return *t.HighVlanId
}

// GetRangeLowVlanId retrieves the value of the leaf RangeLowVlanId from the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeLowVlanId is set, it can
// safely use t.GetRangeLowVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeLowVlanId == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) GetRangeLowVlanId() uint16 {
	if t == nil || t.RangeLowVlanId == nil {
		return 0
	}
	return *t.RangeLowVlanId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RangeLowVlanId == nil {
		return nil, fmt.Errorf("nil value for key RangeLowVlanId")
	}

	return map[string]interface{}{
		"range-low-vlan-id": *t.RangeLowVlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTaggedRange_LowVlanId) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap/untagged YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged struct{}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_Untagged) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery represents the /srl_nokia-interfaces/interface/subinterface/vlan/vlan-discovery YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery struct {
	Type E_SrlNokiaInterfacesVlans_VlanDiscoveryAddressType `path:"type" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) GetType() E_SrlNokiaInterfacesVlans_VlanDiscoveryAddressType {
	if t == nil || t.Type == 0 {
		return SrlNokiaInterfacesVlans_VlanDiscoveryAddressType_IPv4v6
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = SrlNokiaInterfacesVlans_VlanDiscoveryAddressType_IPv4v6
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_VlanDiscovery) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vlans"
}

// SrlNokiaInterfaces_Interface_Transceiver represents the /srl_nokia-interfaces/interface/transceiver YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver struct {
	DdmEvents              *bool                                                             `path:"ddm-events" module:"srl_nokia-interfaces"`
	ForwardErrorCorrection E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection `path:"forward-error-correction" module:"srl_nokia-interfaces"`
	FunctionalType         E_SrlNokiaInterfaces_TransceiverFunctionalType                    `path:"functional-type" module:"srl_nokia-interfaces"`
	TxLaser                *bool                                                             `path:"tx-laser" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver) IsYANGGoStruct() {}

// GetDdmEvents retrieves the value of the leaf DdmEvents from the SrlNokiaInterfaces_Interface_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DdmEvents is set, it can
// safely use t.GetDdmEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DdmEvents == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Transceiver) GetDdmEvents() bool {
	if t == nil || t.DdmEvents == nil {
		return false
	}
	return *t.DdmEvents
}

// GetForwardErrorCorrection retrieves the value of the leaf ForwardErrorCorrection from the SrlNokiaInterfaces_Interface_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardErrorCorrection is set, it can
// safely use t.GetForwardErrorCorrection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardErrorCorrection == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Transceiver) GetForwardErrorCorrection() E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection {
	if t == nil || t.ForwardErrorCorrection == 0 {
		return 0
	}
	return t.ForwardErrorCorrection
}

// GetFunctionalType retrieves the value of the leaf FunctionalType from the SrlNokiaInterfaces_Interface_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FunctionalType is set, it can
// safely use t.GetFunctionalType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FunctionalType == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Transceiver) GetFunctionalType() E_SrlNokiaInterfaces_TransceiverFunctionalType {
	if t == nil || t.FunctionalType == 0 {
		return 0
	}
	return t.FunctionalType
}

// GetTxLaser retrieves the value of the leaf TxLaser from the SrlNokiaInterfaces_Interface_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxLaser is set, it can
// safely use t.GetTxLaser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxLaser == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Transceiver) GetTxLaser() bool {
	if t == nil || t.TxLaser == nil {
		return false
	}
	return *t.TxLaser
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Transceiver
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Transceiver) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Transceiver.
func (*SrlNokiaInterfaces_Interface_Transceiver) ΛBelongingModule() string {
	return "srl_nokia-interfaces"
}

// SrlNokiaInterfaces_Interface_Vhost represents the /srl_nokia-interfaces/interface/vhost YANG schema element.
type SrlNokiaInterfaces_Interface_Vhost struct {
	VhostSocketMode   E_SrlNokiaInterfaces_Interface_Vhost_VhostSocketMode `path:"vhost-socket-mode" module:"srl_nokia-interfaces-vxdp"`
	VhostSocketPath   *string                                              `path:"vhost-socket-path" module:"srl_nokia-interfaces-vxdp"`
	VhostSocketQueues *uint16                                              `path:"vhost-socket-queues" module:"srl_nokia-interfaces-vxdp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Vhost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Vhost) IsYANGGoStruct() {}

// GetVhostSocketMode retrieves the value of the leaf VhostSocketMode from the SrlNokiaInterfaces_Interface_Vhost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VhostSocketMode is set, it can
// safely use t.GetVhostSocketMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VhostSocketMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Vhost) GetVhostSocketMode() E_SrlNokiaInterfaces_Interface_Vhost_VhostSocketMode {
	if t == nil || t.VhostSocketMode == 0 {
		return SrlNokiaInterfaces_Interface_Vhost_VhostSocketMode_client
	}
	return t.VhostSocketMode
}

// GetVhostSocketPath retrieves the value of the leaf VhostSocketPath from the SrlNokiaInterfaces_Interface_Vhost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VhostSocketPath is set, it can
// safely use t.GetVhostSocketPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VhostSocketPath == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Vhost) GetVhostSocketPath() string {
	if t == nil || t.VhostSocketPath == nil {
		return ""
	}
	return *t.VhostSocketPath
}

// GetVhostSocketQueues retrieves the value of the leaf VhostSocketQueues from the SrlNokiaInterfaces_Interface_Vhost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VhostSocketQueues is set, it can
// safely use t.GetVhostSocketQueues() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VhostSocketQueues == nil' before retrieving the leaf's value.
func (t *SrlNokiaInterfaces_Interface_Vhost) GetVhostSocketQueues() uint16 {
	if t == nil || t.VhostSocketQueues == nil {
		return 0
	}
	return *t.VhostSocketQueues
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaInterfaces_Interface_Vhost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaInterfaces_Interface_Vhost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VhostSocketMode == 0 {
		t.VhostSocketMode = SrlNokiaInterfaces_Interface_Vhost_VhostSocketMode_client
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Vhost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Vhost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Vhost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Vhost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaInterfaces_Interface_Vhost.
func (*SrlNokiaInterfaces_Interface_Vhost) ΛBelongingModule() string {
	return "srl_nokia-interfaces-vxdp"
}

// SrlNokiaMacsec_Macsec represents the /srl_nokia-macsec/macsec YANG schema element.
type SrlNokiaMacsec_Macsec struct {
	Interfaces *SrlNokiaMacsec_Macsec_Interfaces `path:"interfaces" module:"srl_nokia-macsec"`
	Mka        *SrlNokiaMacsec_Macsec_Mka        `path:"mka" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec) IsYANGGoStruct() {}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec) GetOrCreateInterfaces() *SrlNokiaMacsec_Macsec_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &SrlNokiaMacsec_Macsec_Interfaces{}
	return t.Interfaces
}

// GetOrCreateMka retrieves the value of the Mka field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec) GetOrCreateMka() *SrlNokiaMacsec_Macsec_Mka {
	if t.Mka != nil {
		return t.Mka
	}
	t.Mka = &SrlNokiaMacsec_Macsec_Mka{}
	return t.Mka
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from SrlNokiaMacsec_Macsec. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec) GetInterfaces() *SrlNokiaMacsec_Macsec_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetMka returns the value of the Mka struct pointer
// from SrlNokiaMacsec_Macsec. If the receiver or the field Mka is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec) GetMka() *SrlNokiaMacsec_Macsec_Mka {
	if t != nil && t.Mka != nil {
		return t.Mka
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interfaces.PopulateDefaults()
	t.Mka.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec.
func (*SrlNokiaMacsec_Macsec) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces represents the /srl_nokia-macsec/macsec/interfaces YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces struct {
	Interface map[uint32]*SrlNokiaMacsec_Macsec_Interfaces_Interface `path:"interface" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaMacsec_Macsec_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaMacsec_Macsec_Interfaces) NewInterface(Name uint32) (*SrlNokiaMacsec_Macsec_Interfaces_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[uint32]*SrlNokiaMacsec_Macsec_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaMacsec_Macsec_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaMacsec_Macsec_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaMacsec_Macsec_Interfaces) RenameInterface(oldK, newK uint32) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaMacsec_Macsec_Interfaces) GetOrCreateInterface(Name uint32) *SrlNokiaMacsec_Macsec_Interfaces_Interface {
	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaMacsec_Macsec_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaMacsec_Macsec_Interfaces) GetInterface(Name uint32) *SrlNokiaMacsec_Macsec_Interfaces_Interface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Interfaces. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaMacsec_Macsec_Interfaces) DeleteInterface(Name uint32) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaMacsec_Macsec_Interfaces_Interface struct to the
// list Interface of SrlNokiaMacsec_Macsec_Interfaces. If the key value(s) specified in
// the supplied SrlNokiaMacsec_Macsec_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaMacsec_Macsec_Interfaces) AppendInterface(v *SrlNokiaMacsec_Macsec_Interfaces_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[uint32]*SrlNokiaMacsec_Macsec_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces.
func (*SrlNokiaMacsec_Macsec_Interfaces) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces_Interface represents the /srl_nokia-macsec/macsec/interfaces/interface YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces_Interface struct {
	Config *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config `path:"config" module:"srl_nokia-macsec"`
	Mka    *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka    `path:"mka" module:"srl_nokia-macsec"`
	Name   *uint32                                            `path:"name" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) GetOrCreateConfig() *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &SrlNokiaMacsec_Macsec_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateMka retrieves the value of the Mka field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) GetOrCreateMka() *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka {
	if t.Mka != nil {
		return t.Mka
	}
	t.Mka = &SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka{}
	return t.Mka
}

// GetConfig returns the value of the Config struct pointer
// from SrlNokiaMacsec_Macsec_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) GetConfig() *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetMka returns the value of the Mka struct pointer
// from SrlNokiaMacsec_Macsec_Interfaces_Interface. If the receiver or the field Mka is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) GetMka() *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka {
	if t != nil && t.Mka != nil {
		return t.Mka
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaMacsec_Macsec_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) GetName() uint32 {
	if t == nil || t.Name == nil {
		return 0
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
	t.Mka.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaMacsec_Macsec_Interfaces_Interface struct, which is a YANG list entry.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces_Interface.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces_Interface_Config represents the /srl_nokia-macsec/macsec/interfaces/interface/config YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces_Interface_Config struct {
	Enable            E_SrlNokiaCommon_AdminState                                                                        `path:"enable" module:"srl_nokia-macsec"`
	ExcludeMac        map[string]*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac                           `path:"exclude-mac" module:"srl_nokia-macsec"`
	ExcludeProtocols  map[E_SrlNokiaMacsec_Protocols]*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols `path:"exclude-protocols" module:"srl_nokia-macsec"`
	ReplayProtection  *uint16                                                                                            `path:"replay-protection" module:"srl_nokia-macsec"`
	RxMustBeEncrypted *bool                                                                                              `path:"rx-must-be-encrypted" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) IsYANGGoStruct() {}

// NewExcludeMac creates a new entry in the ExcludeMac list of the
// SrlNokiaMacsec_Macsec_Interfaces_Interface_Config struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) NewExcludeMac(DstMac string) (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeMac == nil {
		t.ExcludeMac = make(map[string]*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac)
	}

	key := DstMac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeMac", key)
	}

	t.ExcludeMac[key] = &SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac{
		DstMac: &DstMac,
	}

	return t.ExcludeMac[key], nil
}

// RenameExcludeMac renames an entry in the list ExcludeMac within
// the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) RenameExcludeMac(oldK, newK string) error {
	if _, ok := t.ExcludeMac[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeMac", newK)
	}

	e, ok := t.ExcludeMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeMac", oldK)
	}
	e.DstMac = &newK

	t.ExcludeMac[newK] = e
	delete(t.ExcludeMac, oldK)
	return nil
}

// GetOrCreateExcludeMac retrieves the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetOrCreateExcludeMac(DstMac string) *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac {
	key := DstMac

	if v, ok := t.ExcludeMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeMac(DstMac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeMac got unexpected error: %v", err))
	}
	return v
}

// GetExcludeMac retrieves the value with the specified key from
// the ExcludeMac map field of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetExcludeMac(DstMac string) *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac {
	if t == nil {
		return nil
	}

	key := DstMac

	if lm, ok := t.ExcludeMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeMac deletes the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) DeleteExcludeMac(DstMac string) {
	key := DstMac

	delete(t.ExcludeMac, key)
}

// AppendExcludeMac appends the supplied SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac struct to the
// list ExcludeMac of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If the key value(s) specified in
// the supplied SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac already exist in the list, an error is
// returned.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) AppendExcludeMac(
	v *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac,
) error {
	if v.DstMac == nil {
		return fmt.Errorf("invalid nil key received for DstMac")
	}

	key := *v.DstMac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeMac == nil {
		t.ExcludeMac = make(map[string]*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac)
	}

	if _, ok := t.ExcludeMac[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeMac %v", key)
	}

	t.ExcludeMac[key] = v
	return nil
}

// NewExcludeProtocols creates a new entry in the ExcludeProtocols list of the
// SrlNokiaMacsec_Macsec_Interfaces_Interface_Config struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) NewExcludeProtocols(
	Protocol E_SrlNokiaMacsec_Protocols,
) (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeProtocols == nil {
		t.ExcludeProtocols = make(map[E_SrlNokiaMacsec_Protocols]*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols)
	}

	key := Protocol

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeProtocols[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeProtocols", key)
	}

	t.ExcludeProtocols[key] = &SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols{
		Protocol: Protocol,
	}

	return t.ExcludeProtocols[key], nil
}

// RenameExcludeProtocols renames an entry in the list ExcludeProtocols within
// the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) RenameExcludeProtocols(oldK, newK E_SrlNokiaMacsec_Protocols) error {
	if _, ok := t.ExcludeProtocols[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeProtocols", newK)
	}

	e, ok := t.ExcludeProtocols[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeProtocols", oldK)
	}
	e.Protocol = newK

	t.ExcludeProtocols[newK] = e
	delete(t.ExcludeProtocols, oldK)
	return nil
}

// GetOrCreateExcludeProtocols retrieves the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetOrCreateExcludeProtocols(
	Protocol E_SrlNokiaMacsec_Protocols,
) *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols {
	key := Protocol

	if v, ok := t.ExcludeProtocols[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeProtocols(Protocol)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeProtocols got unexpected error: %v", err))
	}
	return v
}

// GetExcludeProtocols retrieves the value with the specified key from
// the ExcludeProtocols map field of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetExcludeProtocols(
	Protocol E_SrlNokiaMacsec_Protocols,
) *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols {
	if t == nil {
		return nil
	}

	key := Protocol

	if lm, ok := t.ExcludeProtocols[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeProtocols deletes the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) DeleteExcludeProtocols(Protocol E_SrlNokiaMacsec_Protocols) {
	key := Protocol

	delete(t.ExcludeProtocols, key)
}

// AppendExcludeProtocols appends the supplied SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols struct to the
// list ExcludeProtocols of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config. If the key value(s) specified in
// the supplied SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols already exist in the list, an error is
// returned.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) AppendExcludeProtocols(
	v *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols,
) error {
	key := v.Protocol

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeProtocols == nil {
		t.ExcludeProtocols = make(map[E_SrlNokiaMacsec_Protocols]*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols)
	}

	if _, ok := t.ExcludeProtocols[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeProtocols %v", key)
	}

	t.ExcludeProtocols[key] = v
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetEnable() E_SrlNokiaCommon_AdminState {
	if t == nil || t.Enable == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.Enable
}

// GetReplayProtection retrieves the value of the leaf ReplayProtection from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayProtection is set, it can
// safely use t.GetReplayProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayProtection == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetReplayProtection() uint16 {
	if t == nil || t.ReplayProtection == nil {
		return 0
	}
	return *t.ReplayProtection
}

// GetRxMustBeEncrypted retrieves the value of the leaf RxMustBeEncrypted from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxMustBeEncrypted is set, it can
// safely use t.GetRxMustBeEncrypted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxMustBeEncrypted == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) GetRxMustBeEncrypted() bool {
	if t == nil || t.RxMustBeEncrypted == nil {
		return true
	}
	return *t.RxMustBeEncrypted
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == 0 {
		t.Enable = SrlNokiaCommon_AdminState_disable
	}
	if t.ReplayProtection == nil {
		var v uint16 = 0
		t.ReplayProtection = &v
	}
	if t.RxMustBeEncrypted == nil {
		var v bool = true
		t.RxMustBeEncrypted = &v
	}
	for _, e := range t.ExcludeMac {
		e.PopulateDefaults()
	}
	for _, e := range t.ExcludeProtocols {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac represents the /srl_nokia-macsec/macsec/interfaces/interface/config/exclude-mac YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac struct {
	DstMac *string `path:"dst-mac" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) IsYANGGoStruct() {}

// GetDstMac retrieves the value of the leaf DstMac from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstMac is set, it can
// safely use t.GetDstMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) GetDstMac() string {
	if t == nil || t.DstMac == nil {
		return ""
	}
	return *t.DstMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac struct, which is a YANG list entry.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DstMac == nil {
		return nil, fmt.Errorf("nil value for key DstMac")
	}

	return map[string]interface{}{
		"dst-mac": *t.DstMac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeMac) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols represents the /srl_nokia-macsec/macsec/interfaces/interface/config/exclude-protocols YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols struct {
	Protocol E_SrlNokiaMacsec_Protocols `path:"protocol" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) IsYANGGoStruct() {}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) GetProtocol() E_SrlNokiaMacsec_Protocols {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols struct, which is a YANG list entry.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"protocol": t.Protocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Config_ExcludeProtocols) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka represents the /srl_nokia-macsec/macsec/interfaces/interface/mka YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka struct {
	Config *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config `path:"config" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) GetOrCreateConfig() *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) GetConfig() *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config represents the /srl_nokia-macsec/macsec/interfaces/interface/mka/config YANG schema element.
type SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config struct {
	KeyChain  *string `path:"key-chain" module:"srl_nokia-macsec"`
	MkaPolicy *string `path:"mka-policy" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) IsYANGGoStruct() {}

// GetKeyChain retrieves the value of the leaf KeyChain from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyChain is set, it can
// safely use t.GetKeyChain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyChain == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) GetKeyChain() string {
	if t == nil || t.KeyChain == nil {
		return ""
	}
	return *t.KeyChain
}

// GetMkaPolicy retrieves the value of the leaf MkaPolicy from the SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MkaPolicy is set, it can
// safely use t.GetMkaPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MkaPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) GetMkaPolicy() string {
	if t == nil || t.MkaPolicy == nil {
		return ""
	}
	return *t.MkaPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config.
func (*SrlNokiaMacsec_Macsec_Interfaces_Interface_Mka_Config) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Mka represents the /srl_nokia-macsec/macsec/mka YANG schema element.
type SrlNokiaMacsec_Macsec_Mka struct {
	Policies *SrlNokiaMacsec_Macsec_Mka_Policies `path:"policies" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Mka implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Mka) IsYANGGoStruct() {}

// GetOrCreatePolicies retrieves the value of the Policies field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec_Mka) GetOrCreatePolicies() *SrlNokiaMacsec_Macsec_Mka_Policies {
	if t.Policies != nil {
		return t.Policies
	}
	t.Policies = &SrlNokiaMacsec_Macsec_Mka_Policies{}
	return t.Policies
}

// GetPolicies returns the value of the Policies struct pointer
// from SrlNokiaMacsec_Macsec_Mka. If the receiver or the field Policies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec_Mka) GetPolicies() *SrlNokiaMacsec_Macsec_Mka_Policies {
	if t != nil && t.Policies != nil {
		return t.Policies
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Mka
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Mka) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Policies.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Mka"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Mka) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Mka.
func (*SrlNokiaMacsec_Macsec_Mka) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Mka_Policies represents the /srl_nokia-macsec/macsec/mka/policies YANG schema element.
type SrlNokiaMacsec_Macsec_Mka_Policies struct {
	Policy map[string]*SrlNokiaMacsec_Macsec_Mka_Policies_Policy `path:"policy" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Mka_Policies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Mka_Policies) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaMacsec_Macsec_Mka_Policies struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) NewPolicy(Name string) (*SrlNokiaMacsec_Macsec_Mka_Policies_Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaMacsec_Macsec_Mka_Policies_Policy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaMacsec_Macsec_Mka_Policies_Policy{
		Name: &Name,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the SrlNokiaMacsec_Macsec_Mka_Policies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.Name = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Mka_Policies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) GetOrCreatePolicy(Name string) *SrlNokiaMacsec_Macsec_Mka_Policies_Policy {
	key := Name

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of SrlNokiaMacsec_Macsec_Mka_Policies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) GetPolicy(Name string) *SrlNokiaMacsec_Macsec_Mka_Policies_Policy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver SrlNokiaMacsec_Macsec_Mka_Policies. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) DeletePolicy(Name string) {
	key := Name

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied SrlNokiaMacsec_Macsec_Mka_Policies_Policy struct to the
// list Policy of SrlNokiaMacsec_Macsec_Mka_Policies. If the key value(s) specified in
// the supplied SrlNokiaMacsec_Macsec_Mka_Policies_Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) AppendPolicy(v *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaMacsec_Macsec_Mka_Policies_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Mka_Policies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Mka_Policies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Mka_Policies.
func (*SrlNokiaMacsec_Macsec_Mka_Policies) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Mka_Policies_Policy represents the /srl_nokia-macsec/macsec/mka/policies/policy YANG schema element.
type SrlNokiaMacsec_Macsec_Mka_Policies_Policy struct {
	Config *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config `path:"config" module:"srl_nokia-macsec"`
	Name   *string                                           `path:"name" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Mka_Policies_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Mka_Policies_Policy) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) GetOrCreateConfig() *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config{}
	return t.Config
}

// GetConfig returns the value of the Config struct pointer
// from SrlNokiaMacsec_Macsec_Mka_Policies_Policy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) GetConfig() *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Mka_Policies_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Config.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaMacsec_Macsec_Mka_Policies_Policy struct, which is a YANG list entry.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Mka_Policies_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Mka_Policies_Policy.
func (*SrlNokiaMacsec_Macsec_Mka_Policies_Policy) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config represents the /srl_nokia-macsec/macsec/mka/policies/policy/config YANG schema element.
type SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config struct {
	ClearTagMode            E_SrlNokiaMacsec_TagMode               `path:"clear-tag-mode" module:"srl_nokia-macsec"`
	ConfidentialityOffset   E_SrlNokiaMacsec_ConfidentialityOffset `path:"confidentiality-offset" module:"srl_nokia-macsec"`
	DelayProtection         *bool                                  `path:"delay-protection" module:"srl_nokia-macsec"`
	EapolDestinatinoAddress *string                                `path:"eapol-destinatino-address" module:"srl_nokia-macsec"`
	Encrypt                 *bool                                  `path:"encrypt" module:"srl_nokia-macsec"`
	HelloInterval           *uint32                                `path:"hello-interval" module:"srl_nokia-macsec"`
	KeyServerPriority       *uint8                                 `path:"key-server-priority" module:"srl_nokia-macsec"`
	MacsecCipherSuite       []E_SrlNokiaMacsec_MacsecCipherSuite   `path:"macsec-cipher-suite" module:"srl_nokia-macsec"`
	MaxPeers                *int32                                 `path:"max-peers" module:"srl_nokia-macsec"`
	Name                    *string                                `path:"name" module:"srl_nokia-macsec"`
	SakRekeyOnLivePeerLoss  *bool                                  `path:"sak-rekey-on-live-peer-loss" module:"srl_nokia-macsec"`
}

// IsYANGGoStruct ensures that SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) IsYANGGoStruct() {}

// GetClearTagMode retrieves the value of the leaf ClearTagMode from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearTagMode is set, it can
// safely use t.GetClearTagMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearTagMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetClearTagMode() E_SrlNokiaMacsec_TagMode {
	if t == nil || t.ClearTagMode == 0 {
		return SrlNokiaMacsec_TagMode_no_tag
	}
	return t.ClearTagMode
}

// GetConfidentialityOffset retrieves the value of the leaf ConfidentialityOffset from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfidentialityOffset is set, it can
// safely use t.GetConfidentialityOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfidentialityOffset == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetConfidentialityOffset() E_SrlNokiaMacsec_ConfidentialityOffset {
	if t == nil || t.ConfidentialityOffset == 0 {
		return SrlNokiaMacsec_ConfidentialityOffset_0_BYTES
	}
	return t.ConfidentialityOffset
}

// GetDelayProtection retrieves the value of the leaf DelayProtection from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayProtection is set, it can
// safely use t.GetDelayProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayProtection == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetDelayProtection() bool {
	if t == nil || t.DelayProtection == nil {
		return false
	}
	return *t.DelayProtection
}

// GetEapolDestinatinoAddress retrieves the value of the leaf EapolDestinatinoAddress from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EapolDestinatinoAddress is set, it can
// safely use t.GetEapolDestinatinoAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EapolDestinatinoAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetEapolDestinatinoAddress() string {
	if t == nil || t.EapolDestinatinoAddress == nil {
		return ""
	}
	return *t.EapolDestinatinoAddress
}

// GetEncrypt retrieves the value of the leaf Encrypt from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encrypt is set, it can
// safely use t.GetEncrypt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encrypt == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetEncrypt() bool {
	if t == nil || t.Encrypt == nil {
		return true
	}
	return *t.Encrypt
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 2
	}
	return *t.HelloInterval
}

// GetKeyServerPriority retrieves the value of the leaf KeyServerPriority from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyServerPriority is set, it can
// safely use t.GetKeyServerPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyServerPriority == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetKeyServerPriority() uint8 {
	if t == nil || t.KeyServerPriority == nil {
		return 16
	}
	return *t.KeyServerPriority
}

// GetMacsecCipherSuite retrieves the value of the leaf MacsecCipherSuite from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacsecCipherSuite is set, it can
// safely use t.GetMacsecCipherSuite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacsecCipherSuite == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetMacsecCipherSuite() []E_SrlNokiaMacsec_MacsecCipherSuite {
	if t == nil || t.MacsecCipherSuite == nil {
		return nil
	}
	return t.MacsecCipherSuite
}

// GetMaxPeers retrieves the value of the leaf MaxPeers from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPeers is set, it can
// safely use t.GetMaxPeers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPeers == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetMaxPeers() int32 {
	if t == nil || t.MaxPeers == nil {
		return 0
	}
	return *t.MaxPeers
}

// GetName retrieves the value of the leaf Name from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSakRekeyOnLivePeerLoss retrieves the value of the leaf SakRekeyOnLivePeerLoss from the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SakRekeyOnLivePeerLoss is set, it can
// safely use t.GetSakRekeyOnLivePeerLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SakRekeyOnLivePeerLoss == nil' before retrieving the leaf's value.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) GetSakRekeyOnLivePeerLoss() bool {
	if t == nil || t.SakRekeyOnLivePeerLoss == nil {
		return false
	}
	return *t.SakRekeyOnLivePeerLoss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearTagMode == 0 {
		t.ClearTagMode = SrlNokiaMacsec_TagMode_no_tag
	}
	if t.ConfidentialityOffset == 0 {
		t.ConfidentialityOffset = SrlNokiaMacsec_ConfidentialityOffset_0_BYTES
	}
	if t.DelayProtection == nil {
		var v bool = false
		t.DelayProtection = &v
	}
	if t.Encrypt == nil {
		var v bool = true
		t.Encrypt = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 2
		t.HelloInterval = &v
	}
	if t.KeyServerPriority == nil {
		var v uint8 = 16
		t.KeyServerPriority = &v
	}
	if t.SakRekeyOnLivePeerLoss == nil {
		var v bool = false
		t.SakRekeyOnLivePeerLoss = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config.
func (*SrlNokiaMacsec_Macsec_Mka_Policies_Policy_Config) ΛBelongingModule() string {
	return "srl_nokia-macsec"
}

// SrlNokiaNetworkInstance_NetworkInstance represents the /srl_nokia-network-instance/network-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance struct {
	AdminState         E_SrlNokiaCommon_AdminState                                        `path:"admin-state" module:"srl_nokia-network-instance"`
	AggregateRoutes    *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes           `path:"aggregate-routes" module:"srl_nokia-aggregate-routes" yangPresence:"true"`
	BridgeTable        *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable               `path:"bridge-table" module:"srl_nokia-network-instance" yangPresence:"true"`
	Description        *string                                                            `path:"description" module:"srl_nokia-network-instance"`
	Interface          map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface      `path:"interface" module:"srl_nokia-network-instance"`
	IpForwarding       *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding              `path:"ip-forwarding" module:"srl_nokia-network-instance" yangPresence:"true"`
	IpLoadBalancing    *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing           `path:"ip-load-balancing" module:"srl_nokia-network-instance"`
	Mpls               *SrlNokiaNetworkInstance_NetworkInstance_Mpls                      `path:"mpls" module:"srl_nokia-mpls" yangPresence:"true"`
	MplsForwarding     *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding            `path:"mpls-forwarding" module:"srl_nokia-network-instance"`
	Mtu                *SrlNokiaNetworkInstance_NetworkInstance_Mtu                       `path:"mtu" module:"srl_nokia-network-instance-mtu" yangPresence:"true"`
	Name               *string                                                            `path:"name" module:"srl_nokia-network-instance"`
	NextHopGroups      *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups             `path:"next-hop-groups" module:"srl_nokia-next-hop-groups" yangPresence:"true"`
	PolicyForwarding   *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding          `path:"policy-forwarding" module:"srl_nokia-policy-forwarding" yangPresence:"true"`
	Protocols          *SrlNokiaNetworkInstance_NetworkInstance_Protocols                 `path:"protocols" module:"srl_nokia-network-instance"`
	RouterId           *string                                                            `path:"router-id" module:"srl_nokia-network-instance"`
	SegmentRouting     *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting            `path:"segment-routing" module:"srl_nokia-segment-routing"`
	StaticRoutes       *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes              `path:"static-routes" module:"srl_nokia-static-routes" yangPresence:"true"`
	TrafficEngineering *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering        `path:"traffic-engineering" module:"srl_nokia-traffic-engineering" yangPresence:"true"`
	Type               E_SrlNokiaNetworkInstance_NiType                                   `path:"type" module:"srl_nokia-network-instance"`
	VxlanInterface     map[string]*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface `path:"vxlan-interface" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance) NewInterface(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateInterface(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Interface {
	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetInterface(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Interface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Interface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVxlanInterface creates a new entry in the VxlanInterface list of the
// SrlNokiaNetworkInstance_NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance) NewVxlanInterface(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VxlanInterface == nil {
		t.VxlanInterface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VxlanInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VxlanInterface", key)
	}

	t.VxlanInterface[key] = &SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface{
		Name: &Name,
	}

	return t.VxlanInterface[key], nil
}

// RenameVxlanInterface renames an entry in the list VxlanInterface within
// the SrlNokiaNetworkInstance_NetworkInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) RenameVxlanInterface(oldK, newK string) error {
	if _, ok := t.VxlanInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VxlanInterface", newK)
	}

	e, ok := t.VxlanInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VxlanInterface", oldK)
	}
	e.Name = &newK

	t.VxlanInterface[newK] = e
	delete(t.VxlanInterface, oldK)
	return nil
}

// GetOrCreateVxlanInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateVxlanInterface(Name string) *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface {
	key := Name

	if v, ok := t.VxlanInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVxlanInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVxlanInterface got unexpected error: %v", err))
	}
	return v
}

// GetVxlanInterface retrieves the value with the specified key from
// the VxlanInterface map field of SrlNokiaNetworkInstance_NetworkInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetVxlanInterface(Name string) *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.VxlanInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVxlanInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance) DeleteVxlanInterface(Name string) {
	key := Name

	delete(t.VxlanInterface, key)
}

// AppendVxlanInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface struct to the
// list VxlanInterface of SrlNokiaNetworkInstance_NetworkInstance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance) AppendVxlanInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VxlanInterface == nil {
		t.VxlanInterface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface)
	}

	if _, ok := t.VxlanInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VxlanInterface %v", key)
	}

	t.VxlanInterface[key] = v
	return nil
}

// GetOrCreateAggregateRoutes retrieves the value of the AggregateRoutes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateAggregateRoutes() *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes {
	if t.AggregateRoutes != nil {
		return t.AggregateRoutes
	}
	t.AggregateRoutes = &SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes{}
	return t.AggregateRoutes
}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateIpForwarding retrieves the value of the IpForwarding field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateIpForwarding() *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding {
	if t.IpForwarding != nil {
		return t.IpForwarding
	}
	t.IpForwarding = &SrlNokiaNetworkInstance_NetworkInstance_IpForwarding{}
	return t.IpForwarding
}

// GetOrCreateIpLoadBalancing retrieves the value of the IpLoadBalancing field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateIpLoadBalancing() *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing {
	if t.IpLoadBalancing != nil {
		return t.IpLoadBalancing
	}
	t.IpLoadBalancing = &SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing{}
	return t.IpLoadBalancing
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Mpls{}
	return t.Mpls
}

// GetOrCreateMplsForwarding retrieves the value of the MplsForwarding field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateMplsForwarding() *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding {
	if t.MplsForwarding != nil {
		return t.MplsForwarding
	}
	t.MplsForwarding = &SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding{}
	return t.MplsForwarding
}

// GetOrCreateMtu retrieves the value of the Mtu field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateMtu() *SrlNokiaNetworkInstance_NetworkInstance_Mtu {
	if t.Mtu != nil {
		return t.Mtu
	}
	t.Mtu = &SrlNokiaNetworkInstance_NetworkInstance_Mtu{}
	return t.Mtu
}

// GetOrCreateNextHopGroups retrieves the value of the NextHopGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateNextHopGroups() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups {
	if t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	t.NextHopGroups = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups{}
	return t.NextHopGroups
}

// GetOrCreatePolicyForwarding retrieves the value of the PolicyForwarding field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreatePolicyForwarding() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding {
	if t.PolicyForwarding != nil {
		return t.PolicyForwarding
	}
	t.PolicyForwarding = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding{}
	return t.PolicyForwarding
}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateProtocols() *SrlNokiaNetworkInstance_NetworkInstance_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &SrlNokiaNetworkInstance_NetworkInstance_Protocols{}
	return t.Protocols
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateStaticRoutes retrieves the value of the StaticRoutes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateStaticRoutes() *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes {
	if t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	t.StaticRoutes = &SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes{}
	return t.StaticRoutes
}

// GetOrCreateTrafficEngineering retrieves the value of the TrafficEngineering field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetOrCreateTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering {
	if t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	t.TrafficEngineering = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering{}
	return t.TrafficEngineering
}

// GetAggregateRoutes returns the value of the AggregateRoutes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field AggregateRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetAggregateRoutes() *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes {
	if t != nil && t.AggregateRoutes != nil {
		return t.AggregateRoutes
	}
	return nil
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetIpForwarding returns the value of the IpForwarding struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field IpForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetIpForwarding() *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding {
	if t != nil && t.IpForwarding != nil {
		return t.IpForwarding
	}
	return nil
}

// GetIpLoadBalancing returns the value of the IpLoadBalancing struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field IpLoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetIpLoadBalancing() *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing {
	if t != nil && t.IpLoadBalancing != nil {
		return t.IpLoadBalancing
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetMplsForwarding returns the value of the MplsForwarding struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field MplsForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetMplsForwarding() *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding {
	if t != nil && t.MplsForwarding != nil {
		return t.MplsForwarding
	}
	return nil
}

// GetMtu returns the value of the Mtu struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field Mtu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetMtu() *SrlNokiaNetworkInstance_NetworkInstance_Mtu {
	if t != nil && t.Mtu != nil {
		return t.Mtu
	}
	return nil
}

// GetNextHopGroups returns the value of the NextHopGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field NextHopGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetNextHopGroups() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups {
	if t != nil && t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	return nil
}

// GetPolicyForwarding returns the value of the PolicyForwarding struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field PolicyForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetPolicyForwarding() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding {
	if t != nil && t.PolicyForwarding != nil {
		return t.PolicyForwarding
	}
	return nil
}

// GetProtocols returns the value of the Protocols struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetProtocols() *SrlNokiaNetworkInstance_NetworkInstance_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetStaticRoutes returns the value of the StaticRoutes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field StaticRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetStaticRoutes() *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes {
	if t != nil && t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	return nil
}

// GetTrafficEngineering returns the value of the TrafficEngineering struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance. If the receiver or the field TrafficEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering {
	if t != nil && t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance) GetType() E_SrlNokiaNetworkInstance_NiType {
	if t == nil || t.Type == 0 {
		return SrlNokiaNetworkInstance_NiType_default
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Type == 0 {
		t.Type = SrlNokiaNetworkInstance_NiType_default
	}
	t.AggregateRoutes.PopulateDefaults()
	t.BridgeTable.PopulateDefaults()
	t.IpForwarding.PopulateDefaults()
	t.IpLoadBalancing.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.MplsForwarding.PopulateDefaults()
	t.Mtu.PopulateDefaults()
	t.NextHopGroups.PopulateDefaults()
	t.PolicyForwarding.PopulateDefaults()
	t.Protocols.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.StaticRoutes.PopulateDefaults()
	t.TrafficEngineering.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.VxlanInterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes represents the /srl_nokia-network-instance/network-instance/aggregate-routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes struct {
	Route map[string]*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route `path:"route" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) IsYANGGoStruct() {}

// NewRoute creates a new entry in the Route list of the
// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) NewRoute(Prefix string) (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route{
		Prefix: &Prefix,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) RenameRoute(oldK, newK string) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) GetOrCreateRoute(Prefix string) *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route {
	key := Prefix

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) GetRoute(Prefix string) *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) DeleteRoute(Prefix string) {
	key := Prefix

	delete(t.Route, key)
}

// AppendRoute appends the supplied SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route struct to the
// list Route of SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) AppendRoute(
	v *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) ΛBelongingModule() string {
	return "srl_nokia-aggregate-routes"
}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route represents the /srl_nokia-network-instance/network-instance/aggregate-routes/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route struct {
	AdminState   E_SrlNokiaCommon_AdminState                                                `path:"admin-state" module:"srl_nokia-aggregate-routes"`
	Aggregator   *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator  `path:"aggregator" module:"srl_nokia-aggregate-routes"`
	Communities  *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities `path:"communities" module:"srl_nokia-aggregate-routes"`
	GenerateIcmp *bool                                                                      `path:"generate-icmp" module:"srl_nokia-aggregate-routes"`
	Prefix       *string                                                                    `path:"prefix" module:"srl_nokia-aggregate-routes"`
	SummaryOnly  *bool                                                                      `path:"summary-only" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) IsYANGGoStruct() {}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetOrCreateAggregator() *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator{}
	return t.Aggregator
}

// GetOrCreateCommunities retrieves the value of the Communities field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetOrCreateCommunities() *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities {
	if t.Communities != nil {
		return t.Communities
	}
	t.Communities = &SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities{}
	return t.Communities
}

// GetAggregator returns the value of the Aggregator struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetAggregator() *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetCommunities returns the value of the Communities struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route. If the receiver or the field Communities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetCommunities() *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities {
	if t != nil && t.Communities != nil {
		return t.Communities
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSummaryOnly retrieves the value of the leaf SummaryOnly from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummaryOnly is set, it can
// safely use t.GetSummaryOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummaryOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) GetSummaryOnly() bool {
	if t == nil || t.SummaryOnly == nil {
		return false
	}
	return *t.SummaryOnly
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.SummaryOnly == nil {
		var v bool = false
		t.SummaryOnly = &v
	}
	t.Aggregator.PopulateDefaults()
	t.Communities.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) ΛBelongingModule() string {
	return "srl_nokia-aggregate-routes"
}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator represents the /srl_nokia-network-instance/network-instance/aggregate-routes/route/aggregator YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator struct {
	Address  *string `path:"address" module:"srl_nokia-aggregate-routes"`
	AsNumber *uint32 `path:"as-number" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) ΛBelongingModule() string {
	return "srl_nokia-aggregate-routes"
}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities represents the /srl_nokia-network-instance/network-instance/aggregate-routes/route/communities YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities struct {
	Add []SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union `path:"add" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) GetAdd() []SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) ΛBelongingModule() string {
	return "srl_nokia-aggregate-routes"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable represents the /srl_nokia-network-instance/network-instance/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable struct {
	DiscardUnknownDestMac *bool                                                               `path:"discard-unknown-dest-mac" module:"srl_nokia-network-instance"`
	MacDuplication        *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication `path:"mac-duplication" module:"srl_nokia-network-instance"`
	MacLearning           *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning    `path:"mac-learning" module:"srl_nokia-network-instance"`
	MacLimit              *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit       `path:"mac-limit" module:"srl_nokia-network-instance"`
	ProtectAnycastGwMac   *bool                                                               `path:"protect-anycast-gw-mac" module:"srl_nokia-network-instance"`
	ProxyArp              *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp       `path:"proxy-arp" module:"srl_nokia-bridge-table-proxy-arp-nd" yangPresence:"true"`
	ProxyNd               *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd        `path:"proxy-nd" module:"srl_nokia-bridge-table-proxy-arp-nd" yangPresence:"true"`
	StaticMac             *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac      `path:"static-mac" module:"srl_nokia-bridge-table-static-mac"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) IsYANGGoStruct() {}

// GetOrCreateMacDuplication retrieves the value of the MacDuplication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetOrCreateMacDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication {
	if t.MacDuplication != nil {
		return t.MacDuplication
	}
	t.MacDuplication = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication{}
	return t.MacDuplication
}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetOrCreateMacLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning{}
	return t.MacLearning
}

// GetOrCreateMacLimit retrieves the value of the MacLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetOrCreateMacLimit() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit {
	if t.MacLimit != nil {
		return t.MacLimit
	}
	t.MacLimit = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit{}
	return t.MacLimit
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetOrCreateProxyArp() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateProxyNd retrieves the value of the ProxyNd field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetOrCreateProxyNd() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd {
	if t.ProxyNd != nil {
		return t.ProxyNd
	}
	t.ProxyNd = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd{}
	return t.ProxyNd
}

// GetOrCreateStaticMac retrieves the value of the StaticMac field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetOrCreateStaticMac() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac {
	if t.StaticMac != nil {
		return t.StaticMac
	}
	t.StaticMac = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac{}
	return t.StaticMac
}

// GetMacDuplication returns the value of the MacDuplication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable. If the receiver or the field MacDuplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetMacDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication {
	if t != nil && t.MacDuplication != nil {
		return t.MacDuplication
	}
	return nil
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetMacLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetMacLimit returns the value of the MacLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable. If the receiver or the field MacLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetMacLimit() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit {
	if t != nil && t.MacLimit != nil {
		return t.MacLimit
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetProxyArp() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetProxyNd returns the value of the ProxyNd struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable. If the receiver or the field ProxyNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetProxyNd() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd {
	if t != nil && t.ProxyNd != nil {
		return t.ProxyNd
	}
	return nil
}

// GetStaticMac returns the value of the StaticMac struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable. If the receiver or the field StaticMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetStaticMac() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac {
	if t != nil && t.StaticMac != nil {
		return t.StaticMac
	}
	return nil
}

// GetDiscardUnknownDestMac retrieves the value of the leaf DiscardUnknownDestMac from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknownDestMac is set, it can
// safely use t.GetDiscardUnknownDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknownDestMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetDiscardUnknownDestMac() bool {
	if t == nil || t.DiscardUnknownDestMac == nil {
		return false
	}
	return *t.DiscardUnknownDestMac
}

// GetProtectAnycastGwMac retrieves the value of the leaf ProtectAnycastGwMac from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectAnycastGwMac is set, it can
// safely use t.GetProtectAnycastGwMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectAnycastGwMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) GetProtectAnycastGwMac() bool {
	if t == nil || t.ProtectAnycastGwMac == nil {
		return false
	}
	return *t.ProtectAnycastGwMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardUnknownDestMac == nil {
		var v bool = false
		t.DiscardUnknownDestMac = &v
	}
	if t.ProtectAnycastGwMac == nil {
		var v bool = false
		t.ProtectAnycastGwMac = &v
	}
	t.MacDuplication.PopulateDefaults()
	t.MacLearning.PopulateDefaults()
	t.MacLimit.PopulateDefaults()
	t.ProxyArp.PopulateDefaults()
	t.ProxyNd.PopulateDefaults()
	t.StaticMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-duplication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication struct {
	Action           E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action           `path:"action" module:"srl_nokia-network-instance"`
	AdminState       E_SrlNokiaCommon_AdminState                                                           `path:"admin-state" module:"srl_nokia-network-instance"`
	HoldDownTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union `path:"hold-down-time" module:"srl_nokia-network-instance"`
	MonitoringWindow *uint32                                                                               `path:"monitoring-window" module:"srl_nokia-network-instance"`
	NumMoves         *uint32                                                                               `path:"num-moves" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) GetAction() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action {
	if t == nil || t.Action == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_stop_learning
	}
	return t.Action
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) GetHoldDownTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetMonitoringWindow retrieves the value of the leaf MonitoringWindow from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitoringWindow is set, it can
// safely use t.GetMonitoringWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitoringWindow == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) GetMonitoringWindow() uint32 {
	if t == nil || t.MonitoringWindow == nil {
		return 3
	}
	return *t.MonitoringWindow
}

// GetNumMoves retrieves the value of the leaf NumMoves from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_stop_learning
	}
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.MonitoringWindow == nil {
		var v uint32 = 3
		t.MonitoringWindow = &v
	}
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-learning YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning struct {
	AdminState E_SrlNokiaCommon_AdminState                                            `path:"admin-state" module:"srl_nokia-network-instance"`
	Aging      *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging `path:"aging" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) IsYANGGoStruct() {}

// GetOrCreateAging retrieves the value of the Aging field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) GetOrCreateAging() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging {
	if t.Aging != nil {
		return t.Aging
	}
	t.Aging = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging{}
	return t.Aging
}

// GetAging returns the value of the Aging struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning. If the receiver or the field Aging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) GetAging() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging {
	if t != nil && t.Aging != nil {
		return t.Aging
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.Aging.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-learning/aging YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-network-instance"`
	AgeTime    *int32                      `path:"age-time" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) GetAgeTime() int32 {
	if t == nil || t.AgeTime == nil {
		return 300
	}
	return *t.AgeTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.AgeTime == nil {
		var v int32 = 300
		t.AgeTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit struct {
	MaximumEntries      *int32 `path:"maximum-entries" module:"srl_nokia-network-instance"`
	WarningThresholdPct *int32 `path:"warning-threshold-pct" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) IsYANGGoStruct() {}

// GetMaximumEntries retrieves the value of the leaf MaximumEntries from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumEntries is set, it can
// safely use t.GetMaximumEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumEntries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) GetMaximumEntries() int32 {
	if t == nil || t.MaximumEntries == nil {
		return 250
	}
	return *t.MaximumEntries
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) GetWarningThresholdPct() int32 {
	if t == nil || t.WarningThresholdPct == nil {
		return 95
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaximumEntries == nil {
		var v int32 = 250
		t.MaximumEntries = &v
	}
	if t.WarningThresholdPct == nil {
		var v int32 = 95
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp struct {
	AdminState       E_SrlNokiaCommon_AdminState                                                   `path:"admin-state" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	DynamicLearning  *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning `path:"dynamic-learning" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Evpn             *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn            `path:"evpn" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	IpDuplication    *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication   `path:"ip-duplication" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	ProcessArpProbes *bool                                                                         `path:"process-arp-probes" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticEntries    *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries   `path:"static-entries" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	TableSize        *uint32                                                                       `path:"table-size" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	TraceOptions     *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions    `path:"trace-options" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) IsYANGGoStruct() {}

// GetOrCreateDynamicLearning retrieves the value of the DynamicLearning field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetOrCreateDynamicLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning {
	if t.DynamicLearning != nil {
		return t.DynamicLearning
	}
	t.DynamicLearning = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning{}
	return t.DynamicLearning
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn{}
	return t.Evpn
}

// GetOrCreateIpDuplication retrieves the value of the IpDuplication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetOrCreateIpDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication {
	if t.IpDuplication != nil {
		return t.IpDuplication
	}
	t.IpDuplication = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication{}
	return t.IpDuplication
}

// GetOrCreateStaticEntries retrieves the value of the StaticEntries field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetOrCreateStaticEntries() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries {
	if t.StaticEntries != nil {
		return t.StaticEntries
	}
	t.StaticEntries = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries{}
	return t.StaticEntries
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions{}
	return t.TraceOptions
}

// GetDynamicLearning returns the value of the DynamicLearning struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp. If the receiver or the field DynamicLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetDynamicLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning {
	if t != nil && t.DynamicLearning != nil {
		return t.DynamicLearning
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpDuplication returns the value of the IpDuplication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp. If the receiver or the field IpDuplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetIpDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication {
	if t != nil && t.IpDuplication != nil {
		return t.IpDuplication
	}
	return nil
}

// GetStaticEntries returns the value of the StaticEntries struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp. If the receiver or the field StaticEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetStaticEntries() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries {
	if t != nil && t.StaticEntries != nil {
		return t.StaticEntries
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetProcessArpProbes retrieves the value of the leaf ProcessArpProbes from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProcessArpProbes is set, it can
// safely use t.GetProcessArpProbes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProcessArpProbes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetProcessArpProbes() bool {
	if t == nil || t.ProcessArpProbes == nil {
		return true
	}
	return *t.ProcessArpProbes
}

// GetTableSize retrieves the value of the leaf TableSize from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) GetTableSize() uint32 {
	if t == nil || t.TableSize == nil {
		return 250
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.ProcessArpProbes == nil {
		var v bool = true
		t.ProcessArpProbes = &v
	}
	if t.TableSize == nil {
		var v uint32 = 250
		t.TableSize = &v
	}
	t.DynamicLearning.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.IpDuplication.PopulateDefaults()
	t.StaticEntries.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/dynamic-learning YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning struct {
	AdminState  E_SrlNokiaCommon_AdminState                                                                    `path:"admin-state" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	AgeTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union     `path:"age-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	SendRefresh SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union `path:"send-refresh" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) GetAgeTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union {
	if t == nil || t.AgeTime == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum_never
	}
	return t.AgeTime
}

// GetSendRefresh retrieves the value of the leaf SendRefresh from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRefresh is set, it can
// safely use t.GetSendRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRefresh == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) GetSendRefresh() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union {
	if t == nil || t.SendRefresh == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum_never
	}
	return t.SendRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.AgeTime == nil {
		t.AgeTime = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum_never
	}
	if t.SendRefresh == nil {
		t.SendRefresh = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn struct {
	AdminTag *uint32                                                                  `path:"admin-tag" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Flood    *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood `path:"flood" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) IsYANGGoStruct() {}

// GetOrCreateFlood retrieves the value of the Flood field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetOrCreateFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood {
	if t.Flood != nil {
		return t.Flood
	}
	t.Flood = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood{}
	return t.Flood
}

// GetFlood returns the value of the Flood struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn. If the receiver or the field Flood is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood {
	if t != nil && t.Flood != nil {
		return t.Flood
	}
	return nil
}

// GetAdminTag retrieves the value of the leaf AdminTag from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTag is set, it can
// safely use t.GetAdminTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetAdminTag() uint32 {
	if t == nil || t.AdminTag == nil {
		return 0
	}
	return *t.AdminTag
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminTag == nil {
		var v uint32 = 0
		t.AdminTag = &v
	}
	t.Flood.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/evpn/flood YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood struct {
	GratuitousArp *bool `path:"gratuitous-arp" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	UnknownArpReq *bool `path:"unknown-arp-req" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) IsYANGGoStruct() {}

// GetGratuitousArp retrieves the value of the leaf GratuitousArp from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousArp is set, it can
// safely use t.GetGratuitousArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousArp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) GetGratuitousArp() bool {
	if t == nil || t.GratuitousArp == nil {
		return true
	}
	return *t.GratuitousArp
}

// GetUnknownArpReq retrieves the value of the leaf UnknownArpReq from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownArpReq is set, it can
// safely use t.GetUnknownArpReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownArpReq == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) GetUnknownArpReq() bool {
	if t == nil || t.UnknownArpReq == nil {
		return true
	}
	return *t.UnknownArpReq
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GratuitousArp == nil {
		var v bool = true
		t.GratuitousArp = &v
	}
	if t.UnknownArpReq == nil {
		var v bool = true
		t.UnknownArpReq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/ip-duplication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication struct {
	AntiSpoofMac     *string                                                                                       `path:"anti-spoof-mac" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	HoldDownTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union `path:"hold-down-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	MonitoringWindow *uint32                                                                                       `path:"monitoring-window" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	NumMoves         *uint32                                                                                       `path:"num-moves" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticBlackhole  *bool                                                                                         `path:"static-blackhole" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetHoldDownTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetMonitoringWindow retrieves the value of the leaf MonitoringWindow from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitoringWindow is set, it can
// safely use t.GetMonitoringWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitoringWindow == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetMonitoringWindow() uint32 {
	if t == nil || t.MonitoringWindow == nil {
		return 3
	}
	return *t.MonitoringWindow
}

// GetNumMoves retrieves the value of the leaf NumMoves from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.MonitoringWindow == nil {
		var v uint32 = 3
		t.MonitoringWindow = &v
	}
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/static-entries YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries struct {
	Neighbor map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor `path:"neighbor" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) NewNeighbor(
	Ipv4Address string,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) GetOrCreateNeighbor(
	Ipv4Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor {
	key := Ipv4Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) GetNeighbor(
	Ipv4Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor {
	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) DeleteNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor struct to the
// list Neighbor of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) AppendNeighbor(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor,
) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/static-entries/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor struct {
	Ipv4Address      *string `path:"ipv4-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	LinkLayerAddress *string `path:"link-layer-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag `path:"flag" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd struct {
	AdminState                      E_SrlNokiaCommon_AdminState                                                  `path:"admin-state" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	DynamicLearning                 *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning `path:"dynamic-learning" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Evpn                            *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn            `path:"evpn" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	IpDuplication                   *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication   `path:"ip-duplication" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	ProcessDadNeighborSolicitations *bool                                                                        `path:"process-dad-neighbor-solicitations" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticEntries                   *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries   `path:"static-entries" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	TableSize                       *uint32                                                                      `path:"table-size" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	TraceOptions                    *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions    `path:"trace-options" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) IsYANGGoStruct() {}

// GetOrCreateDynamicLearning retrieves the value of the DynamicLearning field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateDynamicLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning {
	if t.DynamicLearning != nil {
		return t.DynamicLearning
	}
	t.DynamicLearning = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning{}
	return t.DynamicLearning
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn{}
	return t.Evpn
}

// GetOrCreateIpDuplication retrieves the value of the IpDuplication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateIpDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication {
	if t.IpDuplication != nil {
		return t.IpDuplication
	}
	t.IpDuplication = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication{}
	return t.IpDuplication
}

// GetOrCreateStaticEntries retrieves the value of the StaticEntries field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateStaticEntries() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries {
	if t.StaticEntries != nil {
		return t.StaticEntries
	}
	t.StaticEntries = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries{}
	return t.StaticEntries
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions{}
	return t.TraceOptions
}

// GetDynamicLearning returns the value of the DynamicLearning struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field DynamicLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetDynamicLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning {
	if t != nil && t.DynamicLearning != nil {
		return t.DynamicLearning
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpDuplication returns the value of the IpDuplication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field IpDuplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetIpDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication {
	if t != nil && t.IpDuplication != nil {
		return t.IpDuplication
	}
	return nil
}

// GetStaticEntries returns the value of the StaticEntries struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field StaticEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetStaticEntries() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries {
	if t != nil && t.StaticEntries != nil {
		return t.StaticEntries
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetProcessDadNeighborSolicitations retrieves the value of the leaf ProcessDadNeighborSolicitations from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProcessDadNeighborSolicitations is set, it can
// safely use t.GetProcessDadNeighborSolicitations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProcessDadNeighborSolicitations == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetProcessDadNeighborSolicitations() bool {
	if t == nil || t.ProcessDadNeighborSolicitations == nil {
		return true
	}
	return *t.ProcessDadNeighborSolicitations
}

// GetTableSize retrieves the value of the leaf TableSize from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetTableSize() uint32 {
	if t == nil || t.TableSize == nil {
		return 250
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.ProcessDadNeighborSolicitations == nil {
		var v bool = true
		t.ProcessDadNeighborSolicitations = &v
	}
	if t.TableSize == nil {
		var v uint32 = 250
		t.TableSize = &v
	}
	t.DynamicLearning.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.IpDuplication.PopulateDefaults()
	t.StaticEntries.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/dynamic-learning YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning struct {
	AdminState  E_SrlNokiaCommon_AdminState                                                                   `path:"admin-state" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	AgeTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union     `path:"age-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	SendRefresh SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union `path:"send-refresh" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) GetAgeTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union {
	if t == nil || t.AgeTime == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum_never
	}
	return t.AgeTime
}

// GetSendRefresh retrieves the value of the leaf SendRefresh from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRefresh is set, it can
// safely use t.GetSendRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRefresh == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) GetSendRefresh() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union {
	if t == nil || t.SendRefresh == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum_never
	}
	return t.SendRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.AgeTime == nil {
		t.AgeTime = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum_never
	}
	if t.SendRefresh == nil {
		t.SendRefresh = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn struct {
	AdminTag              *uint32                                                                                  `path:"admin-tag" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	AdvertiseNeighborType E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType `path:"advertise-neighbor-type" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Flood                 *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood                  `path:"flood" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) IsYANGGoStruct() {}

// GetOrCreateFlood retrieves the value of the Flood field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetOrCreateFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood {
	if t.Flood != nil {
		return t.Flood
	}
	t.Flood = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood{}
	return t.Flood
}

// GetFlood returns the value of the Flood struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn. If the receiver or the field Flood is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood {
	if t != nil && t.Flood != nil {
		return t.Flood
	}
	return nil
}

// GetAdminTag retrieves the value of the leaf AdminTag from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTag is set, it can
// safely use t.GetAdminTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetAdminTag() uint32 {
	if t == nil || t.AdminTag == nil {
		return 0
	}
	return *t.AdminTag
}

// GetAdvertiseNeighborType retrieves the value of the leaf AdvertiseNeighborType from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseNeighborType is set, it can
// safely use t.GetAdvertiseNeighborType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseNeighborType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetAdvertiseNeighborType() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType {
	if t == nil || t.AdvertiseNeighborType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType_router
	}
	return t.AdvertiseNeighborType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminTag == nil {
		var v uint32 = 0
		t.AdminTag = &v
	}
	if t.AdvertiseNeighborType == 0 {
		t.AdvertiseNeighborType = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType_router
	}
	t.Flood.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/evpn/flood YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood struct {
	UnknownNeighborAdvertiseHost   *bool `path:"unknown-neighbor-advertise-host" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	UnknownNeighborAdvertiseRouter *bool `path:"unknown-neighbor-advertise-router" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	UnknownNeighborSolicitation    *bool `path:"unknown-neighbor-solicitation" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) IsYANGGoStruct() {}

// GetUnknownNeighborAdvertiseHost retrieves the value of the leaf UnknownNeighborAdvertiseHost from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborAdvertiseHost is set, it can
// safely use t.GetUnknownNeighborAdvertiseHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborAdvertiseHost == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) GetUnknownNeighborAdvertiseHost() bool {
	if t == nil || t.UnknownNeighborAdvertiseHost == nil {
		return true
	}
	return *t.UnknownNeighborAdvertiseHost
}

// GetUnknownNeighborAdvertiseRouter retrieves the value of the leaf UnknownNeighborAdvertiseRouter from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborAdvertiseRouter is set, it can
// safely use t.GetUnknownNeighborAdvertiseRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborAdvertiseRouter == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) GetUnknownNeighborAdvertiseRouter() bool {
	if t == nil || t.UnknownNeighborAdvertiseRouter == nil {
		return true
	}
	return *t.UnknownNeighborAdvertiseRouter
}

// GetUnknownNeighborSolicitation retrieves the value of the leaf UnknownNeighborSolicitation from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborSolicitation is set, it can
// safely use t.GetUnknownNeighborSolicitation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborSolicitation == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) GetUnknownNeighborSolicitation() bool {
	if t == nil || t.UnknownNeighborSolicitation == nil {
		return true
	}
	return *t.UnknownNeighborSolicitation
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UnknownNeighborAdvertiseHost == nil {
		var v bool = true
		t.UnknownNeighborAdvertiseHost = &v
	}
	if t.UnknownNeighborAdvertiseRouter == nil {
		var v bool = true
		t.UnknownNeighborAdvertiseRouter = &v
	}
	if t.UnknownNeighborSolicitation == nil {
		var v bool = true
		t.UnknownNeighborSolicitation = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/ip-duplication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication struct {
	AntiSpoofMac     *string                                                                                      `path:"anti-spoof-mac" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	HoldDownTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union `path:"hold-down-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	MonitoringWindow *uint32                                                                                      `path:"monitoring-window" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	NumMoves         *uint32                                                                                      `path:"num-moves" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticBlackhole  *bool                                                                                        `path:"static-blackhole" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetHoldDownTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetMonitoringWindow retrieves the value of the leaf MonitoringWindow from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitoringWindow is set, it can
// safely use t.GetMonitoringWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitoringWindow == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetMonitoringWindow() uint32 {
	if t == nil || t.MonitoringWindow == nil {
		return 3
	}
	return *t.MonitoringWindow
}

// GetNumMoves retrieves the value of the leaf NumMoves from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.MonitoringWindow == nil {
		var v uint32 = 3
		t.MonitoringWindow = &v
	}
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/static-entries YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries struct {
	Neighbor map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor `path:"neighbor" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) NewNeighbor(
	Ipv6Address string,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) GetOrCreateNeighbor(
	Ipv6Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor {
	key := Ipv6Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) GetNeighbor(
	Ipv6Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor {
	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) DeleteNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor struct to the
// list Neighbor of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) AppendNeighbor(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor,
) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/static-entries/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor struct {
	Ipv6Address      *string                                      `path:"ipv6-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	LinkLayerAddress *string                                      `path:"link-layer-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Type             E_SrlNokiaBridgeTableProxyArpNd_NeighborType `path:"type" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) IsYANGGoStruct() {
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) GetType() E_SrlNokiaBridgeTableProxyArpNd_NeighborType {
	if t == nil || t.Type == 0 {
		return SrlNokiaBridgeTableProxyArpNd_NeighborType_router
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = SrlNokiaBridgeTableProxyArpNd_NeighborType_router
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag `path:"flag" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac represents the /srl_nokia-network-instance/network-instance/bridge-table/static-mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac struct {
	Mac map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac `path:"mac" module:"srl_nokia-bridge-table-static-mac"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) NewMac(Address string) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac{
		Address: &Address,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Address = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) GetOrCreateMac(
	Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac {
	key := Address

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) GetMac(Address string) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac {
	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) DeleteMac(Address string) {
	key := Address

	delete(t.Mac, key)
}

// AppendMac appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac struct to the
// list Mac of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) AppendMac(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac,
) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-static-mac"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac represents the /srl_nokia-network-instance/network-instance/bridge-table/static-mac/mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac struct {
	Address     *string                                                                             `path:"address" module:"srl_nokia-bridge-table-static-mac"`
	Destination SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union `path:"destination" module:"srl_nokia-bridge-table-static-mac"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDestination retrieves the value of the leaf Destination from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) GetDestination() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union {
	if t == nil || t.Destination == nil {
		return nil
	}
	return t.Destination
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-static-mac"
}

// SrlNokiaNetworkInstance_NetworkInstance_Interface represents the /srl_nokia-network-instance/network-instance/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Interface struct {
	Name *string `path:"name" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpForwarding represents the /srl_nokia-network-instance/network-instance/ip-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpForwarding struct {
	LastResortLookup *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup `path:"last-resort-lookup" module:"srl_nokia-network-instance"`
	ReceiveIpv4Check *bool                                                                  `path:"receive-ipv4-check" module:"srl_nokia-network-instance"`
	ReceiveIpv6Check *bool                                                                  `path:"receive-ipv6-check" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) IsYANGGoStruct() {}

// GetOrCreateLastResortLookup retrieves the value of the LastResortLookup field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetOrCreateLastResortLookup() *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup {
	if t.LastResortLookup != nil {
		return t.LastResortLookup
	}
	t.LastResortLookup = &SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup{}
	return t.LastResortLookup
}

// GetLastResortLookup returns the value of the LastResortLookup struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_IpForwarding. If the receiver or the field LastResortLookup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetLastResortLookup() *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup {
	if t != nil && t.LastResortLookup != nil {
		return t.LastResortLookup
	}
	return nil
}

// GetReceiveIpv4Check retrieves the value of the leaf ReceiveIpv4Check from the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv4Check is set, it can
// safely use t.GetReceiveIpv4Check() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv4Check == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetReceiveIpv4Check() bool {
	if t == nil || t.ReceiveIpv4Check == nil {
		return false
	}
	return *t.ReceiveIpv4Check
}

// GetReceiveIpv6Check retrieves the value of the leaf ReceiveIpv6Check from the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6Check is set, it can
// safely use t.GetReceiveIpv6Check() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6Check == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetReceiveIpv6Check() bool {
	if t == nil || t.ReceiveIpv6Check == nil {
		return false
	}
	return *t.ReceiveIpv6Check
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LastResortLookup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup represents the /srl_nokia-network-instance/network-instance/ip-forwarding/last-resort-lookup YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup struct {
	NetworkInstance *string `path:"network-instance" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) IsYANGGoStruct() {}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing represents the /srl_nokia-network-instance/network-instance/ip-load-balancing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct {
	ResilientHashPrefix map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix `path:"resilient-hash-prefix" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) IsYANGGoStruct() {}

// NewResilientHashPrefix creates a new entry in the ResilientHashPrefix list of the
// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) NewResilientHashPrefix(
	IpPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResilientHashPrefix == nil {
		t.ResilientHashPrefix = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ResilientHashPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ResilientHashPrefix", key)
	}

	t.ResilientHashPrefix[key] = &SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.ResilientHashPrefix[key], nil
}

// RenameResilientHashPrefix renames an entry in the list ResilientHashPrefix within
// the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) RenameResilientHashPrefix(oldK, newK string) error {
	if _, ok := t.ResilientHashPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ResilientHashPrefix", newK)
	}

	e, ok := t.ResilientHashPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ResilientHashPrefix", oldK)
	}
	e.IpPrefix = &newK

	t.ResilientHashPrefix[newK] = e
	delete(t.ResilientHashPrefix, oldK)
	return nil
}

// GetOrCreateResilientHashPrefix retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) GetOrCreateResilientHashPrefix(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix {
	key := IpPrefix

	if v, ok := t.ResilientHashPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResilientHashPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResilientHashPrefix got unexpected error: %v", err))
	}
	return v
}

// GetResilientHashPrefix retrieves the value with the specified key from
// the ResilientHashPrefix map field of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) GetResilientHashPrefix(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix {
	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.ResilientHashPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteResilientHashPrefix deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) DeleteResilientHashPrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.ResilientHashPrefix, key)
}

// AppendResilientHashPrefix appends the supplied SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct to the
// list ResilientHashPrefix of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) AppendResilientHashPrefix(
	v *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResilientHashPrefix == nil {
		t.ResilientHashPrefix = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix)
	}

	if _, ok := t.ResilientHashPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ResilientHashPrefix %v", key)
	}

	t.ResilientHashPrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ResilientHashPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix represents the /srl_nokia-network-instance/network-instance/ip-load-balancing/resilient-hash-prefix YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct {
	HashBucketsPerPath *uint8  `path:"hash-buckets-per-path" module:"srl_nokia-network-instance"`
	IpPrefix           *string `path:"ip-prefix" module:"srl_nokia-network-instance"`
	MaxPaths           *uint8  `path:"max-paths" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) IsYANGGoStruct() {
}

// GetHashBucketsPerPath retrieves the value of the leaf HashBucketsPerPath from the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashBucketsPerPath is set, it can
// safely use t.GetHashBucketsPerPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashBucketsPerPath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) GetHashBucketsPerPath() uint8 {
	if t == nil || t.HashBucketsPerPath == nil {
		return 1
	}
	return *t.HashBucketsPerPath
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) GetMaxPaths() uint8 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashBucketsPerPath == nil {
		var v uint8 = 1
		t.HashBucketsPerPath = &v
	}
	if t.MaxPaths == nil {
		var v uint8 = 1
		t.MaxPaths = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls represents the /srl_nokia-network-instance/network-instance/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls struct {
	IcmpTunneling    *bool                                                                                                                      `path:"icmp-tunneling" module:"srl_nokia-mpls"`
	NdkLabelBlock    map[string]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock                                                     `path:"ndk-label-block" module:"srl_nokia-mpls"`
	StaticEntry      map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry `path:"static-entry" module:"srl_nokia-mpls"`
	StaticLabelBlock *string                                                                                                                    `path:"static-label-block" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key represents the key for list StaticEntry of element /srl_nokia-network-instance/network-instance/mpls.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key struct {
	TopLabel   uint32 `path:"top-label"`
	Preference uint8  `path:"preference"`
}

// NewNdkLabelBlock creates a new entry in the NdkLabelBlock list of the
// SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) NewNdkLabelBlock(ApplicationName string) (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NdkLabelBlock == nil {
		t.NdkLabelBlock = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NdkLabelBlock[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NdkLabelBlock", key)
	}

	t.NdkLabelBlock[key] = &SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock{
		ApplicationName: &ApplicationName,
	}

	return t.NdkLabelBlock[key], nil
}

// RenameNdkLabelBlock renames an entry in the list NdkLabelBlock within
// the SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) RenameNdkLabelBlock(oldK, newK string) error {
	if _, ok := t.NdkLabelBlock[newK]; ok {
		return fmt.Errorf("key %v already exists in NdkLabelBlock", newK)
	}

	e, ok := t.NdkLabelBlock[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NdkLabelBlock", oldK)
	}
	e.ApplicationName = &newK

	t.NdkLabelBlock[newK] = e
	delete(t.NdkLabelBlock, oldK)
	return nil
}

// GetOrCreateNdkLabelBlock retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetOrCreateNdkLabelBlock(
	ApplicationName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock {
	key := ApplicationName

	if v, ok := t.NdkLabelBlock[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNdkLabelBlock(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNdkLabelBlock got unexpected error: %v", err))
	}
	return v
}

// GetNdkLabelBlock retrieves the value with the specified key from
// the NdkLabelBlock map field of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetNdkLabelBlock(ApplicationName string) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock {
	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.NdkLabelBlock[key]; ok {
		return lm
	}
	return nil
}

// DeleteNdkLabelBlock deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) DeleteNdkLabelBlock(ApplicationName string) {
	key := ApplicationName

	delete(t.NdkLabelBlock, key)
}

// AppendNdkLabelBlock appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock struct to the
// list NdkLabelBlock of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) AppendNdkLabelBlock(
	v *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock,
) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NdkLabelBlock == nil {
		t.NdkLabelBlock = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock)
	}

	if _, ok := t.NdkLabelBlock[key]; ok {
		return fmt.Errorf("duplicate key for list NdkLabelBlock %v", key)
	}

	t.NdkLabelBlock[key] = v
	return nil
}

// NewStaticEntry creates a new entry in the StaticEntry list of the
// SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) NewStaticEntry(TopLabel uint32,
	Preference uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticEntry == nil {
		t.StaticEntry = make(map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticEntry", key)
	}

	t.StaticEntry[key] = &SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry{
		TopLabel:   &TopLabel,
		Preference: &Preference,
	}

	return t.StaticEntry[key], nil
}

// RenameStaticEntry renames an entry in the list StaticEntry within
// the SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) RenameStaticEntry(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key,
) error {
	if _, ok := t.StaticEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticEntry", newK)
	}

	e, ok := t.StaticEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticEntry", oldK)
	}
	e.TopLabel = &newK.TopLabel
	e.Preference = &newK.Preference

	t.StaticEntry[newK] = e
	delete(t.StaticEntry, oldK)
	return nil
}

// GetOrCreateStaticEntry retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetOrCreateStaticEntry(TopLabel uint32,
	Preference uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry {
	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	if v, ok := t.StaticEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticEntry(TopLabel, Preference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticEntry got unexpected error: %v", err))
	}
	return v
}

// GetStaticEntry retrieves the value with the specified key from
// the StaticEntry map field of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetStaticEntry(TopLabel uint32,
	Preference uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	if lm, ok := t.StaticEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticEntry deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) DeleteStaticEntry(TopLabel uint32, Preference uint8) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	delete(t.StaticEntry, key)
}

// AppendStaticEntry appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry struct to the
// list StaticEntry of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) AppendStaticEntry(
	v *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry,
) error {
	if v.TopLabel == nil {
		return fmt.Errorf("invalid nil key for TopLabel")
	}

	if v.Preference == nil {
		return fmt.Errorf("invalid nil key for Preference")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   *v.TopLabel,
		Preference: *v.Preference,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticEntry == nil {
		t.StaticEntry = make(map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry)
	}

	if _, ok := t.StaticEntry[key]; ok {
		return fmt.Errorf("duplicate key for list StaticEntry %v", key)
	}

	t.StaticEntry[key] = v
	return nil
}

// GetIcmpTunneling retrieves the value of the leaf IcmpTunneling from the SrlNokiaNetworkInstance_NetworkInstance_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpTunneling is set, it can
// safely use t.GetIcmpTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpTunneling == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetIcmpTunneling() bool {
	if t == nil || t.IcmpTunneling == nil {
		return false
	}
	return *t.IcmpTunneling
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NdkLabelBlock {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticEntry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls) ΛBelongingModule() string {
	return "srl_nokia-mpls"
}

// SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding represents the /srl_nokia-network-instance/network-instance/mpls-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding struct {
	ForwardReceivedPackets *bool `path:"forward-received-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) IsYANGGoStruct() {}

// GetForwardReceivedPackets retrieves the value of the leaf ForwardReceivedPackets from the SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardReceivedPackets is set, it can
// safely use t.GetForwardReceivedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardReceivedPackets == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) GetForwardReceivedPackets() bool {
	if t == nil || t.ForwardReceivedPackets == nil {
		return false
	}
	return *t.ForwardReceivedPackets
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock represents the /srl_nokia-network-instance/network-instance/mpls/ndk-label-block YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock struct {
	ApplicationName  *string `path:"application-name" module:"srl_nokia-mpls"`
	StaticLabelBlock *string `path:"static-label-block" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) IsYANGGoStruct() {}

// GetApplicationName retrieves the value of the leaf ApplicationName from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛBelongingModule() string {
	return "srl_nokia-mpls"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry represents the /srl_nokia-network-instance/network-instance/mpls/static-entry YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry struct {
	AdminState   E_SrlNokiaCommon_AdminState                                          `path:"admin-state" module:"srl_nokia-mpls"`
	CollectStats *bool                                                                `path:"collect-stats" module:"srl_nokia-mpls"`
	NextHopGroup *string                                                              `path:"next-hop-group" module:"srl_nokia-mpls"`
	Operation    E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation `path:"operation" module:"srl_nokia-mpls"`
	Preference   *uint8                                                               `path:"preference" module:"srl_nokia-mpls"`
	TopLabel     *uint32                                                              `path:"top-label" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetNextHopGroup() string {
	if t == nil || t.NextHopGroup == nil {
		return ""
	}
	return *t.NextHopGroup
}

// GetOperation retrieves the value of the leaf Operation from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetOperation() E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation {
	if t == nil || t.Operation == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation_swap
	}
	return t.Operation
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetPreference() uint8 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetTopLabel retrieves the value of the leaf TopLabel from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopLabel is set, it can
// safely use t.GetTopLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetTopLabel() uint32 {
	if t == nil || t.TopLabel == nil {
		return 0
	}
	return *t.TopLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Operation == 0 {
		t.Operation = SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation_swap
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Preference == nil {
		return nil, fmt.Errorf("nil value for key Preference")
	}

	if t.TopLabel == nil {
		return nil, fmt.Errorf("nil value for key TopLabel")
	}

	return map[string]interface{}{
		"preference": *t.Preference,
		"top-label":  *t.TopLabel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛBelongingModule() string {
	return "srl_nokia-mpls"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mtu represents the /srl_nokia-network-instance/network-instance/mtu YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mtu struct {
	PathMtuDiscovery *bool `path:"path-mtu-discovery" module:"srl_nokia-network-instance-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mtu) IsYANGGoStruct() {}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return true
	}
	return *t.PathMtuDiscovery
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mtu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathMtuDiscovery == nil {
		var v bool = true
		t.PathMtuDiscovery = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mtu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mtu.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mtu) ΛBelongingModule() string {
	return "srl_nokia-network-instance-mtu"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups represents the /srl_nokia-network-instance/network-instance/next-hop-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group `path:"group" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) NewGroup(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) GetOrCreateGroup(Name string) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group {
	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) GetGroup(Name string) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct {
	AdminState E_SrlNokiaCommon_AdminState                                                     `path:"admin-state" module:"srl_nokia-next-hop-groups"`
	Blackhole  *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole          `path:"blackhole" module:"srl_nokia-next-hop-groups" yangPresence:"true"`
	Name       *string                                                                         `path:"name" module:"srl_nokia-next-hop-groups"`
	Nexthop    map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop `path:"nexthop" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) IsYANGGoStruct() {}

// NewNexthop creates a new entry in the Nexthop list of the
// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) NewNexthop(Index uint16) (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Nexthop == nil {
		t.Nexthop = make(map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Nexthop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Nexthop", key)
	}

	t.Nexthop[key] = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop{
		Index: &Index,
	}

	return t.Nexthop[key], nil
}

// RenameNexthop renames an entry in the list Nexthop within
// the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) RenameNexthop(oldK, newK uint16) error {
	if _, ok := t.Nexthop[newK]; ok {
		return fmt.Errorf("key %v already exists in Nexthop", newK)
	}

	e, ok := t.Nexthop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Nexthop", oldK)
	}
	e.Index = &newK

	t.Nexthop[newK] = e
	delete(t.Nexthop, oldK)
	return nil
}

// GetOrCreateNexthop retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetOrCreateNexthop(
	Index uint16,
) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop {
	key := Index

	if v, ok := t.Nexthop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNexthop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNexthop got unexpected error: %v", err))
	}
	return v
}

// GetNexthop retrieves the value with the specified key from
// the Nexthop map field of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetNexthop(Index uint16) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Nexthop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNexthop deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) DeleteNexthop(Index uint16) {
	key := Index

	delete(t.Nexthop, key)
}

// AppendNexthop appends the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct to the
// list Nexthop of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) AppendNexthop(
	v *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Nexthop == nil {
		t.Nexthop = make(map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop)
	}

	if _, ok := t.Nexthop[key]; ok {
		return fmt.Errorf("duplicate key for list Nexthop %v", key)
	}

	t.Nexthop[key] = v
	return nil
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetOrCreateBlackhole() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole{}
	return t.Blackhole
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetBlackhole() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.Blackhole.PopulateDefaults()
	for _, e := range t.Nexthop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/blackhole YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole struct {
	GenerateIcmp *bool `path:"generate-icmp" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) IsYANGGoStruct() {}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct {
	AdminState           E_SrlNokiaCommon_AdminState                                                                      `path:"admin-state" module:"srl_nokia-next-hop-groups"`
	FailureDetection     *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection            `path:"failure-detection" module:"srl_nokia-next-hop-groups"`
	Index                *uint16                                                                                          `path:"index" module:"srl_nokia-next-hop-groups"`
	IpAddress            *string                                                                                          `path:"ip-address" module:"srl_nokia-next-hop-groups"`
	PushedMplsLabelStack []SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union `path:"pushed-mpls-label-stack" module:"srl_nokia-next-hop-groups"`
	Resolve              *bool                                                                                            `path:"resolve" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) IsYANGGoStruct() {}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection{}
	return t.FailureDetection
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPushedMplsLabelStack retrieves the value of the leaf PushedMplsLabelStack from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushedMplsLabelStack is set, it can
// safely use t.GetPushedMplsLabelStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushedMplsLabelStack == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetPushedMplsLabelStack() []SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union {
	if t == nil || t.PushedMplsLabelStack == nil {
		return nil
	}
	return t.PushedMplsLabelStack
}

// GetResolve retrieves the value of the leaf Resolve from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolve is set, it can
// safely use t.GetResolve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolve == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetResolve() bool {
	if t == nil || t.Resolve == nil {
		return true
	}
	return *t.Resolve
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Resolve == nil {
		var v bool = true
		t.Resolve = &v
	}
	t.FailureDetection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection struct {
	EnableBfd *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd `path:"enable-bfd" module:"srl_nokia-next-hop-groups" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) IsYANGGoStruct() {
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) GetOrCreateEnableBfd() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd{}
	return t.EnableBfd
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) GetEnableBfd() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EnableBfd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/failure-detection/enable-bfd YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd struct {
	LocalAddress        *string `path:"local-address" module:"srl_nokia-next-hop-groups"`
	LocalDiscriminator  *uint32 `path:"local-discriminator" module:"srl_nokia-next-hop-groups"`
	RemoteDiscriminator *uint32 `path:"remote-discriminator" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) IsYANGGoStruct() {
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalDiscriminator retrieves the value of the leaf LocalDiscriminator from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDiscriminator is set, it can
// safely use t.GetLocalDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDiscriminator == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) GetLocalDiscriminator() uint32 {
	if t == nil || t.LocalDiscriminator == nil {
		return 0
	}
	return *t.LocalDiscriminator
}

// GetRemoteDiscriminator retrieves the value of the leaf RemoteDiscriminator from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteDiscriminator is set, it can
// safely use t.GetRemoteDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteDiscriminator == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) GetRemoteDiscriminator() uint32 {
	if t == nil || t.RemoteDiscriminator == nil {
		return 0
	}
	return *t.RemoteDiscriminator
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding represents the /srl_nokia-network-instance/network-instance/policy-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct {
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface `path:"interface" module:"srl_nokia-policy-forwarding"`
	Policy    map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy    `path:"policy" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) NewInterface(Subinterface string) (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface)
	}

	key := Subinterface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface{
		Subinterface: &Subinterface,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Subinterface = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetOrCreateInterface(
	Subinterface string,
) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface {
	key := Subinterface

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Subinterface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetInterface(Subinterface string) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface {
	if t == nil {
		return nil
	}

	key := Subinterface

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) DeleteInterface(Subinterface string) {
	key := Subinterface

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface,
) error {
	if v.Subinterface == nil {
		return fmt.Errorf("invalid nil key received for Subinterface")
	}

	key := *v.Subinterface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) NewPolicy(PolicyId string) (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy{
		PolicyId: &PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetOrCreatePolicy(
	PolicyId string,
) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy {
	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetPolicy(PolicyId string) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy {
	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) DeletePolicy(PolicyId string) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct to the
// list Policy of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) AppendPolicy(
	v *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy,
) error {
	if v.PolicyId == nil {
		return fmt.Errorf("invalid nil key received for PolicyId")
	}

	key := *v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface represents the /srl_nokia-network-instance/network-instance/policy-forwarding/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface struct {
	ApplyForwardingPolicy *string `path:"apply-forwarding-policy" module:"srl_nokia-policy-forwarding"`
	Subinterface          *string `path:"subinterface" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) IsYANGGoStruct() {}

// GetApplyForwardingPolicy retrieves the value of the leaf ApplyForwardingPolicy from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyForwardingPolicy is set, it can
// safely use t.GetApplyForwardingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyForwardingPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) GetApplyForwardingPolicy() string {
	if t == nil || t.ApplyForwardingPolicy == nil {
		return ""
	}
	return *t.ApplyForwardingPolicy
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) GetSubinterface() string {
	if t == nil || t.Subinterface == nil {
		return ""
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Subinterface == nil {
		return nil, fmt.Errorf("nil value for key Subinterface")
	}

	return map[string]interface{}{
		"subinterface": *t.Subinterface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct {
	Description *string                                                                          `path:"description" module:"srl_nokia-policy-forwarding"`
	PolicyId    *string                                                                          `path:"policy-id" module:"srl_nokia-policy-forwarding"`
	Rule        map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule `path:"rule" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) IsYANGGoStruct() {}

// NewRule creates a new entry in the Rule list of the
// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) NewRule(SequenceId uint32) (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rule", key)
	}

	t.Rule[key] = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule{
		SequenceId: &SequenceId,
	}

	return t.Rule[key], nil
}

// RenameRule renames an entry in the list Rule within
// the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) RenameRule(oldK, newK uint32) error {
	if _, ok := t.Rule[newK]; ok {
		return fmt.Errorf("key %v already exists in Rule", newK)
	}

	e, ok := t.Rule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Rule", oldK)
	}
	e.SequenceId = &newK

	t.Rule[newK] = e
	delete(t.Rule, oldK)
	return nil
}

// GetOrCreateRule retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetOrCreateRule(
	SequenceId uint32,
) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule {
	key := SequenceId

	if v, ok := t.Rule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRule(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRule got unexpected error: %v", err))
	}
	return v
}

// GetRule retrieves the value with the specified key from
// the Rule map field of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetRule(SequenceId uint32) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Rule[key]; ok {
		return lm
	}
	return nil
}

// DeleteRule deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) DeleteRule(SequenceId uint32) {
	key := SequenceId

	delete(t.Rule, key)
}

// AppendRule appends the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule struct to the
// list Rule of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) AppendRule(
	v *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule)
	}

	if _, ok := t.Rule[key]; ok {
		return fmt.Errorf("duplicate key for list Rule %v", key)
	}

	t.Rule[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyId retrieves the value of the leaf PolicyId from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetPolicyId() string {
	if t == nil || t.PolicyId == nil {
		return ""
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Rule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyId == nil {
		return nil, fmt.Errorf("nil value for key PolicyId")
	}

	return map[string]interface{}{
		"policy-id": *t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule struct {
	Action      *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action `path:"action" module:"srl_nokia-policy-forwarding"`
	Description *string                                                                      `path:"description" module:"srl_nokia-policy-forwarding"`
	Match       *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match  `path:"match" module:"srl_nokia-policy-forwarding"`
	SequenceId  *uint32                                                                      `path:"sequence-id" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateAction() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateMatch() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetAction() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetMatch() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/action YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action struct {
	NetworkInstance *string `path:"network-instance" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) IsYANGGoStruct() {
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match struct {
	Ipv4 *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 `path:"ipv4" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 struct {
	DscpSet  []SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union `path:"dscp-set" module:"srl_nokia-policy-forwarding"`
	Protocol SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union  `path:"protocol" module:"srl_nokia-policy-forwarding"`
	SourceIp *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp       `path:"source-ip" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetOrCreateSourceIp() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp{}
	return t.SourceIp
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetSourceIp() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetDscpSet() []SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetProtocol() SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SourceIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match/ipv4/source-ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp struct {
	Prefix *string `path:"prefix" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) IsYANGGoStruct() {
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols represents the /srl_nokia-network-instance/network-instance/protocols YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols struct {
	Bgp               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp               `path:"bgp" module:"srl_nokia-bgp" yangPresence:"true"`
	BgpEvpn           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn           `path:"bgp-evpn" module:"srl_nokia-network-instance" yangPresence:"true"`
	BgpVpn            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn            `path:"bgp-vpn" module:"srl_nokia-bgp-vpn" yangPresence:"true"`
	DirectlyConnected *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected `path:"directly-connected" module:"srl_nokia-network-instance"`
	Gribi             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi             `path:"gribi" module:"srl_nokia-gribi-server" yangPresence:"true"`
	Igmp              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp              `path:"igmp" module:"srl_nokia-igmp" yangPresence:"true"`
	IgmpSnooping      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping      `path:"igmp-snooping" module:"srl_nokia-igmp-snooping" yangPresence:"true"`
	Isis              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis              `path:"isis" module:"srl_nokia-isis" yangPresence:"true"`
	Ldp               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp               `path:"ldp" module:"srl_nokia-ldp" yangPresence:"true"`
	Linux             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux             `path:"linux" module:"srl_nokia-linux"`
	Mld               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld               `path:"mld" module:"srl_nokia-mld" yangPresence:"true"`
	MldSnooping       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping       `path:"mld-snooping" module:"srl_nokia-mld-snooping" yangPresence:"true"`
	Ospf              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf              `path:"ospf" module:"srl_nokia-ospf" yangPresence:"true"`
	Pim               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim               `path:"pim" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp{}
	return t.Bgp
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgpEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpVpn retrieves the value of the BgpVpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgpVpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn {
	if t.BgpVpn != nil {
		return t.BgpVpn
	}
	t.BgpVpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn{}
	return t.BgpVpn
}

// GetOrCreateDirectlyConnected retrieves the value of the DirectlyConnected field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateDirectlyConnected() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected {
	if t.DirectlyConnected != nil {
		return t.DirectlyConnected
	}
	t.DirectlyConnected = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected{}
	return t.DirectlyConnected
}

// GetOrCreateGribi retrieves the value of the Gribi field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateGribi() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi {
	if t.Gribi != nil {
		return t.Gribi
	}
	t.Gribi = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi{}
	return t.Gribi
}

// GetOrCreateIgmp retrieves the value of the Igmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateIgmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp {
	if t.Igmp != nil {
		return t.Igmp
	}
	t.Igmp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp{}
	return t.Igmp
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateIgmpSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIsis retrieves the value of the Isis field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateIsis() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis {
	if t.Isis != nil {
		return t.Isis
	}
	t.Isis = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis{}
	return t.Isis
}

// GetOrCreateLdp retrieves the value of the Ldp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateLdp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp {
	if t.Ldp != nil {
		return t.Ldp
	}
	t.Ldp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp{}
	return t.Ldp
}

// GetOrCreateLinux retrieves the value of the Linux field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateLinux() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux {
	if t.Linux != nil {
		return t.Linux
	}
	t.Linux = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux{}
	return t.Linux
}

// GetOrCreateMld retrieves the value of the Mld field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateMld() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld {
	if t.Mld != nil {
		return t.Mld
	}
	t.Mld = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld{}
	return t.Mld
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateMldSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateOspf retrieves the value of the Ospf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateOspf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf {
	if t.Ospf != nil {
		return t.Ospf
	}
	t.Ospf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf{}
	return t.Ospf
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreatePim() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim{}
	return t.Pim
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgpEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpVpn returns the value of the BgpVpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field BgpVpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgpVpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn {
	if t != nil && t.BgpVpn != nil {
		return t.BgpVpn
	}
	return nil
}

// GetDirectlyConnected returns the value of the DirectlyConnected struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field DirectlyConnected is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetDirectlyConnected() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected {
	if t != nil && t.DirectlyConnected != nil {
		return t.DirectlyConnected
	}
	return nil
}

// GetGribi returns the value of the Gribi struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Gribi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetGribi() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi {
	if t != nil && t.Gribi != nil {
		return t.Gribi
	}
	return nil
}

// GetIgmp returns the value of the Igmp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Igmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetIgmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp {
	if t != nil && t.Igmp != nil {
		return t.Igmp
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetIgmpSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIsis returns the value of the Isis struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Isis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetIsis() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis {
	if t != nil && t.Isis != nil {
		return t.Isis
	}
	return nil
}

// GetLdp returns the value of the Ldp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Ldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetLdp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp {
	if t != nil && t.Ldp != nil {
		return t.Ldp
	}
	return nil
}

// GetLinux returns the value of the Linux struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Linux is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetLinux() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux {
	if t != nil && t.Linux != nil {
		return t.Linux
	}
	return nil
}

// GetMld returns the value of the Mld struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Mld is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetMld() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld {
	if t != nil && t.Mld != nil {
		return t.Mld
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetMldSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetOspf returns the value of the Ospf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Ospf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOspf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf {
	if t != nil && t.Ospf != nil {
		return t.Ospf
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetPim() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.BgpEvpn.PopulateDefaults()
	t.BgpVpn.PopulateDefaults()
	t.DirectlyConnected.PopulateDefaults()
	t.Gribi.PopulateDefaults()
	t.Igmp.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Isis.PopulateDefaults()
	t.Ldp.PopulateDefaults()
	t.Linux.PopulateDefaults()
	t.Mld.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Ospf.PopulateDefaults()
	t.Pim.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp represents the /srl_nokia-network-instance/network-instance/protocols/bgp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct {
	AdminState         E_SrlNokiaCommon_AdminState                                                `path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions       `path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication      `path:"authentication" module:"srl_nokia-bgp"`
	AutonomousSystem   *uint32                                                                    `path:"autonomous-system" module:"srl_nokia-bgp"`
	BestPathSelection  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection   `path:"best-path-selection" module:"srl_nokia-bgp"`
	Convergence        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence         `path:"convergence" module:"srl_nokia-bgp"`
	DynamicNeighbors   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors    `path:"dynamic-neighbors" module:"srl_nokia-bgp"`
	EbgpDefaultPolicy  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy   `path:"ebgp-default-policy" module:"srl_nokia-bgp"`
	Evpn               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn                `path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy       *string                                                                    `path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection    `path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart     `path:"graceful-restart" module:"srl_nokia-bgp"`
	Group              map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group    `path:"group" module:"srl_nokia-bgp"`
	ImportPolicy       *string                                                                    `path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast         `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast         `path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalPreference    *uint32                                                                    `path:"local-preference" module:"srl_nokia-bgp"`
	Neighbor           map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor `path:"neighbor" module:"srl_nokia-bgp"`
	Preference         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference          `path:"preference" module:"srl_nokia-bgp"`
	RouteAdvertisement *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement  `path:"route-advertisement" module:"srl_nokia-bgp"`
	RouteReflector     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector      `path:"route-reflector" module:"srl_nokia-bgp"`
	RouterId           *string                                                                    `path:"router-id" module:"srl_nokia-bgp"`
	SendCommunity      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity       `path:"send-community" module:"srl_nokia-bgp"`
	TraceOptions       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions        `path:"trace-options" module:"srl_nokia-bgp"`
	Transport          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport           `path:"transport" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewGroup(GroupName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateGroup(GroupName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group {
	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetGroup(GroupName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group {
	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group,
) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewNeighbor(PeerAddress string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor)
	}

	key := PeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor{
		PeerAddress: &PeerAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.PeerAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateNeighbor(
	PeerAddress string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor {
	key := PeerAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(PeerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetNeighbor(PeerAddress string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor {
	if t == nil {
		return nil
	}

	key := PeerAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) DeleteNeighbor(PeerAddress string) {
	key := PeerAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct to the
// list Neighbor of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) AppendNeighbor(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor,
) error {
	if v.PeerAddress == nil {
		return fmt.Errorf("invalid nil key received for PeerAddress")
	}

	key := *v.PeerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication{}
	return t.Authentication
}

// GetOrCreateBestPathSelection retrieves the value of the BestPathSelection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateBestPathSelection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection {
	if t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	t.BestPathSelection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection{}
	return t.BestPathSelection
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence{}
	return t.Convergence
}

// GetOrCreateDynamicNeighbors retrieves the value of the DynamicNeighbors field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateDynamicNeighbors() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors {
	if t.DynamicNeighbors != nil {
		return t.DynamicNeighbors
	}
	t.DynamicNeighbors = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors{}
	return t.DynamicNeighbors
}

// GetOrCreateEbgpDefaultPolicy retrieves the value of the EbgpDefaultPolicy field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateEbgpDefaultPolicy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy {
	if t.EbgpDefaultPolicy != nil {
		return t.EbgpDefaultPolicy
	}
	t.EbgpDefaultPolicy = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy{}
	return t.EbgpDefaultPolicy
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn{}
	return t.Evpn
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreatePreference retrieves the value of the Preference field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreatePreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference {
	if t.Preference != nil {
		return t.Preference
	}
	t.Preference = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference{}
	return t.Preference
}

// GetOrCreateRouteAdvertisement retrieves the value of the RouteAdvertisement field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateRouteAdvertisement() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement {
	if t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	t.RouteAdvertisement = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement{}
	return t.RouteAdvertisement
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateSendCommunity retrieves the value of the SendCommunity field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity {
	if t.SendCommunity != nil {
		return t.SendCommunity
	}
	t.SendCommunity = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity{}
	return t.SendCommunity
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport{}
	return t.Transport
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBestPathSelection returns the value of the BestPathSelection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field BestPathSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetBestPathSelection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection {
	if t != nil && t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetDynamicNeighbors returns the value of the DynamicNeighbors struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field DynamicNeighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetDynamicNeighbors() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors {
	if t != nil && t.DynamicNeighbors != nil {
		return t.DynamicNeighbors
	}
	return nil
}

// GetEbgpDefaultPolicy returns the value of the EbgpDefaultPolicy struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field EbgpDefaultPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetEbgpDefaultPolicy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy {
	if t != nil && t.EbgpDefaultPolicy != nil {
		return t.EbgpDefaultPolicy
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetPreference returns the value of the Preference struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Preference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetPreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference {
	if t != nil && t.Preference != nil {
		return t.Preference
	}
	return nil
}

// GetRouteAdvertisement returns the value of the RouteAdvertisement struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field RouteAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRouteAdvertisement() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement {
	if t != nil && t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetSendCommunity returns the value of the SendCommunity struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field SendCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity {
	if t != nil && t.SendCommunity != nil {
		return t.SendCommunity
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAutonomousSystem retrieves the value of the leaf AutonomousSystem from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystem is set, it can
// safely use t.GetAutonomousSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystem == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAutonomousSystem() uint32 {
	if t == nil || t.AutonomousSystem == nil {
		return 0
	}
	return *t.AutonomousSystem
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 100
	}
	return *t.LocalPreference
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.LocalPreference == nil {
		var v uint32 = 100
		t.LocalPreference = &v
	}
	t.AsPathOptions.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.BestPathSelection.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.DynamicNeighbors.PopulateDefaults()
	t.EbgpDefaultPolicy.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.Preference.PopulateDefaults()
	t.RouteAdvertisement.PopulateDefaults()
	t.RouteReflector.PopulateDefaults()
	t.SendCommunity.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct {
	BgpInstance map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance `path:"bgp-instance" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) NewBgpInstance(Id uint8) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) GetOrCreateBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) GetBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance struct to the
// list BgpInstance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) AppendBgpInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance struct {
	AdminState        E_SrlNokiaCommon_AdminState                                                               `path:"admin-state" module:"srl_nokia-bgp-evpn"`
	DefaultAdminTag   *uint32                                                                                   `path:"default-admin-tag" module:"srl_nokia-bgp-evpn"`
	Ecmp              *uint8                                                                                    `path:"ecmp" module:"srl_nokia-bgp-evpn"`
	EncapsulationType E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType `path:"encapsulation-type" module:"srl_nokia-bgp-evpn"`
	Evi               *uint32                                                                                   `path:"evi" module:"srl_nokia-bgp-evpn"`
	Id                *uint8                                                                                    `path:"id" module:"srl_nokia-bgp-evpn"`
	Mpls              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls               `path:"mpls" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	Routes            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes             `path:"routes" module:"srl_nokia-bgp-evpn"`
	VxlanInterface    *string                                                                                   `path:"vxlan-interface" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls{}
	return t.Mpls
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetOrCreateRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes{}
	return t.Routes
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDefaultAdminTag retrieves the value of the leaf DefaultAdminTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAdminTag is set, it can
// safely use t.GetDefaultAdminTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAdminTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetDefaultAdminTag() uint32 {
	if t == nil || t.DefaultAdminTag == nil {
		return 0
	}
	return *t.DefaultAdminTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetEcmp() uint8 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEncapsulationType retrieves the value of the leaf EncapsulationType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulationType is set, it can
// safely use t.GetEncapsulationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulationType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetEncapsulationType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType {
	if t == nil || t.EncapsulationType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType_vxlan
	}
	return t.EncapsulationType
}

// GetEvi retrieves the value of the leaf Evi from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evi is set, it can
// safely use t.GetEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evi == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetEvi() uint32 {
	if t == nil || t.Evi == nil {
		return 0
	}
	return *t.Evi
}

// GetId retrieves the value of the leaf Id from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetVxlanInterface retrieves the value of the leaf VxlanInterface from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInterface is set, it can
// safely use t.GetVxlanInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetVxlanInterface() string {
	if t == nil || t.VxlanInterface == nil {
		return ""
	}
	return *t.VxlanInterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.DefaultAdminTag == nil {
		var v uint32 = 0
		t.DefaultAdminTag = &v
	}
	if t.Ecmp == nil {
		var v uint8 = 1
		t.Ecmp = &v
	}
	if t.EncapsulationType == 0 {
		t.EncapsulationType = SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType_vxlan
	}
	t.Mpls.PopulateDefaults()
	t.Routes.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls struct {
	BridgeTable                *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable       `path:"bridge-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	IngressReplicationBumLabel *bool                                                                                         `path:"ingress-replication-bum-label" module:"srl_nokia-bgp-evpn"`
	NextHopResolution          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) IsYANGGoStruct() {}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetOrCreateBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution{}
	return t.NextHopResolution
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetIngressReplicationBumLabel retrieves the value of the leaf IngressReplicationBumLabel from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressReplicationBumLabel is set, it can
// safely use t.GetIngressReplicationBumLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressReplicationBumLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetIngressReplicationBumLabel() bool {
	if t == nil || t.IngressReplicationBumLabel == nil {
		return false
	}
	return *t.IngressReplicationBumLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IngressReplicationBumLabel == nil {
		var v bool = false
		t.IngressReplicationBumLabel = &v
	}
	t.BridgeTable.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes struct {
	BridgeTable *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable `path:"bridge-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	RouteTable  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable  `path:"route-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) IsYANGGoStruct() {
}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetOrCreateBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateRouteTable retrieves the value of the RouteTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetOrCreateRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable {
	if t.RouteTable != nil {
		return t.RouteTable
	}
	t.RouteTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable{}
	return t.RouteTable
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetRouteTable returns the value of the RouteTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes. If the receiver or the field RouteTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable {
	if t != nil && t.RouteTable != nil {
		return t.RouteTable
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BridgeTable.PopulateDefaults()
	t.RouteTable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable struct {
	InclusiveMcast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast `path:"inclusive-mcast" module:"srl_nokia-bgp-evpn"`
	MacIp                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp          `path:"mac-ip" module:"srl_nokia-bgp-evpn"`
	NextHop               SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union   `path:"next-hop" module:"srl_nokia-bgp-evpn"`
	VlanAwareBundleEthTag *uint32                                                                                                  `path:"vlan-aware-bundle-eth-tag" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) IsYANGGoStruct() {
}

// GetOrCreateInclusiveMcast retrieves the value of the InclusiveMcast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetOrCreateInclusiveMcast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast {
	if t.InclusiveMcast != nil {
		return t.InclusiveMcast
	}
	t.InclusiveMcast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast{}
	return t.InclusiveMcast
}

// GetOrCreateMacIp retrieves the value of the MacIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetOrCreateMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp {
	if t.MacIp != nil {
		return t.MacIp
	}
	t.MacIp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp{}
	return t.MacIp
}

// GetInclusiveMcast returns the value of the InclusiveMcast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable. If the receiver or the field InclusiveMcast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetInclusiveMcast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast {
	if t != nil && t.InclusiveMcast != nil {
		return t.InclusiveMcast
	}
	return nil
}

// GetMacIp returns the value of the MacIp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable. If the receiver or the field MacIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp {
	if t != nil && t.MacIp != nil {
		return t.MacIp
	}
	return nil
}

// GetNextHop retrieves the value of the leaf NextHop from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetNextHop() SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return SrlNokiaCommon_NextHopType_Enum_use_system_ipv4_address
	}
	return t.NextHop
}

// GetVlanAwareBundleEthTag retrieves the value of the leaf VlanAwareBundleEthTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAwareBundleEthTag is set, it can
// safely use t.GetVlanAwareBundleEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAwareBundleEthTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetVlanAwareBundleEthTag() uint32 {
	if t == nil || t.VlanAwareBundleEthTag == nil {
		return 0
	}
	return *t.VlanAwareBundleEthTag
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHop == nil {
		t.NextHop = SrlNokiaCommon_NextHopType_Enum_use_system_ipv4_address
	}
	if t.VlanAwareBundleEthTag == nil {
		var v uint32 = 0
		t.VlanAwareBundleEthTag = &v
	}
	t.InclusiveMcast.PopulateDefaults()
	t.MacIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/inclusive-mcast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast struct {
	Advertise     *bool   `path:"advertise" module:"srl_nokia-bgp-evpn"`
	OriginatingIp *string `path:"originating-ip" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetOriginatingIp retrieves the value of the leaf OriginatingIp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatingIp is set, it can
// safely use t.GetOriginatingIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatingIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) GetOriginatingIp() string {
	if t == nil || t.OriginatingIp == nil {
		return ""
	}
	return *t.OriginatingIp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/mac-ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp struct {
	Advertise                           *bool `path:"advertise" module:"srl_nokia-bgp-evpn"`
	AdvertiseArpNdOnlyWithMacTableEntry *bool `path:"advertise-arp-nd-only-with-mac-table-entry" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetAdvertiseArpNdOnlyWithMacTableEntry retrieves the value of the leaf AdvertiseArpNdOnlyWithMacTableEntry from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseArpNdOnlyWithMacTableEntry is set, it can
// safely use t.GetAdvertiseArpNdOnlyWithMacTableEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseArpNdOnlyWithMacTableEntry == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) GetAdvertiseArpNdOnlyWithMacTableEntry() bool {
	if t == nil || t.AdvertiseArpNdOnlyWithMacTableEntry == nil {
		return false
	}
	return *t.AdvertiseArpNdOnlyWithMacTableEntry
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.AdvertiseArpNdOnlyWithMacTableEntry == nil {
		var v bool = false
		t.AdvertiseArpNdOnlyWithMacTableEntry = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable struct {
	MacIp *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp `path:"mac-ip" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) IsYANGGoStruct() {
}

// GetOrCreateMacIp retrieves the value of the MacIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) GetOrCreateMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp {
	if t.MacIp != nil {
		return t.MacIp
	}
	t.MacIp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp{}
	return t.MacIp
}

// GetMacIp returns the value of the MacIp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable. If the receiver or the field MacIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) GetMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp {
	if t != nil && t.MacIp != nil {
		return t.MacIp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/mac-ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp struct {
	AdvertiseGatewayMac *bool `path:"advertise-gateway-mac" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) IsYANGGoStruct() {
}

// GetAdvertiseGatewayMac retrieves the value of the leaf AdvertiseGatewayMac from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseGatewayMac is set, it can
// safely use t.GetAdvertiseGatewayMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseGatewayMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) GetAdvertiseGatewayMac() bool {
	if t == nil || t.AdvertiseGatewayMac == nil {
		return false
	}
	return *t.AdvertiseGatewayMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseGatewayMac == nil {
		var v bool = false
		t.AdvertiseGatewayMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn struct {
	BgpInstance map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance `path:"bgp-instance" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) NewBgpInstance(Id uint8) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) GetOrCreateBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) GetBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance struct to the
// list BgpInstance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) AppendBgpInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn/bgp-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance struct {
	ExportPolicy       *string                                                                                  `path:"export-policy" module:"srl_nokia-bgp-vpn"`
	Id                 *uint8                                                                                   `path:"id" module:"srl_nokia-bgp-vpn"`
	ImportPolicy       *string                                                                                  `path:"import-policy" module:"srl_nokia-bgp-vpn"`
	RouteDistinguisher *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher `path:"route-distinguisher" module:"srl_nokia-bgp-vpn"`
	RouteTarget        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget        `path:"route-target" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateRouteDistinguisher retrieves the value of the RouteDistinguisher field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetOrCreateRouteDistinguisher() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher {
	if t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	t.RouteDistinguisher = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher{}
	return t.RouteDistinguisher
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetOrCreateRouteTarget() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget{}
	return t.RouteTarget
}

// GetRouteDistinguisher returns the value of the RouteDistinguisher struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance. If the receiver or the field RouteDistinguisher is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetRouteDistinguisher() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher {
	if t != nil && t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	return nil
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetRouteTarget() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetId retrieves the value of the leaf Id from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteDistinguisher.PopulateDefaults()
	t.RouteTarget.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher struct {
	Rd *string `path:"rd" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) IsYANGGoStruct() {
}

// GetRd retrieves the value of the leaf Rd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rd is set, it can
// safely use t.GetRd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) GetRd() string {
	if t == nil || t.Rd == nil {
		return ""
	}
	return *t.Rd
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn/bgp-instance/route-target YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget struct {
	ExportRt *string `path:"export-rt" module:"srl_nokia-bgp-vpn"`
	ImportRt *string `path:"import-rt" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) IsYANGGoStruct() {
}

// GetExportRt retrieves the value of the leaf ExportRt from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRt is set, it can
// safely use t.GetExportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRt == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) GetExportRt() string {
	if t == nil || t.ExportRt == nil {
		return ""
	}
	return *t.ExportRt
}

// GetImportRt retrieves the value of the leaf ImportRt from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRt is set, it can
// safely use t.GetImportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRt == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) GetImportRt() string {
	if t == nil || t.ImportRt == nil {
		return ""
	}
	return *t.ImportRt
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions struct {
	AllowOwnAs      *uint8                                                                               `path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs `path:"remove-private-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) IsYANGGoStruct() {}

// GetOrCreateRemovePrivateAs retrieves the value of the RemovePrivateAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) GetOrCreateRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs {
	if t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	t.RemovePrivateAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs{}
	return t.RemovePrivateAs
}

// GetRemovePrivateAs returns the value of the RemovePrivateAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions. If the receiver or the field RemovePrivateAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) GetRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs {
	if t != nil && t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	return nil
}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOwnAs is set, it can
// safely use t.GetAllowOwnAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOwnAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOwnAs == nil {
		var v uint8 = 0
		t.AllowOwnAs = &v
	}
	t.RemovePrivateAs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs *bool                                                                                      `path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly  *bool                                                                                      `path:"leading-only" module:"srl_nokia-bgp"`
	Mode         E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {
}

// GetIgnorePeerAs retrieves the value of the leaf IgnorePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnorePeerAs is set, it can
// safely use t.GetIgnorePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnorePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) GetIgnorePeerAs() bool {
	if t == nil || t.IgnorePeerAs == nil {
		return false
	}
	return *t.IgnorePeerAs
}

// GetLeadingOnly retrieves the value of the leaf LeadingOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeadingOnly is set, it can
// safely use t.GetLeadingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeadingOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) GetLeadingOnly() bool {
	if t == nil || t.LeadingOnly == nil {
		return false
	}
	return *t.LeadingOnly
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnorePeerAs == nil {
		var v bool = false
		t.IgnorePeerAs = &v
	}
	if t.LeadingOnly == nil {
		var v bool = false
		t.LeadingOnly = &v
	}
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) IsYANGGoStruct() {}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/best-path-selection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection struct {
	AlwaysCompareMed *bool `path:"always-compare-med" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) IsYANGGoStruct() {}

// GetAlwaysCompareMed retrieves the value of the leaf AlwaysCompareMed from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlwaysCompareMed is set, it can
// safely use t.GetAlwaysCompareMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlwaysCompareMed == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) GetAlwaysCompareMed() bool {
	if t == nil || t.AlwaysCompareMed == nil {
		return false
	}
	return *t.AlwaysCompareMed
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlwaysCompareMed == nil {
		var v bool = false
		t.AlwaysCompareMed = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence struct {
	MinWaitToAdvertise *uint16 `path:"min-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) IsYANGGoStruct() {}

// GetMinWaitToAdvertise retrieves the value of the leaf MinWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinWaitToAdvertise is set, it can
// safely use t.GetMinWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) GetMinWaitToAdvertise() uint16 {
	if t == nil || t.MinWaitToAdvertise == nil {
		return 0
	}
	return *t.MinWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinWaitToAdvertise == nil {
		var v uint16 = 0
		t.MinWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct {
	Accept    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept               `path:"accept" module:"srl_nokia-bgp"`
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface `path:"interface" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAccept retrieves the value of the Accept field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetOrCreateAccept() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept {
	if t.Accept != nil {
		return t.Accept
	}
	t.Accept = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept{}
	return t.Accept
}

// GetAccept returns the value of the Accept struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the receiver or the field Accept is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetAccept() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept {
	if t != nil && t.Accept != nil {
		return t.Accept
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accept.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct {
	Match       map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match `path:"match" module:"srl_nokia-bgp"`
	MaxSessions *uint16                                                                                         `path:"max-sessions" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) IsYANGGoStruct() {
}

// NewMatch creates a new entry in the Match list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) NewMatch(
	Prefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Match[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Match", key)
	}

	t.Match[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match{
		Prefix: &Prefix,
	}

	return t.Match[key], nil
}

// RenameMatch renames an entry in the list Match within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) RenameMatch(oldK, newK string) error {
	if _, ok := t.Match[newK]; ok {
		return fmt.Errorf("key %v already exists in Match", newK)
	}

	e, ok := t.Match[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Match", oldK)
	}
	e.Prefix = &newK

	t.Match[newK] = e
	delete(t.Match, oldK)
	return nil
}

// GetOrCreateMatch retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) GetOrCreateMatch(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match {
	key := Prefix

	if v, ok := t.Match[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMatch(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMatch got unexpected error: %v", err))
	}
	return v
}

// GetMatch retrieves the value with the specified key from
// the Match map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) GetMatch(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Match[key]; ok {
		return lm
	}
	return nil
}

// DeleteMatch deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) DeleteMatch(Prefix string) {
	key := Prefix

	delete(t.Match, key)
}

// AppendMatch appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct to the
// list Match of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) AppendMatch(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match)
	}

	if _, ok := t.Match[key]; ok {
		return fmt.Errorf("duplicate key for list Match %v", key)
	}

	t.Match[key] = v
	return nil
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) GetMaxSessions() uint16 {
	if t == nil || t.MaxSessions == nil {
		return 0
	}
	return *t.MaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSessions == nil {
		var v uint16 = 0
		t.MaxSessions = &v
	}
	for _, e := range t.Match {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct {
	AllowedPeerAs []string `path:"allowed-peer-as" module:"srl_nokia-bgp"`
	PeerGroup     *string  `path:"peer-group" module:"srl_nokia-bgp"`
	Prefix        *string  `path:"prefix" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) IsYANGGoStruct() {
}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface struct {
	AllowedPeerAs []string `path:"allowed-peer-as" module:"srl_nokia-bgp"`
	InterfaceName *string  `path:"interface-name" module:"srl_nokia-bgp"`
	MaxSessions   *uint16  `path:"max-sessions" module:"srl_nokia-bgp"`
	PeerGroup     *string  `path:"peer-group" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) IsYANGGoStruct() {
}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetMaxSessions() uint16 {
	if t == nil || t.MaxSessions == nil {
		return 1
	}
	return *t.MaxSessions
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSessions == nil {
		var v uint16 = 1
		t.MaxSessions = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ebgp-default-policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy struct {
	ExportRejectAll *bool `path:"export-reject-all" module:"srl_nokia-bgp"`
	ImportRejectAll *bool `path:"import-reject-all" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) IsYANGGoStruct() {}

// GetExportRejectAll retrieves the value of the leaf ExportRejectAll from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRejectAll is set, it can
// safely use t.GetExportRejectAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRejectAll == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) GetExportRejectAll() bool {
	if t == nil || t.ExportRejectAll == nil {
		return true
	}
	return *t.ExportRejectAll
}

// GetImportRejectAll retrieves the value of the leaf ImportRejectAll from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRejectAll is set, it can
// safely use t.GetImportRejectAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRejectAll == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) GetImportRejectAll() bool {
	if t == nil || t.ImportRejectAll == nil {
		return true
	}
	return *t.ImportRejectAll
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExportRejectAll == nil {
		var v bool = true
		t.ExportRejectAll = &v
	}
	if t.ImportRejectAll == nil {
		var v bool = true
		t.ImportRejectAll = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn struct {
	AdminState            E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops *bool                       `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	InterAsVpn            *bool                       `path:"inter-as-vpn" module:"srl_nokia-bgp"`
	KeepAllRoutes         *bool                       `path:"keep-all-routes" module:"srl_nokia-bgp"`
	RapidUpdate           *bool                       `path:"rapid-update" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetInterAsVpn retrieves the value of the leaf InterAsVpn from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterAsVpn is set, it can
// safely use t.GetInterAsVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterAsVpn == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) GetInterAsVpn() bool {
	if t == nil || t.InterAsVpn == nil {
		return false
	}
	return *t.InterAsVpn
}

// GetKeepAllRoutes retrieves the value of the leaf KeepAllRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAllRoutes is set, it can
// safely use t.GetKeepAllRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAllRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) GetKeepAllRoutes() bool {
	if t == nil || t.KeepAllRoutes == nil {
		return false
	}
	return *t.KeepAllRoutes
}

// GetRapidUpdate retrieves the value of the leaf RapidUpdate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidUpdate is set, it can
// safely use t.GetRapidUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidUpdate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) GetRapidUpdate() bool {
	if t == nil || t.RapidUpdate == nil {
		return false
	}
	return *t.RapidUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.AdvertiseIpv6NextHops == nil {
		var v bool = false
		t.AdvertiseIpv6NextHops = &v
	}
	if t.InterAsVpn == nil {
		var v bool = false
		t.InterAsVpn = &v
	}
	if t.KeepAllRoutes == nil {
		var v bool = false
		t.KeepAllRoutes = &v
	}
	if t.RapidUpdate == nil {
		var v bool = false
		t.RapidUpdate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection struct {
	EnableBfd    *bool `path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover *bool `path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) IsYANGGoStruct() {}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetFastFailover retrieves the value of the leaf FastFailover from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFailover is set, it can
// safely use t.GetFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFailover == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) GetFastFailover() bool {
	if t == nil || t.FastFailover == nil {
		return true
	}
	return *t.FastFailover
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.FastFailover == nil {
		var v bool = true
		t.FastFailover = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart struct {
	AdminState           E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	RequestedRestartTime *uint16                     `path:"requested-restart-time" module:"srl_nokia-bgp"`
	StaleRoutesTime      *uint16                     `path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetRequestedRestartTime retrieves the value of the leaf RequestedRestartTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestedRestartTime is set, it can
// safely use t.GetRequestedRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestedRestartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) GetRequestedRestartTime() uint16 {
	if t == nil || t.RequestedRestartTime == nil {
		return 300
	}
	return *t.RequestedRestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) GetStaleRoutesTime() uint16 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.RequestedRestartTime == nil {
		var v uint16 = 300
		t.RequestedRestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint16 = 360
		t.StaleRoutesTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct {
	AdminState       E_SrlNokiaCommon_AdminState                                                     `path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions      `path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication     `path:"authentication" module:"srl_nokia-bgp"`
	Description      *string                                                                         `path:"description" module:"srl_nokia-bgp"`
	Evpn             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn               `path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy     *string                                                                         `path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection   `path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart    `path:"graceful-restart" module:"srl_nokia-bgp"`
	GroupName        *string                                                                         `path:"group-name" module:"srl_nokia-bgp"`
	ImportPolicy     *string                                                                         `path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalAs          map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs `path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference  *uint32                                                                         `path:"local-preference" module:"srl_nokia-bgp"`
	Multihop         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop           `path:"multihop" module:"srl_nokia-bgp"`
	NextHopSelf      *bool                                                                           `path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAs           *uint32                                                                         `path:"peer-as" module:"srl_nokia-bgp"`
	RouteReflector   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector     `path:"route-reflector" module:"srl_nokia-bgp"`
	SendCommunity    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity      `path:"send-community" module:"srl_nokia-bgp"`
	SendDefaultRoute *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute   `path:"send-default-route" module:"srl_nokia-bgp"`
	Timers           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers             `path:"timers" module:"srl_nokia-bgp"`
	TraceOptions     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions       `path:"trace-options" module:"srl_nokia-bgp"`
	Transport        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport          `path:"transport" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) IsYANGGoStruct() {}

// NewLocalAs creates a new entry in the LocalAs list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) NewLocalAs(AsNumber uint32) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAs == nil {
		t.LocalAs = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAs", key)
	}

	t.LocalAs[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs{
		AsNumber: &AsNumber,
	}

	return t.LocalAs[key], nil
}

// RenameLocalAs renames an entry in the list LocalAs within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) RenameLocalAs(oldK, newK uint32) error {
	if _, ok := t.LocalAs[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalAs", newK)
	}

	e, ok := t.LocalAs[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalAs", oldK)
	}
	e.AsNumber = &newK

	t.LocalAs[newK] = e
	delete(t.LocalAs, oldK)
	return nil
}

// GetOrCreateLocalAs retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateLocalAs(
	AsNumber uint32,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs {
	key := AsNumber

	if v, ok := t.LocalAs[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalAs(AsNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalAs got unexpected error: %v", err))
	}
	return v
}

// GetLocalAs retrieves the value with the specified key from
// the LocalAs map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetLocalAs(AsNumber uint32) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs {
	if t == nil {
		return nil
	}

	key := AsNumber

	if lm, ok := t.LocalAs[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalAs deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) DeleteLocalAs(AsNumber uint32) {
	key := AsNumber

	delete(t.LocalAs, key)
}

// AppendLocalAs appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct to the
// list LocalAs of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) AppendLocalAs(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs,
) error {
	if v.AsNumber == nil {
		return fmt.Errorf("invalid nil key received for AsNumber")
	}

	key := *v.AsNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAs == nil {
		t.LocalAs = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs)
	}

	if _, ok := t.LocalAs[key]; ok {
		return fmt.Errorf("duplicate key for list LocalAs %v", key)
	}

	t.LocalAs[key] = v
	return nil
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication{}
	return t.Authentication
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn{}
	return t.Evpn
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateMultihop retrieves the value of the Multihop field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop {
	if t.Multihop != nil {
		return t.Multihop
	}
	t.Multihop = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop{}
	return t.Multihop
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateSendCommunity retrieves the value of the SendCommunity field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity {
	if t.SendCommunity != nil {
		return t.SendCommunity
	}
	t.SendCommunity = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity{}
	return t.SendCommunity
}

// GetOrCreateSendDefaultRoute retrieves the value of the SendDefaultRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute {
	if t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	t.SendDefaultRoute = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute{}
	return t.SendDefaultRoute
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport{}
	return t.Transport
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetMultihop returns the value of the Multihop struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Multihop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop {
	if t != nil && t.Multihop != nil {
		return t.Multihop
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetSendCommunity returns the value of the SendCommunity struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field SendCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity {
	if t != nil && t.SendCommunity != nil {
		return t.SendCommunity
	}
	return nil
}

// GetSendDefaultRoute returns the value of the SendDefaultRoute struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field SendDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute {
	if t != nil && t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPeerAs retrieves the value of the leaf PeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.NextHopSelf == nil {
		var v bool = false
		t.NextHopSelf = &v
	}
	t.AsPathOptions.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.Multihop.PopulateDefaults()
	t.RouteReflector.PopulateDefaults()
	t.SendCommunity.PopulateDefaults()
	t.SendDefaultRoute.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.LocalAs {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions struct {
	AllowOwnAs      *uint8                                                                                     `path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs `path:"remove-private-as" module:"srl_nokia-bgp" yangPresence:"true"`
	ReplacePeerAs   *bool                                                                                      `path:"replace-peer-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) IsYANGGoStruct() {}

// GetOrCreateRemovePrivateAs retrieves the value of the RemovePrivateAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetOrCreateRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs {
	if t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	t.RemovePrivateAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs{}
	return t.RemovePrivateAs
}

// GetRemovePrivateAs returns the value of the RemovePrivateAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions. If the receiver or the field RemovePrivateAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs {
	if t != nil && t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	return nil
}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOwnAs is set, it can
// safely use t.GetAllowOwnAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOwnAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// GetReplacePeerAs retrieves the value of the leaf ReplacePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplacePeerAs is set, it can
// safely use t.GetReplacePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplacePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetReplacePeerAs() bool {
	if t == nil || t.ReplacePeerAs == nil {
		return false
	}
	return *t.ReplacePeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RemovePrivateAs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs *bool                                                                                            `path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly  *bool                                                                                            `path:"leading-only" module:"srl_nokia-bgp"`
	Mode         E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {
}

// GetIgnorePeerAs retrieves the value of the leaf IgnorePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnorePeerAs is set, it can
// safely use t.GetIgnorePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnorePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) GetIgnorePeerAs() bool {
	if t == nil || t.IgnorePeerAs == nil {
		return false
	}
	return *t.IgnorePeerAs
}

// GetLeadingOnly retrieves the value of the leaf LeadingOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeadingOnly is set, it can
// safely use t.GetLeadingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeadingOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) GetLeadingOnly() bool {
	if t == nil || t.LeadingOnly == nil {
		return false
	}
	return *t.LeadingOnly
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnorePeerAs == nil {
		var v bool = false
		t.IgnorePeerAs = &v
	}
	if t.LeadingOnly == nil {
		var v bool = false
		t.LeadingOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) IsYANGGoStruct() {}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn struct {
	AdminState            E_SrlNokiaCommon_AdminState                                                   `path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops *bool                                                                         `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/evpn/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection struct {
	EnableBfd    *bool `path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover *bool `path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) IsYANGGoStruct() {
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetFastFailover retrieves the value of the leaf FastFailover from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFailover is set, it can
// safely use t.GetFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFailover == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) GetFastFailover() bool {
	if t == nil || t.FastFailover == nil {
		return false
	}
	return *t.FastFailover
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart struct {
	AdminState      E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	StaleRoutesTime *uint16                     `path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) GetStaleRoutesTime() uint16 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast struct {
	AddPaths              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths    `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState            E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops *bool                                                                                `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths{}
	return t.AddPaths
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddPaths.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	RestartTimer        *uint16 `path:"restart-timer" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTimer is set, it can
// safely use t.GetRestartTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) GetRestartTimer() uint16 {
	if t == nil || t.RestartTimer == nil {
		return 0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.RestartTimer == nil {
		var v uint16 = 0
		t.RestartTimer = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast struct {
	AddPaths    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths    `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState  E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-bgp"`
	PrefixLimit *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths{}
	return t.AddPaths
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddPaths.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	RestartTimer        *uint16 `path:"restart-timer" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTimer is set, it can
// safely use t.GetRestartTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) GetRestartTimer() uint16 {
	if t == nil || t.RestartTimer == nil {
		return 0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.RestartTimer == nil {
		var v uint16 = 0
		t.RestartTimer = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs  *bool   `path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrependLocalAs retrieves the value of the leaf PrependLocalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependLocalAs is set, it can
// safely use t.GetPrependLocalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependLocalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) GetPrependLocalAs() bool {
	if t == nil || t.PrependLocalAs == nil {
		return true
	}
	return *t.PrependLocalAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.PrependLocalAs == nil {
		var v bool = true
		t.PrependLocalAs = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsNumber == nil {
		return nil, fmt.Errorf("nil value for key AsNumber")
	}

	return map[string]interface{}{
		"as-number": *t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/multihop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop struct {
	AdminState  E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	MaximumHops *uint8                      `path:"maximum-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaximumHops retrieves the value of the leaf MaximumHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumHops is set, it can
// safely use t.GetMaximumHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) GetMaximumHops() uint8 {
	if t == nil || t.MaximumHops == nil {
		return 0
	}
	return *t.MaximumHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector struct {
	Client    *bool                                                                                      `path:"client" module:"srl_nokia-bgp"`
	ClusterId SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union `path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) IsYANGGoStruct() {}

// GetClient retrieves the value of the leaf Client from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Client is set, it can
// safely use t.GetClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Client == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) GetClient() bool {
	if t == nil || t.Client == nil {
		return false
	}
	return *t.Client
}

// GetClusterId retrieves the value of the leaf ClusterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) GetClusterId() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union {
	if t == nil || t.ClusterId == nil {
		return nil
	}
	return t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity struct {
	Large    *bool `path:"large" module:"srl_nokia-bgp"`
	Standard *bool `path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) IsYANGGoStruct() {}

// GetLarge retrieves the value of the leaf Large from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute struct {
	ExportPolicy *string `path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast  *bool   `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast  *bool   `path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) IsYANGGoStruct() {
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4Unicast retrieves the value of the leaf Ipv4Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Unicast is set, it can
// safely use t.GetIpv4Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) GetIpv4Unicast() bool {
	if t == nil || t.Ipv4Unicast == nil {
		return false
	}
	return *t.Ipv4Unicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Unicast == nil {
		var v bool = false
		t.Ipv4Unicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = false
		t.Ipv6Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers struct {
	ConnectRetry                 *uint16 `path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime                     *uint16 `path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval            *uint16 `path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval *uint16 `path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetConnectRetry() uint16 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetHoldTime() uint16 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveInterval is set, it can
// safely use t.GetKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetKeepaliveInterval() uint16 {
	if t == nil || t.KeepaliveInterval == nil {
		return 0
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAdvertisementInterval is set, it can
// safely use t.GetMinimumAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetMinimumAdvertisementInterval() uint16 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 5
	}
	return *t.MinimumAdvertisementInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectRetry == nil {
		var v uint16 = 120
		t.ConnectRetry = &v
	}
	if t.HoldTime == nil {
		var v uint16 = 90
		t.HoldTime = &v
	}
	if t.MinimumAdvertisementInterval == nil {
		var v uint16 = 5
		t.MinimumAdvertisementInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag `path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bgp"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport struct {
	LocalAddress *string `path:"local-address" module:"srl_nokia-bgp"`
	MtuDiscovery *bool   `path:"mtu-discovery" module:"srl_nokia-bgp"`
	PassiveMode  *bool   `path:"passive-mode" module:"srl_nokia-bgp"`
	TcpMss       *uint16 `path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PassiveMode is set, it can
// safely use t.GetPassiveMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PassiveMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetTcpMss retrieves the value of the leaf TcpMss from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PassiveMode == nil {
		var v bool = false
		t.PassiveMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast struct {
	AddPaths              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths          `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState            E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops *bool                                                                                `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	Convergence           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	Multipath             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath         `path:"multipath" module:"srl_nokia-bgp"`
	NextHopResolution     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths{}
	return t.AddPaths
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence{}
	return t.Convergence
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetOrCreateMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath{}
	return t.Multipath
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.AdvertiseIpv6NextHops == nil {
		var v bool = false
		t.AdvertiseIpv6NextHops = &v
	}
	if t.ReceiveIpv6NextHops == nil {
		var v bool = false
		t.ReceiveIpv6NextHops = &v
	}
	t.AddPaths.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath struct {
	AllowMultipleAs *bool   `path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1 *uint32 `path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2 *uint32 `path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) IsYANGGoStruct() {
}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleAs is set, it can
// safely use t.GetAllowMultipleAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return true
	}
	return *t.AllowMultipleAs
}

// GetMaxPathsLevel_1 retrieves the value of the leaf MaxPathsLevel_1 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPathsLevel_1 is set, it can
// safely use t.GetMaxPathsLevel_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPathsLevel_1 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) GetMaxPathsLevel_1() uint32 {
	if t == nil || t.MaxPathsLevel_1 == nil {
		return 1
	}
	return *t.MaxPathsLevel_1
}

// GetMaxPathsLevel_2 retrieves the value of the leaf MaxPathsLevel_2 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPathsLevel_2 is set, it can
// safely use t.GetMaxPathsLevel_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPathsLevel_2 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) GetMaxPathsLevel_2() uint32 {
	if t == nil || t.MaxPathsLevel_2 == nil {
		return 1
	}
	return *t.MaxPathsLevel_2
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowMultipleAs == nil {
		var v bool = true
		t.AllowMultipleAs = &v
	}
	if t.MaxPathsLevel_1 == nil {
		var v uint32 = 1
		t.MaxPathsLevel_1 = &v
	}
	if t.MaxPathsLevel_2 == nil {
		var v uint32 = 1
		t.MaxPathsLevel_2 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                            `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                            `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast struct {
	AddPaths          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths          `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState        E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-bgp"`
	Convergence       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	Multipath         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath         `path:"multipath" module:"srl_nokia-bgp"`
	NextHopResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths{}
	return t.AddPaths
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence{}
	return t.Convergence
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetOrCreateMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath{}
	return t.Multipath
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	t.AddPaths.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath struct {
	AllowMultipleAs *bool   `path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1 *uint32 `path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2 *uint32 `path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) IsYANGGoStruct() {
}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleAs is set, it can
// safely use t.GetAllowMultipleAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return true
	}
	return *t.AllowMultipleAs
}

// GetMaxPathsLevel_1 retrieves the value of the leaf MaxPathsLevel_1 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPathsLevel_1 is set, it can
// safely use t.GetMaxPathsLevel_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPathsLevel_1 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) GetMaxPathsLevel_1() uint32 {
	if t == nil || t.MaxPathsLevel_1 == nil {
		return 1
	}
	return *t.MaxPathsLevel_1
}

// GetMaxPathsLevel_2 retrieves the value of the leaf MaxPathsLevel_2 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPathsLevel_2 is set, it can
// safely use t.GetMaxPathsLevel_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPathsLevel_2 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) GetMaxPathsLevel_2() uint32 {
	if t == nil || t.MaxPathsLevel_2 == nil {
		return 1
	}
	return *t.MaxPathsLevel_2
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowMultipleAs == nil {
		var v bool = true
		t.AllowMultipleAs = &v
	}
	if t.MaxPathsLevel_1 == nil {
		var v uint32 = 1
		t.MaxPathsLevel_1 = &v
	}
	if t.MaxPathsLevel_2 == nil {
		var v uint32 = 1
		t.MaxPathsLevel_2 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                            `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                            `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct {
	AdminState       E_SrlNokiaCommon_AdminState                                                        `path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions      `path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication     `path:"authentication" module:"srl_nokia-bgp"`
	Description      *string                                                                            `path:"description" module:"srl_nokia-bgp"`
	Evpn             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn               `path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy     *string                                                                            `path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection   `path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart    `path:"graceful-restart" module:"srl_nokia-bgp"`
	ImportPolicy     *string                                                                            `path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalAs          map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs `path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference  *uint32                                                                            `path:"local-preference" module:"srl_nokia-bgp"`
	Multihop         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop           `path:"multihop" module:"srl_nokia-bgp"`
	NextHopSelf      *bool                                                                              `path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAddress      *string                                                                            `path:"peer-address" module:"srl_nokia-bgp"`
	PeerAs           *uint32                                                                            `path:"peer-as" module:"srl_nokia-bgp"`
	PeerGroup        *string                                                                            `path:"peer-group" module:"srl_nokia-bgp"`
	RouteReflector   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector     `path:"route-reflector" module:"srl_nokia-bgp"`
	SendCommunity    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity      `path:"send-community" module:"srl_nokia-bgp"`
	SendDefaultRoute *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute   `path:"send-default-route" module:"srl_nokia-bgp"`
	Timers           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers             `path:"timers" module:"srl_nokia-bgp"`
	TraceOptions     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions       `path:"trace-options" module:"srl_nokia-bgp"`
	Transport        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport          `path:"transport" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) IsYANGGoStruct() {}

// NewLocalAs creates a new entry in the LocalAs list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) NewLocalAs(AsNumber uint32) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAs == nil {
		t.LocalAs = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAs", key)
	}

	t.LocalAs[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs{
		AsNumber: &AsNumber,
	}

	return t.LocalAs[key], nil
}

// RenameLocalAs renames an entry in the list LocalAs within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) RenameLocalAs(oldK, newK uint32) error {
	if _, ok := t.LocalAs[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalAs", newK)
	}

	e, ok := t.LocalAs[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalAs", oldK)
	}
	e.AsNumber = &newK

	t.LocalAs[newK] = e
	delete(t.LocalAs, oldK)
	return nil
}

// GetOrCreateLocalAs retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateLocalAs(
	AsNumber uint32,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs {
	key := AsNumber

	if v, ok := t.LocalAs[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalAs(AsNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalAs got unexpected error: %v", err))
	}
	return v
}

// GetLocalAs retrieves the value with the specified key from
// the LocalAs map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetLocalAs(AsNumber uint32) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs {
	if t == nil {
		return nil
	}

	key := AsNumber

	if lm, ok := t.LocalAs[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalAs deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) DeleteLocalAs(AsNumber uint32) {
	key := AsNumber

	delete(t.LocalAs, key)
}

// AppendLocalAs appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct to the
// list LocalAs of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) AppendLocalAs(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs,
) error {
	if v.AsNumber == nil {
		return fmt.Errorf("invalid nil key received for AsNumber")
	}

	key := *v.AsNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAs == nil {
		t.LocalAs = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs)
	}

	if _, ok := t.LocalAs[key]; ok {
		return fmt.Errorf("duplicate key for list LocalAs %v", key)
	}

	t.LocalAs[key] = v
	return nil
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication{}
	return t.Authentication
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn{}
	return t.Evpn
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateMultihop retrieves the value of the Multihop field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop {
	if t.Multihop != nil {
		return t.Multihop
	}
	t.Multihop = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop{}
	return t.Multihop
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateSendCommunity retrieves the value of the SendCommunity field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity {
	if t.SendCommunity != nil {
		return t.SendCommunity
	}
	t.SendCommunity = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity{}
	return t.SendCommunity
}

// GetOrCreateSendDefaultRoute retrieves the value of the SendDefaultRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute {
	if t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	t.SendDefaultRoute = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute{}
	return t.SendDefaultRoute
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport{}
	return t.Transport
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetMultihop returns the value of the Multihop struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Multihop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop {
	if t != nil && t.Multihop != nil {
		return t.Multihop
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetSendCommunity returns the value of the SendCommunity struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field SendCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity {
	if t != nil && t.SendCommunity != nil {
		return t.SendCommunity
	}
	return nil
}

// GetSendDefaultRoute returns the value of the SendDefaultRoute struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field SendDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute {
	if t != nil && t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPeerAddress retrieves the value of the leaf PeerAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAddress is set, it can
// safely use t.GetPeerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetPeerAddress() string {
	if t == nil || t.PeerAddress == nil {
		return ""
	}
	return *t.PeerAddress
}

// GetPeerAs retrieves the value of the leaf PeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.AsPathOptions.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.Multihop.PopulateDefaults()
	t.RouteReflector.PopulateDefaults()
	t.SendCommunity.PopulateDefaults()
	t.SendDefaultRoute.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.LocalAs {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerAddress == nil {
		return nil, fmt.Errorf("nil value for key PeerAddress")
	}

	return map[string]interface{}{
		"peer-address": *t.PeerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions struct {
	AllowOwnAs      *uint8                                                                                        `path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs `path:"remove-private-as" module:"srl_nokia-bgp" yangPresence:"true"`
	ReplacePeerAs   *bool                                                                                         `path:"replace-peer-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) IsYANGGoStruct() {
}

// GetOrCreateRemovePrivateAs retrieves the value of the RemovePrivateAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetOrCreateRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs {
	if t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	t.RemovePrivateAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs{}
	return t.RemovePrivateAs
}

// GetRemovePrivateAs returns the value of the RemovePrivateAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions. If the receiver or the field RemovePrivateAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs {
	if t != nil && t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	return nil
}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOwnAs is set, it can
// safely use t.GetAllowOwnAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOwnAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// GetReplacePeerAs retrieves the value of the leaf ReplacePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplacePeerAs is set, it can
// safely use t.GetReplacePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplacePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetReplacePeerAs() bool {
	if t == nil || t.ReplacePeerAs == nil {
		return false
	}
	return *t.ReplacePeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RemovePrivateAs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs *bool                                                                                               `path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly  *bool                                                                                               `path:"leading-only" module:"srl_nokia-bgp"`
	Mode         E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {
}

// GetIgnorePeerAs retrieves the value of the leaf IgnorePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnorePeerAs is set, it can
// safely use t.GetIgnorePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnorePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) GetIgnorePeerAs() bool {
	if t == nil || t.IgnorePeerAs == nil {
		return false
	}
	return *t.IgnorePeerAs
}

// GetLeadingOnly retrieves the value of the leaf LeadingOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeadingOnly is set, it can
// safely use t.GetLeadingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeadingOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) GetLeadingOnly() bool {
	if t == nil || t.LeadingOnly == nil {
		return false
	}
	return *t.LeadingOnly
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnorePeerAs == nil {
		var v bool = false
		t.IgnorePeerAs = &v
	}
	if t.LeadingOnly == nil {
		var v bool = false
		t.LeadingOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) IsYANGGoStruct() {
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn struct {
	AdminState            E_SrlNokiaCommon_AdminState                                                      `path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops *bool                                                                            `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/evpn/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection struct {
	EnableBfd    *bool `path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover *bool `path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) IsYANGGoStruct() {
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetFastFailover retrieves the value of the leaf FastFailover from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFailover is set, it can
// safely use t.GetFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFailover == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) GetFastFailover() bool {
	if t == nil || t.FastFailover == nil {
		return false
	}
	return *t.FastFailover
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart struct {
	AdminState      E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	StaleRoutesTime *uint16                     `path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) GetStaleRoutesTime() uint16 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast struct {
	AddPaths              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths    `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState            E_SrlNokiaCommon_AdminState                                                             `path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops *bool                                                                                   `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                   `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths{}
	return t.AddPaths
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddPaths.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	RestartTimer        *uint16 `path:"restart-timer" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTimer is set, it can
// safely use t.GetRestartTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) GetRestartTimer() uint16 {
	if t == nil || t.RestartTimer == nil {
		return 0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast struct {
	AddPaths    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths    `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState  E_SrlNokiaCommon_AdminState                                                             `path:"admin-state" module:"srl_nokia-bgp"`
	PrefixLimit *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths{}
	return t.AddPaths
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddPaths.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	RestartTimer        *uint16 `path:"restart-timer" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTimer is set, it can
// safely use t.GetRestartTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) GetRestartTimer() uint16 {
	if t == nil || t.RestartTimer == nil {
		return 0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs  *bool   `path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return false
	}
	return *t.PrependGlobalAs
}

// GetPrependLocalAs retrieves the value of the leaf PrependLocalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependLocalAs is set, it can
// safely use t.GetPrependLocalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependLocalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) GetPrependLocalAs() bool {
	if t == nil || t.PrependLocalAs == nil {
		return false
	}
	return *t.PrependLocalAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsNumber == nil {
		return nil, fmt.Errorf("nil value for key AsNumber")
	}

	return map[string]interface{}{
		"as-number": *t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/multihop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop struct {
	AdminState  E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	MaximumHops *uint8                      `path:"maximum-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaximumHops retrieves the value of the leaf MaximumHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumHops is set, it can
// safely use t.GetMaximumHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) GetMaximumHops() uint8 {
	if t == nil || t.MaximumHops == nil {
		return 0
	}
	return *t.MaximumHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector struct {
	Client    *bool                                                                                         `path:"client" module:"srl_nokia-bgp"`
	ClusterId SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union `path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) IsYANGGoStruct() {
}

// GetClient retrieves the value of the leaf Client from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Client is set, it can
// safely use t.GetClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Client == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) GetClient() bool {
	if t == nil || t.Client == nil {
		return false
	}
	return *t.Client
}

// GetClusterId retrieves the value of the leaf ClusterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) GetClusterId() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union {
	if t == nil || t.ClusterId == nil {
		return nil
	}
	return t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity struct {
	Large    *bool `path:"large" module:"srl_nokia-bgp"`
	Standard *bool `path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) IsYANGGoStruct() {
}

// GetLarge retrieves the value of the leaf Large from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute struct {
	ExportPolicy *string `path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast  *bool   `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast  *bool   `path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) IsYANGGoStruct() {
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4Unicast retrieves the value of the leaf Ipv4Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Unicast is set, it can
// safely use t.GetIpv4Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) GetIpv4Unicast() bool {
	if t == nil || t.Ipv4Unicast == nil {
		return false
	}
	return *t.Ipv4Unicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers struct {
	ConnectRetry                 *uint16 `path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime                     *uint16 `path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval            *uint16 `path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval *uint16 `path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetConnectRetry() uint16 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetHoldTime() uint16 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveInterval is set, it can
// safely use t.GetKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetKeepaliveInterval() uint16 {
	if t == nil || t.KeepaliveInterval == nil {
		return 0
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAdvertisementInterval is set, it can
// safely use t.GetMinimumAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetMinimumAdvertisementInterval() uint16 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 0
	}
	return *t.MinimumAdvertisementInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag `path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) IsYANGGoStruct() {
}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bgp"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport struct {
	LocalAddress *string `path:"local-address" module:"srl_nokia-bgp"`
	MtuDiscovery *bool   `path:"mtu-discovery" module:"srl_nokia-bgp"`
	PassiveMode  *bool   `path:"passive-mode" module:"srl_nokia-bgp"`
	TcpMss       *uint16 `path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PassiveMode is set, it can
// safely use t.GetPassiveMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PassiveMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetTcpMss retrieves the value of the leaf TcpMss from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference represents the /srl_nokia-network-instance/network-instance/protocols/bgp/preference YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference struct {
	Ebgp *uint8 `path:"ebgp" module:"srl_nokia-bgp"`
	Ibgp *uint8 `path:"ibgp" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) GetEbgp() uint8 {
	if t == nil || t.Ebgp == nil {
		return 170
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) GetIbgp() uint8 {
	if t == nil || t.Ibgp == nil {
		return 170
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint8 = 170
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint8 = 170
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-advertisement YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement struct {
	RapidWithdrawal   *bool `path:"rapid-withdrawal" module:"srl_nokia-bgp"`
	WaitForFibInstall *bool `path:"wait-for-fib-install" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) IsYANGGoStruct() {}

// GetRapidWithdrawal retrieves the value of the leaf RapidWithdrawal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidWithdrawal is set, it can
// safely use t.GetRapidWithdrawal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidWithdrawal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) GetRapidWithdrawal() bool {
	if t == nil || t.RapidWithdrawal == nil {
		return false
	}
	return *t.RapidWithdrawal
}

// GetWaitForFibInstall retrieves the value of the leaf WaitForFibInstall from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForFibInstall is set, it can
// safely use t.GetWaitForFibInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForFibInstall == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) GetWaitForFibInstall() bool {
	if t == nil || t.WaitForFibInstall == nil {
		return true
	}
	return *t.WaitForFibInstall
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RapidWithdrawal == nil {
		var v bool = false
		t.RapidWithdrawal = &v
	}
	if t.WaitForFibInstall == nil {
		var v bool = true
		t.WaitForFibInstall = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector struct {
	Client    *bool                                                                                `path:"client" module:"srl_nokia-bgp"`
	ClusterId SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union `path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) IsYANGGoStruct() {}

// GetClient retrieves the value of the leaf Client from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Client is set, it can
// safely use t.GetClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Client == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) GetClient() bool {
	if t == nil || t.Client == nil {
		return false
	}
	return *t.Client
}

// GetClusterId retrieves the value of the leaf ClusterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) GetClusterId() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union {
	if t == nil || t.ClusterId == nil {
		return nil
	}
	return t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Client == nil {
		var v bool = false
		t.Client = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity struct {
	Large    *bool `path:"large" module:"srl_nokia-bgp"`
	Standard *bool `path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) IsYANGGoStruct() {}

// GetLarge retrieves the value of the leaf Large from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) GetLarge() bool {
	if t == nil || t.Large == nil {
		return true
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return true
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Large == nil {
		var v bool = true
		t.Large = &v
	}
	if t.Standard == nil {
		var v bool = true
		t.Standard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag `path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bgp"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) IsYANGGoStruct() {}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport struct {
	MtuDiscovery            *bool   `path:"mtu-discovery" module:"srl_nokia-bgp"`
	SingleHopConnectedCheck *bool   `path:"single-hop-connected-check" module:"srl_nokia-bgp"`
	TcpMss                  *uint16 `path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) IsYANGGoStruct() {}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetSingleHopConnectedCheck retrieves the value of the leaf SingleHopConnectedCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleHopConnectedCheck is set, it can
// safely use t.GetSingleHopConnectedCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleHopConnectedCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) GetSingleHopConnectedCheck() bool {
	if t == nil || t.SingleHopConnectedCheck == nil {
		return true
	}
	return *t.SingleHopConnectedCheck
}

// GetTcpMss retrieves the value of the leaf TcpMss from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 1024
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MtuDiscovery == nil {
		var v bool = false
		t.MtuDiscovery = &v
	}
	if t.SingleHopConnectedCheck == nil {
		var v bool = true
		t.SingleHopConnectedCheck = &v
	}
	if t.TcpMss == nil {
		var v uint16 = 1024
		t.TcpMss = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected struct {
	TeDatabaseInstall *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall `path:"te-database-install" module:"srl_nokia-traffic-engineering" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) IsYANGGoStruct() {}

// GetOrCreateTeDatabaseInstall retrieves the value of the TeDatabaseInstall field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) GetOrCreateTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall {
	if t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	t.TeDatabaseInstall = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall{}
	return t.TeDatabaseInstall
}

// GetTeDatabaseInstall returns the value of the TeDatabaseInstall struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected. If the receiver or the field TeDatabaseInstall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) GetTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall {
	if t != nil && t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TeDatabaseInstall.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected/te-database-install YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall struct {
	BgpLs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs `path:"bgp-ls" module:"srl_nokia-traffic-engineering" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) IsYANGGoStruct() {
}

// GetOrCreateBgpLs retrieves the value of the BgpLs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) GetOrCreateBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs {
	if t.BgpLs != nil {
		return t.BgpLs
	}
	t.BgpLs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs{}
	return t.BgpLs
}

// GetBgpLs returns the value of the BgpLs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall. If the receiver or the field BgpLs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) GetBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs {
	if t != nil && t.BgpLs != nil {
		return t.BgpLs
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected/te-database-install/bgp-ls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs struct {
	BgpLsIdentifier *uint32 `path:"bgp-ls-identifier" module:"srl_nokia-traffic-engineering"`
	IgpIdentifier   *uint64 `path:"igp-identifier" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) IsYANGGoStruct() {
}

// GetBgpLsIdentifier retrieves the value of the leaf BgpLsIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsIdentifier is set, it can
// safely use t.GetBgpLsIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) GetBgpLsIdentifier() uint32 {
	if t == nil || t.BgpLsIdentifier == nil {
		return 0
	}
	return *t.BgpLsIdentifier
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi represents the /srl_nokia-network-instance/network-instance/protocols/gribi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi struct {
	AdminState                        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-gribi-server"`
	DefaultMetric                     *uint32                     `path:"default-metric" module:"srl_nokia-gribi-server"`
	DefaultPreference                 *uint8                      `path:"default-preference" module:"srl_nokia-gribi-server"`
	MaxEcmpHashBucketsPerNextHopGroup *uint8                      `path:"max-ecmp-hash-buckets-per-next-hop-group" module:"srl_nokia-gribi-server"`
	MaximumRoutes                     *uint32                     `path:"maximum-routes" module:"srl_nokia-gribi-server"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetDefaultPreference retrieves the value of the leaf DefaultPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPreference is set, it can
// safely use t.GetDefaultPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetDefaultPreference() uint8 {
	if t == nil || t.DefaultPreference == nil {
		return 6
	}
	return *t.DefaultPreference
}

// GetMaxEcmpHashBucketsPerNextHopGroup retrieves the value of the leaf MaxEcmpHashBucketsPerNextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpHashBucketsPerNextHopGroup is set, it can
// safely use t.GetMaxEcmpHashBucketsPerNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpHashBucketsPerNextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetMaxEcmpHashBucketsPerNextHopGroup() uint8 {
	if t == nil || t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		return 128
	}
	return *t.MaxEcmpHashBucketsPerNextHopGroup
}

// GetMaximumRoutes retrieves the value of the leaf MaximumRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumRoutes is set, it can
// safely use t.GetMaximumRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetMaximumRoutes() uint32 {
	if t == nil || t.MaximumRoutes == nil {
		return 0
	}
	return *t.MaximumRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.DefaultPreference == nil {
		var v uint8 = 6
		t.DefaultPreference = &v
	}
	if t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		var v uint8 = 128
		t.MaxEcmpHashBucketsPerNextHopGroup = &v
	}
	if t.MaximumRoutes == nil {
		var v uint32 = 0
		t.MaximumRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) ΛBelongingModule() string {
	return "srl_nokia-gribi-server"
}
