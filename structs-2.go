/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /root/go/pkg/mod/github.com/openconfig/ygot@v0.24.4/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/macsec/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-sr-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-reboot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp represents the /srl_nokia-network-instance/network-instance/protocols/igmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                  `path:"admin-state" module:"srl_nokia-igmp"`
	Interface               map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface `path:"interface" module:"srl_nokia-igmp"`
	QueryInterval           *uint32                                                                      `path:"query-interval" module:"srl_nokia-igmp"`
	QueryLastMemberInterval *uint32                                                                      `path:"query-last-member-interval" module:"srl_nokia-igmp"`
	QueryResponseInterval   *uint32                                                                      `path:"query-response-interval" module:"srl_nokia-igmp"`
	RobustCount             *uint32                                                                      `path:"robust-count" module:"srl_nokia-igmp"`
	Ssm                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm                  `path:"ssm" module:"srl_nokia-igmp"`
	TraceOptions            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions         `path:"trace-options" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) NewInterface(InterfaceName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetInterface(InterfaceName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm{}
	return t.Ssm
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions{}
	return t.TraceOptions
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.Ssm.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping struct {
	AdminState          E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-igmp-snooping"`
	EvpnProxy           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy            `path:"evpn-proxy" module:"srl_nokia-igmp-snooping"`
	Interface           map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface `path:"interface" module:"srl_nokia-igmp-snooping"`
	Querier             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier              `path:"querier" module:"srl_nokia-igmp-snooping"`
	QueryInterval       *uint32                                                                              `path:"query-interval" module:"srl_nokia-igmp-snooping"`
	QuerySourceAddress  *string                                                                              `path:"query-source-address" module:"srl_nokia-igmp-snooping"`
	ReportSourceAddress *string                                                                              `path:"report-source-address" module:"srl_nokia-igmp-snooping"`
	RobustCount         *uint32                                                                              `path:"robust-count" module:"srl_nokia-igmp-snooping"`
	TraceOptions        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions         `path:"trace-options" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateEvpnProxy retrieves the value of the EvpnProxy field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetOrCreateEvpnProxy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy {
	if t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	t.EvpnProxy = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy{}
	return t.EvpnProxy
}

// GetOrCreateQuerier retrieves the value of the Querier field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetOrCreateQuerier() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier {
	if t.Querier != nil {
		return t.Querier
	}
	t.Querier = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier{}
	return t.Querier
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions{}
	return t.TraceOptions
}

// GetEvpnProxy returns the value of the EvpnProxy struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the receiver or the field EvpnProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetEvpnProxy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy {
	if t != nil && t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	return nil
}

// GetQuerier returns the value of the Querier struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the receiver or the field Querier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetQuerier() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier {
	if t != nil && t.Querier != nil {
		return t.Querier
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.EvpnProxy.PopulateDefaults()
	t.Querier.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/evpn-proxy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_EvpnProxy) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface struct {
	FastLeave                 *bool                                                                                            `path:"fast-leave" module:"srl_nokia-igmp-snooping"`
	ImportPolicy              *string                                                                                          `path:"import-policy" module:"srl_nokia-igmp-snooping"`
	InterfaceName             *string                                                                                          `path:"interface-name" module:"srl_nokia-igmp-snooping"`
	MaximumNumberGroupSources *uint32                                                                                          `path:"maximum-number-group-sources" module:"srl_nokia-igmp-snooping"`
	MaximumNumberGroups       *uint32                                                                                          `path:"maximum-number-groups" module:"srl_nokia-igmp-snooping"`
	MaximumNumberSources      *uint32                                                                                          `path:"maximum-number-sources" module:"srl_nokia-igmp-snooping"`
	MrouterPort               *bool                                                                                            `path:"mrouter-port" module:"srl_nokia-igmp-snooping"`
	QueryInterval             *uint32                                                                                          `path:"query-interval" module:"srl_nokia-igmp-snooping"`
	QueryLastMemberInterval   *uint32                                                                                          `path:"query-last-member-interval" module:"srl_nokia-igmp-snooping"`
	QueryResponseInterval     *uint32                                                                                          `path:"query-response-interval" module:"srl_nokia-igmp-snooping"`
	RobustCount               *uint32                                                                                          `path:"robust-count" module:"srl_nokia-igmp-snooping"`
	RouterAlertCheck          *bool                                                                                            `path:"router-alert-check" module:"srl_nokia-igmp-snooping"`
	SendQueries               *bool                                                                                            `path:"send-queries" module:"srl_nokia-igmp-snooping"`
	StaticMembershipGroups    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-igmp-snooping"`
	Version                   *uint8                                                                                           `path:"version" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) IsYANGGoStruct() {}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 3
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == nil {
		var v uint8 = 3
		t.Version = &v
	}
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group `path:"group" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) NewGroup(
	Group string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group)
	}

	key := Group

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group{
		Group: &Group,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Group = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) GetOrCreateGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group {
	key := Group

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Group)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) GetGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group {
	if t == nil {
		return nil
	}

	key := Group

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) DeleteGroup(Group string) {
	key := Group

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group,
) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key received for Group")
	}

	key := *v.Group

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface/static-membership-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct {
	Group  *string                                                                                                                  `path:"group" module:"srl_nokia-igmp-snooping"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source `path:"source" module:"srl_nokia-igmp-snooping"`
	Starg  YANGEmpty                                                                                                                `path:"starg" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroup retrieves the value of the leaf Group from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"group": *t.Group,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface/static-membership-groups/group/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/querier YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Querier) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace `path:"trace" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) IsYANGGoStruct() {
}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace struct {
	Packet *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-igmp-snooping" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct {
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-igmp-snooping"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Modifier            `path:"modifier" module:"srl_nokia-igmp-snooping"`
	SourceMac map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac `path:"source-mac" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSourceMac creates a new entry in the SourceMac list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) NewSourceMac(
	SourceMac string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	key := SourceMac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceMac", key)
	}

	t.SourceMac[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac{
		SourceMac: &SourceMac,
	}

	return t.SourceMac[key], nil
}

// RenameSourceMac renames an entry in the list SourceMac within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) RenameSourceMac(oldK, newK string) error {
	if _, ok := t.SourceMac[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceMac", newK)
	}

	e, ok := t.SourceMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceMac", oldK)
	}
	e.SourceMac = &newK

	t.SourceMac[newK] = e
	delete(t.SourceMac, oldK)
	return nil
}

// GetOrCreateSourceMac retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetOrCreateSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac {
	key := SourceMac

	if v, ok := t.SourceMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceMac(SourceMac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceMac got unexpected error: %v", err))
	}
	return v
}

// GetSourceMac retrieves the value with the specified key from
// the SourceMac map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac {
	if t == nil {
		return nil
	}

	key := SourceMac

	if lm, ok := t.SourceMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceMac deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) DeleteSourceMac(SourceMac string) {
	key := SourceMac

	delete(t.SourceMac, key)
}

// AppendSourceMac appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac struct to the
// list SourceMac of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) AppendSourceMac(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac,
) error {
	if v.SourceMac == nil {
		return fmt.Errorf("invalid nil key received for SourceMac")
	}

	key := *v.SourceMac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	if _, ok := t.SourceMac[key]; ok {
		return fmt.Errorf("duplicate key for list SourceMac %v", key)
	}

	t.SourceMac[key] = v
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceMac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface struct {
	InterfaceName *string `path:"interface-name" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace/packet/source-mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac struct {
	SourceMac *string `path:"source-mac" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) IsYANGGoStruct() {
}

// GetSourceMac retrieves the value of the leaf SourceMac from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceMac == nil {
		return nil, fmt.Errorf("nil value for key SourceMac")
	}

	return map[string]interface{}{
		"source-mac": *t.SourceMac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                              `path:"admin-state" module:"srl_nokia-igmp"`
	ImportPolicy            *string                                                                                  `path:"import-policy" module:"srl_nokia-igmp"`
	InterfaceName           *string                                                                                  `path:"interface-name" module:"srl_nokia-igmp"`
	MaxGroupSources         *uint32                                                                                  `path:"max-group-sources" module:"srl_nokia-igmp"`
	MaxGroups               *uint32                                                                                  `path:"max-groups" module:"srl_nokia-igmp"`
	MaxSources              *uint32                                                                                  `path:"max-sources" module:"srl_nokia-igmp"`
	QueryInterval           *uint32                                                                                  `path:"query-interval" module:"srl_nokia-igmp"`
	QueryLastMemberInterval *uint32                                                                                  `path:"query-last-member-interval" module:"srl_nokia-igmp"`
	QueryResponseInterval   *uint32                                                                                  `path:"query-response-interval" module:"srl_nokia-igmp"`
	RouterAlertCheck        *bool                                                                                    `path:"router-alert-check" module:"srl_nokia-igmp"`
	Ssm                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm                    `path:"ssm" module:"srl_nokia-igmp"`
	StaticMembershipGroups  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-igmp"`
	SubnetCheck             *bool                                                                                    `path:"subnet-check" module:"srl_nokia-igmp"`
	Version                 *uint8                                                                                   `path:"version" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) IsYANGGoStruct() {}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm{}
	return t.Ssm
}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxGroupSources retrieves the value of the leaf MaxGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroupSources is set, it can
// safely use t.GetMaxGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetMaxGroupSources() uint32 {
	if t == nil || t.MaxGroupSources == nil {
		return 0
	}
	return *t.MaxGroupSources
}

// GetMaxGroups retrieves the value of the leaf MaxGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroups is set, it can
// safely use t.GetMaxGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetMaxGroups() uint32 {
	if t == nil || t.MaxGroups == nil {
		return 0
	}
	return *t.MaxGroups
}

// GetMaxSources retrieves the value of the leaf MaxSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSources is set, it can
// safely use t.GetMaxSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetMaxSources() uint32 {
	if t == nil || t.MaxSources == nil {
		return 0
	}
	return *t.MaxSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 3
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == nil {
		var v uint8 = 3
		t.Version = &v
	}
	t.Ssm.PopulateDefaults()
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings `path:"mappings" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                                     `path:"end" module:"srl_nokia-igmp"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-igmp"`
	Start  *string                                                                                                     `path:"start" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange `path:"group-range" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct {
	End    *string                                                                                                               `path:"end" module:"srl_nokia-igmp"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source `path:"source" module:"srl_nokia-igmp"`
	Starg  YANGEmpty                                                                                                             `path:"starg" module:"srl_nokia-igmp"`
	Start  *string                                                                                                               `path:"start" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings `path:"mappings" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                           `path:"end" module:"srl_nokia-igmp"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-igmp"`
	Start  *string                                                                                           `path:"start" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace `path:"trace" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface `path:"interface" module:"srl_nokia-igmp" yangPresence:"true"`
	Packet    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet    `path:"packet" module:"srl_nokia-igmp" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) IsYANGGoStruct() {}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface{}
	return t.Interface
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interface.PopulateDefaults()
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-igmp"`
	Name *string   `path:"name" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-igmp" yangPresence:"true"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-igmp"`
	Type      E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface{}
	return t.Interface
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Modifier == 0 {
		t.Modifier = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	t.Interface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-igmp"`
	Name *string   `path:"name" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis represents the /srl_nokia-network-instance/network-instance/protocols/isis YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis struct {
	DynamicLabelBlock *string                                                                     `path:"dynamic-label-block" module:"srl_nokia-isis"`
	Instance          map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance `path:"instance" module:"srl_nokia-isis"`
	NonStopForwarding *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding   `path:"non-stop-forwarding" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) NewInstance(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance{
		Name: &Name,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) RenameInstance(oldK, newK string) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.Name = &newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetOrCreateInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance {
	key := Name

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) DeleteInstance(Name string) {
	key := Name

	delete(t.Instance, key)
}

// AppendInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct to the
// list Instance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) AppendInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// GetOrCreateNonStopForwarding retrieves the value of the NonStopForwarding field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetOrCreateNonStopForwarding() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding {
	if t.NonStopForwarding != nil {
		return t.NonStopForwarding
	}
	t.NonStopForwarding = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding{}
	return t.NonStopForwarding
}

// GetNonStopForwarding returns the value of the NonStopForwarding struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the receiver or the field NonStopForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetNonStopForwarding() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding {
	if t != nil && t.NonStopForwarding != nil {
		return t.NonStopForwarding
	}
	return nil
}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonStopForwarding.PopulateDefaults()
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct {
	AdminState                    E_SrlNokiaCommon_AdminState                                                                    `path:"admin-state" module:"srl_nokia-isis"`
	AttachedBit                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit                   `path:"attached-bit" module:"srl_nokia-isis"`
	Authentication                *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication                `path:"authentication" module:"srl_nokia-isis"`
	AutoCost                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost                      `path:"auto-cost" module:"srl_nokia-isis"`
	EnableCsnpOnP2PLinks          *bool                                                                                          `path:"enable-csnp-on-p2p-links" module:"srl_nokia-isis"`
	ExportPolicy                  *string                                                                                        `path:"export-policy" module:"srl_nokia-isis"`
	GracefulRestart               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart               `path:"graceful-restart" module:"srl_nokia-isis"`
	HelloPadding                  E_SrlNokiaIsis_IsisHelloPaddingType                                                            `path:"hello-padding" module:"srl_nokia-isis"`
	IidTlv                        *bool                                                                                          `path:"iid-tlv" module:"srl_nokia-isis"`
	InstanceId                    *uint64                                                                                        `path:"instance-id" module:"srl_nokia-isis"`
	InterLevelPropagationPolicies *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies `path:"inter-level-propagation-policies" module:"srl_nokia-isis"`
	Interface                     map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface          `path:"interface" module:"srl_nokia-isis"`
	Ipv4Unicast                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast                   `path:"ipv4-unicast" module:"srl_nokia-isis"`
	Ipv6Unicast                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast                   `path:"ipv6-unicast" module:"srl_nokia-isis"`
	LdpSynchronization            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization            `path:"ldp-synchronization" module:"srl_nokia-isis" yangPresence:"true"`
	Level                         map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level               `path:"level" module:"srl_nokia-isis"`
	LevelCapability               E_SrlNokiaIsis_IsisLevel                                                                       `path:"level-capability" module:"srl_nokia-isis"`
	MaxEcmpPaths                  *uint8                                                                                         `path:"max-ecmp-paths" module:"srl_nokia-isis"`
	Name                          *string                                                                                        `path:"name" module:"srl_nokia-isis"`
	Net                           []string                                                                                       `path:"net" module:"srl_nokia-isis"`
	Overload                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload                      `path:"overload" module:"srl_nokia-isis"`
	PoiTlv                        *bool                                                                                          `path:"poi-tlv" module:"srl_nokia-isis"`
	SegmentRouting                *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting                `path:"segment-routing" module:"srl_nokia-isis"`
	TeDatabaseInstall             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall             `path:"te-database-install" module:"srl_nokia-isis" yangPresence:"true"`
	Timers                        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers                        `path:"timers" module:"srl_nokia-isis"`
	TraceOptions                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions                  `path:"trace-options" module:"srl_nokia-isis"`
	TrafficEngineering            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering            `path:"traffic-engineering" module:"srl_nokia-isis"`
	Transport                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport                     `path:"transport" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) NewLevel(
	LevelNumber uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level{
		LevelNumber: &LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) RenameLevel(oldK, newK uint8) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level {
	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level {
	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) DeleteLevel(LevelNumber uint8) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level struct to the
// list Level of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) AppendLevel(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level,
) error {
	if v.LevelNumber == nil {
		return fmt.Errorf("invalid nil key received for LevelNumber")
	}

	key := *v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateAttachedBit retrieves the value of the AttachedBit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateAttachedBit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit {
	if t.AttachedBit != nil {
		return t.AttachedBit
	}
	t.AttachedBit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit{}
	return t.AttachedBit
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication{}
	return t.Authentication
}

// GetOrCreateAutoCost retrieves the value of the AutoCost field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateAutoCost() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost {
	if t.AutoCost != nil {
		return t.AutoCost
	}
	t.AutoCost = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost{}
	return t.AutoCost
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateInterLevelPropagationPolicies retrieves the value of the InterLevelPropagationPolicies field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateInterLevelPropagationPolicies() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies {
	if t.InterLevelPropagationPolicies != nil {
		return t.InterLevelPropagationPolicies
	}
	t.InterLevelPropagationPolicies = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies{}
	return t.InterLevelPropagationPolicies
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload{}
	return t.Overload
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTeDatabaseInstall retrieves the value of the TeDatabaseInstall field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall {
	if t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	t.TeDatabaseInstall = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall{}
	return t.TeDatabaseInstall
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTrafficEngineering retrieves the value of the TrafficEngineering field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering {
	if t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	t.TrafficEngineering = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering{}
	return t.TrafficEngineering
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport{}
	return t.Transport
}

// GetAttachedBit returns the value of the AttachedBit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field AttachedBit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAttachedBit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit {
	if t != nil && t.AttachedBit != nil {
		return t.AttachedBit
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAutoCost returns the value of the AutoCost struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field AutoCost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAutoCost() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost {
	if t != nil && t.AutoCost != nil {
		return t.AutoCost
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetInterLevelPropagationPolicies returns the value of the InterLevelPropagationPolicies struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field InterLevelPropagationPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetInterLevelPropagationPolicies() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies {
	if t != nil && t.InterLevelPropagationPolicies != nil {
		return t.InterLevelPropagationPolicies
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTeDatabaseInstall returns the value of the TeDatabaseInstall struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field TeDatabaseInstall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall {
	if t != nil && t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTrafficEngineering returns the value of the TrafficEngineering struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field TrafficEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering {
	if t != nil && t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetEnableCsnpOnP2PLinks retrieves the value of the leaf EnableCsnpOnP2PLinks from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableCsnpOnP2PLinks is set, it can
// safely use t.GetEnableCsnpOnP2PLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableCsnpOnP2PLinks == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetEnableCsnpOnP2PLinks() bool {
	if t == nil || t.EnableCsnpOnP2PLinks == nil {
		return true
	}
	return *t.EnableCsnpOnP2PLinks
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetHelloPadding() E_SrlNokiaIsis_IsisHelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return SrlNokiaIsis_IsisHelloPaddingType_disable
	}
	return t.HelloPadding
}

// GetIidTlv retrieves the value of the leaf IidTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IidTlv is set, it can
// safely use t.GetIidTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IidTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetIidTlv() bool {
	if t == nil || t.IidTlv == nil {
		return false
	}
	return *t.IidTlv
}

// GetInstanceId retrieves the value of the leaf InstanceId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetInstanceId() uint64 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLevelCapability() E_SrlNokiaIsis_IsisLevel {
	if t == nil || t.LevelCapability == 0 {
		return SrlNokiaIsis_IsisLevel_L2
	}
	return t.LevelCapability
}

// GetMaxEcmpPaths retrieves the value of the leaf MaxEcmpPaths from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpPaths is set, it can
// safely use t.GetMaxEcmpPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetMaxEcmpPaths() uint8 {
	if t == nil || t.MaxEcmpPaths == nil {
		return 1
	}
	return *t.MaxEcmpPaths
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNet retrieves the value of the leaf Net from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Net is set, it can
// safely use t.GetNet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Net == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetNet() []string {
	if t == nil || t.Net == nil {
		return nil
	}
	return t.Net
}

// GetPoiTlv retrieves the value of the leaf PoiTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoiTlv is set, it can
// safely use t.GetPoiTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoiTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetPoiTlv() bool {
	if t == nil || t.PoiTlv == nil {
		return false
	}
	return *t.PoiTlv
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.EnableCsnpOnP2PLinks == nil {
		var v bool = true
		t.EnableCsnpOnP2PLinks = &v
	}
	if t.HelloPadding == 0 {
		t.HelloPadding = SrlNokiaIsis_IsisHelloPaddingType_disable
	}
	if t.IidTlv == nil {
		var v bool = false
		t.IidTlv = &v
	}
	if t.InstanceId == nil {
		var v uint64 = 0
		t.InstanceId = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = SrlNokiaIsis_IsisLevel_L2
	}
	if t.MaxEcmpPaths == nil {
		var v uint8 = 1
		t.MaxEcmpPaths = &v
	}
	if t.PoiTlv == nil {
		var v bool = false
		t.PoiTlv = &v
	}
	t.AttachedBit.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.AutoCost.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.InterLevelPropagationPolicies.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.TeDatabaseInstall.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.TrafficEngineering.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/attached-bit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit struct {
	Ignore   *bool `path:"ignore" module:"srl_nokia-isis"`
	Suppress *bool `path:"suppress" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) IsYANGGoStruct() {
}

// GetIgnore retrieves the value of the leaf Ignore from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ignore is set, it can
// safely use t.GetIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ignore == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) GetIgnore() bool {
	if t == nil || t.Ignore == nil {
		return false
	}
	return *t.Ignore
}

// GetSuppress retrieves the value of the leaf Suppress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suppress is set, it can
// safely use t.GetSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suppress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ignore == nil {
		var v bool = false
		t.Ignore = &v
	}
	if t.Suppress == nil {
		var v bool = false
		t.Suppress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication struct {
	CsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication  `path:"csnp-authentication" module:"srl_nokia-isis"`
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                             `path:"keychain" module:"srl_nokia-isis"`
	LspAuthentication   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication   `path:"lsp-authentication" module:"srl_nokia-isis"`
	PsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication  `path:"psnp-authentication" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) IsYANGGoStruct() {
}

// GetOrCreateCsnpAuthentication retrieves the value of the CsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication {
	if t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	t.CsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication{}
	return t.CsnpAuthentication
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key{}
	return t.Key
}

// GetOrCreateLspAuthentication retrieves the value of the LspAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication {
	if t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	t.LspAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication{}
	return t.LspAuthentication
}

// GetOrCreatePsnpAuthentication retrieves the value of the PsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreatePsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication {
	if t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	t.PsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication{}
	return t.PsnpAuthentication
}

// GetCsnpAuthentication returns the value of the CsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field CsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication {
	if t != nil && t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	return nil
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetLspAuthentication returns the value of the LspAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field LspAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication {
	if t != nil && t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	return nil
}

// GetPsnpAuthentication returns the value of the PsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field PsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetPsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication {
	if t != nil && t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CsnpAuthentication.PopulateDefaults()
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
	t.LspAuthentication.PopulateDefaults()
	t.PsnpAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/csnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/lsp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/psnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/auto-cost YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost struct {
	ReferenceBandwidth *uint64 `path:"reference-bandwidth" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) IsYANGGoStruct() {}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 0
	}
	return *t.ReferenceBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart struct {
	AcceptableDuration *uint32 `path:"acceptable-duration" module:"srl_nokia-isis"`
	HelperMode         *bool   `path:"helper-mode" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) IsYANGGoStruct() {
}

// GetAcceptableDuration retrieves the value of the leaf AcceptableDuration from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptableDuration is set, it can
// safely use t.GetAcceptableDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptableDuration == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) GetAcceptableDuration() uint32 {
	if t == nil || t.AcceptableDuration == nil {
		return 60
	}
	return *t.AcceptableDuration
}

// GetHelperMode retrieves the value of the leaf HelperMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return false
	}
	return *t.HelperMode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptableDuration == nil {
		var v uint32 = 60
		t.AcceptableDuration = &v
	}
	if t.HelperMode == nil {
		var v bool = false
		t.HelperMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/inter-level-propagation-policies YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies struct {
	Level1ToLevel2 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 `path:"level1-to-level2" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) IsYANGGoStruct() {
}

// GetOrCreateLevel1ToLevel2 retrieves the value of the Level1ToLevel2 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) GetOrCreateLevel1ToLevel2() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 {
	if t.Level1ToLevel2 != nil {
		return t.Level1ToLevel2
	}
	t.Level1ToLevel2 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2{}
	return t.Level1ToLevel2
}

// GetLevel1ToLevel2 returns the value of the Level1ToLevel2 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies. If the receiver or the field Level1ToLevel2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) GetLevel1ToLevel2() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 {
	if t != nil && t.Level1ToLevel2 != nil {
		return t.Level1ToLevel2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Level1ToLevel2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 struct {
	SummaryAddress map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress `path:"summary-address" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) IsYANGGoStruct() {
}

// NewSummaryAddress creates a new entry in the SummaryAddress list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) NewSummaryAddress(
	IpPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryAddress", key)
	}

	t.SummaryAddress[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress{
		IpPrefix: &IpPrefix,
	}

	return t.SummaryAddress[key], nil
}

// RenameSummaryAddress renames an entry in the list SummaryAddress within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) RenameSummaryAddress(oldK, newK string) error {
	if _, ok := t.SummaryAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryAddress", newK)
	}

	e, ok := t.SummaryAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryAddress", oldK)
	}
	e.IpPrefix = &newK

	t.SummaryAddress[newK] = e
	delete(t.SummaryAddress, oldK)
	return nil
}

// GetOrCreateSummaryAddress retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) GetOrCreateSummaryAddress(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress {
	key := IpPrefix

	if v, ok := t.SummaryAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryAddress(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryAddress got unexpected error: %v", err))
	}
	return v
}

// GetSummaryAddress retrieves the value with the specified key from
// the SummaryAddress map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) GetSummaryAddress(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress {
	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SummaryAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSummaryAddress deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) DeleteSummaryAddress(IpPrefix string) {
	key := IpPrefix

	delete(t.SummaryAddress, key)
}

// AppendSummaryAddress appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress struct to the
// list SummaryAddress of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) AppendSummaryAddress(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress)
	}

	if _, ok := t.SummaryAddress[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryAddress %v", key)
	}

	t.SummaryAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SummaryAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress struct {
	IpPrefix *string `path:"ip-prefix" module:"srl_nokia-isis"`
	RouteTag *uint32 `path:"route-tag" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRouteTag retrieves the value of the leaf RouteTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct {
	AdminState         E_SrlNokiaCommon_AdminState                                                                   `path:"admin-state" module:"srl_nokia-isis"`
	Authentication     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication     `path:"authentication" module:"srl_nokia-isis"`
	CircuitType        E_SrlNokiaIsis_IsisCircuitType                                                                `path:"circuit-type" module:"srl_nokia-isis"`
	HelloPadding       E_SrlNokiaIsis_IsisHelloPaddingType                                                           `path:"hello-padding" module:"srl_nokia-isis"`
	InterfaceName      *string                                                                                       `path:"interface-name" module:"srl_nokia-isis"`
	Ipv4Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-isis"`
	Ipv6Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-isis"`
	LdpSynchronization *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization `path:"ldp-synchronization" module:"srl_nokia-isis"`
	Level              map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level    `path:"level" module:"srl_nokia-isis"`
	Passive            *bool                                                                                         `path:"passive" module:"srl_nokia-isis"`
	SegmentRouting     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting     `path:"segment-routing" module:"srl_nokia-isis" yangPresence:"true"`
	Timers             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers             `path:"timers" module:"srl_nokia-isis"`
	TraceOptions       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions       `path:"trace-options" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) NewLevel(
	LevelNumber uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level{
		LevelNumber: &LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) RenameLevel(oldK, newK uint8) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level {
	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level {
	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) DeleteLevel(LevelNumber uint8) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level struct to the
// list Level of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) AppendLevel(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level,
) error {
	if v.LevelNumber == nil {
		return fmt.Errorf("invalid nil key received for LevelNumber")
	}

	key := *v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions{}
	return t.TraceOptions
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetCircuitType retrieves the value of the leaf CircuitType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitType is set, it can
// safely use t.GetCircuitType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetCircuitType() E_SrlNokiaIsis_IsisCircuitType {
	if t == nil || t.CircuitType == 0 {
		return 0
	}
	return t.CircuitType
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetHelloPadding() E_SrlNokiaIsis_IsisHelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return SrlNokiaIsis_IsisHelloPaddingType_disable
	}
	return t.HelloPadding
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetPassive retrieves the value of the leaf Passive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.HelloPadding == 0 {
		t.HelloPadding = SrlNokiaIsis_IsisHelloPaddingType_disable
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	t.Authentication.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication struct {
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                                       `path:"keychain" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) IsYANGGoStruct() {
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key{}
	return t.Key
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	EnableBfd     *bool                       `path:"enable-bfd" module:"srl_nokia-isis"`
	IncludeBfdTlv *bool                       `path:"include-bfd-tlv" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	EnableBfd     *bool                       `path:"enable-bfd" module:"srl_nokia-isis"`
	IncludeBfdTlv *bool                       `path:"include-bfd-tlv" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization struct {
	Disable       YANGEmpty `path:"disable" module:"srl_nokia-isis"`
	EndOfLib      *bool     `path:"end-of-lib" module:"srl_nokia-isis"`
	HoldDownTimer *uint16   `path:"hold-down-timer" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) IsYANGGoStruct() {
}

// GetDisable retrieves the value of the leaf Disable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Disable is set, it can
// safely use t.GetDisable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Disable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) GetDisable() YANGEmpty {
	if t == nil || t.Disable == false {
		return false
	}
	return t.Disable
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level struct {
	Authentication    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication `path:"authentication" module:"srl_nokia-isis"`
	Disable           *bool                                                                                           `path:"disable" module:"srl_nokia-isis"`
	Ipv6UnicastMetric *uint32                                                                                         `path:"ipv6-unicast-metric" module:"srl_nokia-isis"`
	LevelNumber       *uint8                                                                                          `path:"level-number" module:"srl_nokia-isis"`
	Metric            *uint32                                                                                         `path:"metric" module:"srl_nokia-isis"`
	Priority          *uint8                                                                                          `path:"priority" module:"srl_nokia-isis"`
	Timers            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers         `path:"timers" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication{}
	return t.Authentication
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers{}
	return t.Timers
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetDisable retrieves the value of the leaf Disable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Disable is set, it can
// safely use t.GetDisable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Disable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetDisable() bool {
	if t == nil || t.Disable == nil {
		return false
	}
	return *t.Disable
}

// GetIpv6UnicastMetric retrieves the value of the leaf Ipv6UnicastMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetric is set, it can
// safely use t.GetIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetIpv6UnicastMetric() uint32 {
	if t == nil || t.Ipv6UnicastMetric == nil {
		return 0
	}
	return *t.Ipv6UnicastMetric
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetLevelNumber() uint8 {
	if t == nil || t.LevelNumber == nil {
		return 0
	}
	return *t.LevelNumber
}

// GetMetric retrieves the value of the leaf Metric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPriority retrieves the value of the leaf Priority from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 64
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Disable == nil {
		var v bool = false
		t.Disable = &v
	}
	if t.Priority == nil {
		var v uint8 = 64
		t.Priority = &v
	}
	t.Authentication.PopulateDefaults()
	t.Timers.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelNumber == nil {
		return nil, fmt.Errorf("nil value for key LevelNumber")
	}

	return map[string]interface{}{
		"level-number": *t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication struct {
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                                             `path:"keychain" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) IsYANGGoStruct() {
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key{}
	return t.Key
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers struct {
	HelloInterval   *uint32 `path:"hello-interval" module:"srl_nokia-isis"`
	HelloMultiplier *uint8  `path:"hello-multiplier" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) IsYANGGoStruct() {
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) GetHelloMultiplier() uint8 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint8 = 3
		t.HelloMultiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting struct {
	Mpls *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls `path:"mpls" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) IsYANGGoStruct() {
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls struct {
	Ipv4AdjacencySid *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid `path:"ipv4-adjacency-sid" module:"srl_nokia-isis" yangPresence:"true"`
	Ipv4NodeSid      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid      `path:"ipv4-node-sid" module:"srl_nokia-isis" yangPresence:"true"`
	Ipv6AdjacencySid *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid `path:"ipv6-adjacency-sid" module:"srl_nokia-isis" yangPresence:"true"`
	Ipv6NodeSid      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid      `path:"ipv6-node-sid" module:"srl_nokia-isis" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) IsYANGGoStruct() {
}

// GetOrCreateIpv4AdjacencySid retrieves the value of the Ipv4AdjacencySid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv4AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid {
	if t.Ipv4AdjacencySid != nil {
		return t.Ipv4AdjacencySid
	}
	t.Ipv4AdjacencySid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid{}
	return t.Ipv4AdjacencySid
}

// GetOrCreateIpv4NodeSid retrieves the value of the Ipv4NodeSid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv4NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid {
	if t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	t.Ipv4NodeSid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid{}
	return t.Ipv4NodeSid
}

// GetOrCreateIpv6AdjacencySid retrieves the value of the Ipv6AdjacencySid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv6AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid {
	if t.Ipv6AdjacencySid != nil {
		return t.Ipv6AdjacencySid
	}
	t.Ipv6AdjacencySid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid{}
	return t.Ipv6AdjacencySid
}

// GetOrCreateIpv6NodeSid retrieves the value of the Ipv6NodeSid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv6NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid {
	if t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	t.Ipv6NodeSid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid{}
	return t.Ipv6NodeSid
}

// GetIpv4AdjacencySid returns the value of the Ipv4AdjacencySid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv4AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv4AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid {
	if t != nil && t.Ipv4AdjacencySid != nil {
		return t.Ipv4AdjacencySid
	}
	return nil
}

// GetIpv4NodeSid returns the value of the Ipv4NodeSid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv4NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv4NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid {
	if t != nil && t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	return nil
}

// GetIpv6AdjacencySid returns the value of the Ipv6AdjacencySid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv6AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv6AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid {
	if t != nil && t.Ipv6AdjacencySid != nil {
		return t.Ipv6AdjacencySid
	}
	return nil
}

// GetIpv6NodeSid returns the value of the Ipv6NodeSid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv6NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv6NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid {
	if t != nil && t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4AdjacencySid.PopulateDefaults()
	t.Ipv4NodeSid.PopulateDefaults()
	t.Ipv6AdjacencySid.PopulateDefaults()
	t.Ipv6NodeSid.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid struct {
	Assignment E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment `path:"assignment" module:"srl_nokia-isis"`
	Static     *uint32                                                                                                                     `path:"static" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) IsYANGGoStruct() {
}

// GetAssignment retrieves the value of the leaf Assignment from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Assignment is set, it can
// safely use t.GetAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Assignment == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) GetAssignment() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment {
	if t == nil || t.Assignment == 0 {
		return 0
	}
	return t.Assignment
}

// GetStatic retrieves the value of the leaf Static from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) GetStatic() uint32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid struct {
	Index *uint32 `path:"index" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid struct {
	Assignment E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment `path:"assignment" module:"srl_nokia-isis"`
	Static     *uint32                                                                                                                     `path:"static" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) IsYANGGoStruct() {
}

// GetAssignment retrieves the value of the leaf Assignment from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Assignment is set, it can
// safely use t.GetAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Assignment == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) GetAssignment() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment {
	if t == nil || t.Assignment == 0 {
		return 0
	}
	return t.Assignment
}

// GetStatic retrieves the value of the leaf Static from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) GetStatic() uint32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid struct {
	Index *uint32 `path:"index" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers struct {
	CsnpInterval      *uint16 `path:"csnp-interval" module:"srl_nokia-isis"`
	LspPacingInterval *uint64 `path:"lsp-pacing-interval" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) IsYANGGoStruct() {
}

// GetCsnpInterval retrieves the value of the leaf CsnpInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpInterval is set, it can
// safely use t.GetCsnpInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) GetCsnpInterval() uint16 {
	if t == nil || t.CsnpInterval == nil {
		return 10
	}
	return *t.CsnpInterval
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) GetLspPacingInterval() uint64 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CsnpInterval == nil {
		var v uint16 = 10
		t.CsnpInterval = &v
	}
	if t.LspPacingInterval == nil {
		var v uint64 = 100
		t.LspPacingInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions struct {
	Trace []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions_Trace `path:"trace" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) GetTrace() []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	MultiTopology *bool                       `path:"multi-topology" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetMultiTopology retrieves the value of the leaf MultiTopology from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiTopology is set, it can
// safely use t.GetMultiTopology() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiTopology == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) GetMultiTopology() bool {
	if t == nil || t.MultiTopology == nil {
		return false
	}
	return *t.MultiTopology
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.MultiTopology == nil {
		var v bool = false
		t.MultiTopology = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization struct {
	EndOfLib      *bool   `path:"end-of-lib" module:"srl_nokia-isis"`
	HoldDownTimer *uint16 `path:"hold-down-timer" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) IsYANGGoStruct() {
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 60
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndOfLib == nil {
		var v bool = false
		t.EndOfLib = &v
	}
	if t.HoldDownTimer == nil {
		var v uint16 = 60
		t.HoldDownTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level struct {
	Authentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication  `path:"authentication" module:"srl_nokia-isis"`
	BgpLsExclude    *bool                                                                                  `path:"bgp-ls-exclude" module:"srl_nokia-isis"`
	LevelNumber     *uint8                                                                                 `path:"level-number" module:"srl_nokia-isis"`
	MetricStyle     E_SrlNokiaIsis_IsisMetricStyle                                                         `path:"metric-style" module:"srl_nokia-isis"`
	RoutePreference *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference `path:"route-preference" module:"srl_nokia-isis"`
	TraceOptions    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions    `path:"trace-options" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication{}
	return t.Authentication
}

// GetOrCreateRoutePreference retrieves the value of the RoutePreference field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetOrCreateRoutePreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference {
	if t.RoutePreference != nil {
		return t.RoutePreference
	}
	t.RoutePreference = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference{}
	return t.RoutePreference
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions{}
	return t.TraceOptions
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetRoutePreference returns the value of the RoutePreference struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level. If the receiver or the field RoutePreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetRoutePreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference {
	if t != nil && t.RoutePreference != nil {
		return t.RoutePreference
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetBgpLsExclude retrieves the value of the leaf BgpLsExclude from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsExclude is set, it can
// safely use t.GetBgpLsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsExclude == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetBgpLsExclude() bool {
	if t == nil || t.BgpLsExclude == nil {
		return false
	}
	return *t.BgpLsExclude
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetLevelNumber() uint8 {
	if t == nil || t.LevelNumber == nil {
		return 0
	}
	return *t.LevelNumber
}

// GetMetricStyle retrieves the value of the leaf MetricStyle from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricStyle is set, it can
// safely use t.GetMetricStyle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricStyle == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetMetricStyle() E_SrlNokiaIsis_IsisMetricStyle {
	if t == nil || t.MetricStyle == 0 {
		return SrlNokiaIsis_IsisMetricStyle_wide
	}
	return t.MetricStyle
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLsExclude == nil {
		var v bool = false
		t.BgpLsExclude = &v
	}
	if t.MetricStyle == 0 {
		t.MetricStyle = SrlNokiaIsis_IsisMetricStyle_wide
	}
	t.Authentication.PopulateDefaults()
	t.RoutePreference.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelNumber == nil {
		return nil, fmt.Errorf("nil value for key LevelNumber")
	}

	return map[string]interface{}{
		"level-number": *t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication struct {
	CsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication  `path:"csnp-authentication" module:"srl_nokia-isis"`
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                                   `path:"keychain" module:"srl_nokia-isis"`
	LspAuthentication   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication   `path:"lsp-authentication" module:"srl_nokia-isis"`
	PsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication  `path:"psnp-authentication" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) IsYANGGoStruct() {
}

// GetOrCreateCsnpAuthentication retrieves the value of the CsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication {
	if t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	t.CsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication{}
	return t.CsnpAuthentication
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key{}
	return t.Key
}

// GetOrCreateLspAuthentication retrieves the value of the LspAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication {
	if t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	t.LspAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication{}
	return t.LspAuthentication
}

// GetOrCreatePsnpAuthentication retrieves the value of the PsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreatePsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication {
	if t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	t.PsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication{}
	return t.PsnpAuthentication
}

// GetCsnpAuthentication returns the value of the CsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field CsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication {
	if t != nil && t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	return nil
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetLspAuthentication returns the value of the LspAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field LspAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication {
	if t != nil && t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	return nil
}

// GetPsnpAuthentication returns the value of the PsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field PsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetPsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication {
	if t != nil && t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CsnpAuthentication.PopulateDefaults()
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
	t.LspAuthentication.PopulateDefaults()
	t.PsnpAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/csnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/lsp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/psnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/route-preference YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference struct {
	External *uint8 `path:"external" module:"srl_nokia-isis"`
	Internal *uint8 `path:"internal" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) IsYANGGoStruct() {
}

// GetExternal retrieves the value of the leaf External from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if External is set, it can
// safely use t.GetExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.External == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) GetExternal() uint8 {
	if t == nil || t.External == nil {
		return 0
	}
	return *t.External
}

// GetInternal retrieves the value of the leaf Internal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Internal is set, it can
// safely use t.GetInternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Internal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) GetInternal() uint8 {
	if t == nil || t.Internal == nil {
		return 0
	}
	return *t.Internal
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions struct {
	Trace []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions_Trace `path:"trace" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) GetTrace() []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/overload YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload struct {
	AdvertiseExternal   *bool                                                                               `path:"advertise-external" module:"srl_nokia-isis"`
	AdvertiseInterlevel *bool                                                                               `path:"advertise-interlevel" module:"srl_nokia-isis"`
	Immediate           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate `path:"immediate" module:"srl_nokia-isis"`
	OnBoot              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot    `path:"on-boot" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) IsYANGGoStruct() {}

// GetOrCreateImmediate retrieves the value of the Immediate field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetOrCreateImmediate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate {
	if t.Immediate != nil {
		return t.Immediate
	}
	t.Immediate = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate{}
	return t.Immediate
}

// GetOrCreateOnBoot retrieves the value of the OnBoot field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetOrCreateOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot {
	if t.OnBoot != nil {
		return t.OnBoot
	}
	t.OnBoot = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot{}
	return t.OnBoot
}

// GetImmediate returns the value of the Immediate struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload. If the receiver or the field Immediate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetImmediate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate {
	if t != nil && t.Immediate != nil {
		return t.Immediate
	}
	return nil
}

// GetOnBoot returns the value of the OnBoot struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload. If the receiver or the field OnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot {
	if t != nil && t.OnBoot != nil {
		return t.OnBoot
	}
	return nil
}

// GetAdvertiseExternal retrieves the value of the leaf AdvertiseExternal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseExternal is set, it can
// safely use t.GetAdvertiseExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseExternal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetAdvertiseExternal() bool {
	if t == nil || t.AdvertiseExternal == nil {
		return false
	}
	return *t.AdvertiseExternal
}

// GetAdvertiseInterlevel retrieves the value of the leaf AdvertiseInterlevel from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInterlevel is set, it can
// safely use t.GetAdvertiseInterlevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInterlevel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetAdvertiseInterlevel() bool {
	if t == nil || t.AdvertiseInterlevel == nil {
		return false
	}
	return *t.AdvertiseInterlevel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseExternal == nil {
		var v bool = false
		t.AdvertiseExternal = &v
	}
	if t.AdvertiseInterlevel == nil {
		var v bool = false
		t.AdvertiseInterlevel = &v
	}
	t.Immediate.PopulateDefaults()
	t.OnBoot.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/overload/immediate YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate struct {
	MaxMetric *bool `path:"max-metric" module:"srl_nokia-isis"`
	SetBit    *bool `path:"set-bit" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) IsYANGGoStruct() {
}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetSetBit retrieves the value of the leaf SetBit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBit is set, it can
// safely use t.GetSetBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) GetSetBit() bool {
	if t == nil || t.SetBit == nil {
		return false
	}
	return *t.SetBit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
	if t.SetBit == nil {
		var v bool = false
		t.SetBit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/overload/on-boot YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot struct {
	MaxMetric *bool   `path:"max-metric" module:"srl_nokia-isis"`
	SetBit    *bool   `path:"set-bit" module:"srl_nokia-isis"`
	Timeout   *uint16 `path:"timeout" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) IsYANGGoStruct() {
}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetSetBit retrieves the value of the leaf SetBit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBit is set, it can
// safely use t.GetSetBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) GetSetBit() bool {
	if t == nil || t.SetBit == nil {
		return false
	}
	return *t.SetBit
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting struct {
	Mpls *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls `path:"mpls" module:"srl_nokia-isis" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) IsYANGGoStruct() {
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls struct {
	DynamicAdjacencySids *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids `path:"dynamic-adjacency-sids" module:"srl_nokia-isis"`
	StaticLabelBlock     *string                                                                                                   `path:"static-label-block" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) IsYANGGoStruct() {
}

// GetOrCreateDynamicAdjacencySids retrieves the value of the DynamicAdjacencySids field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) GetOrCreateDynamicAdjacencySids() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids {
	if t.DynamicAdjacencySids != nil {
		return t.DynamicAdjacencySids
	}
	t.DynamicAdjacencySids = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids{}
	return t.DynamicAdjacencySids
}

// GetDynamicAdjacencySids returns the value of the DynamicAdjacencySids struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls. If the receiver or the field DynamicAdjacencySids is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) GetDynamicAdjacencySids() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids {
	if t != nil && t.DynamicAdjacencySids != nil {
		return t.DynamicAdjacencySids
	}
	return nil
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicAdjacencySids.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids struct {
	AllInterfaces *bool                                                                                                                   `path:"all-interfaces" module:"srl_nokia-isis"`
	HoldTime      SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union `path:"hold-time" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) GetAllInterfaces() bool {
	if t == nil || t.AllInterfaces == nil {
		return false
	}
	return *t.AllInterfaces
}

// GetHoldTime retrieves the value of the leaf HoldTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) GetHoldTime() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union {
	if t == nil || t.HoldTime == nil {
		return UnionUint16(15)
	}
	return t.HoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllInterfaces == nil {
		var v bool = false
		t.AllInterfaces = &v
	}
	if t.HoldTime == nil {
		t.HoldTime = UnionUint16(15)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/te-database-install YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall struct {
	BgpLs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs `path:"bgp-ls" module:"srl_nokia-isis" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) IsYANGGoStruct() {
}

// GetOrCreateBgpLs retrieves the value of the BgpLs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) GetOrCreateBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs {
	if t.BgpLs != nil {
		return t.BgpLs
	}
	t.BgpLs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs{}
	return t.BgpLs
}

// GetBgpLs returns the value of the BgpLs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall. If the receiver or the field BgpLs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) GetBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs {
	if t != nil && t.BgpLs != nil {
		return t.BgpLs
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/te-database-install/bgp-ls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs struct {
	BgpLsIdentifier *uint32 `path:"bgp-ls-identifier" module:"srl_nokia-isis"`
	IgpIdentifier   *uint64 `path:"igp-identifier" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) IsYANGGoStruct() {
}

// GetBgpLsIdentifier retrieves the value of the leaf BgpLsIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsIdentifier is set, it can
// safely use t.GetBgpLsIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) GetBgpLsIdentifier() uint32 {
	if t == nil || t.BgpLsIdentifier == nil {
		return 0
	}
	return *t.BgpLsIdentifier
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers struct {
	LspGeneration *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration `path:"lsp-generation" module:"srl_nokia-isis"`
	LspLifetime   *uint16                                                                               `path:"lsp-lifetime" module:"srl_nokia-isis"`
	LspRefresh    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh    `path:"lsp-refresh" module:"srl_nokia-isis"`
	Spf           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf           `path:"spf" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) IsYANGGoStruct() {}

// GetOrCreateLspGeneration retrieves the value of the LspGeneration field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetOrCreateLspGeneration() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration {
	if t.LspGeneration != nil {
		return t.LspGeneration
	}
	t.LspGeneration = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration{}
	return t.LspGeneration
}

// GetOrCreateLspRefresh retrieves the value of the LspRefresh field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetOrCreateLspRefresh() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh {
	if t.LspRefresh != nil {
		return t.LspRefresh
	}
	t.LspRefresh = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh{}
	return t.LspRefresh
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetOrCreateSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf{}
	return t.Spf
}

// GetLspGeneration returns the value of the LspGeneration struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers. If the receiver or the field LspGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetLspGeneration() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration {
	if t != nil && t.LspGeneration != nil {
		return t.LspGeneration
	}
	return nil
}

// GetLspRefresh returns the value of the LspRefresh struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers. If the receiver or the field LspRefresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetLspRefresh() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh {
	if t != nil && t.LspRefresh != nil {
		return t.LspRefresh
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// GetLspLifetime retrieves the value of the leaf LspLifetime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetime is set, it can
// safely use t.GetLspLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetLspLifetime() uint16 {
	if t == nil || t.LspLifetime == nil {
		return 1200
	}
	return *t.LspLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspLifetime == nil {
		var v uint16 = 1200
		t.LspLifetime = &v
	}
	t.LspGeneration.PopulateDefaults()
	t.LspRefresh.PopulateDefaults()
	t.Spf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers/lsp-generation YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration struct {
	InitialWait *uint64 `path:"initial-wait" module:"srl_nokia-isis"`
	MaxWait     *uint64 `path:"max-wait" module:"srl_nokia-isis"`
	SecondWait  *uint64 `path:"second-wait" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) GetInitialWait() uint64 {
	if t == nil || t.InitialWait == nil {
		return 10
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) GetMaxWait() uint64 {
	if t == nil || t.MaxWait == nil {
		return 5000
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) GetSecondWait() uint64 {
	if t == nil || t.SecondWait == nil {
		return 1000
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint64 = 10
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint64 = 5000
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint64 = 1000
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers/lsp-refresh YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh struct {
	HalfLifetime *bool   `path:"half-lifetime" module:"srl_nokia-isis"`
	Interval     *uint16 `path:"interval" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) IsYANGGoStruct() {
}

// GetHalfLifetime retrieves the value of the leaf HalfLifetime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLifetime is set, it can
// safely use t.GetHalfLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) GetHalfLifetime() bool {
	if t == nil || t.HalfLifetime == nil {
		return true
	}
	return *t.HalfLifetime
}

// GetInterval retrieves the value of the leaf Interval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) GetInterval() uint16 {
	if t == nil || t.Interval == nil {
		return 600
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HalfLifetime == nil {
		var v bool = true
		t.HalfLifetime = &v
	}
	if t.Interval == nil {
		var v uint16 = 600
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers/spf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf struct {
	InitialWait *uint64 `path:"initial-wait" module:"srl_nokia-isis"`
	MaxWait     *uint64 `path:"max-wait" module:"srl_nokia-isis"`
	SecondWait  *uint64 `path:"second-wait" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) GetInitialWait() uint64 {
	if t == nil || t.InitialWait == nil {
		return 1000
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) GetMaxWait() uint64 {
	if t == nil || t.MaxWait == nil {
		return 10000
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) GetSecondWait() uint64 {
	if t == nil || t.SecondWait == nil {
		return 1000
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint64 = 1000
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint64 = 10000
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint64 = 1000
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions struct {
	Trace []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions_Trace `path:"trace" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) GetTrace() []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/traffic-engineering YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering struct {
	Advertisement                    *bool `path:"advertisement" module:"srl_nokia-isis"`
	LegacyLinkAttributeAdvertisement *bool `path:"legacy-link-attribute-advertisement" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) IsYANGGoStruct() {
}

// GetAdvertisement retrieves the value of the leaf Advertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertisement is set, it can
// safely use t.GetAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) GetAdvertisement() bool {
	if t == nil || t.Advertisement == nil {
		return false
	}
	return *t.Advertisement
}

// GetLegacyLinkAttributeAdvertisement retrieves the value of the leaf LegacyLinkAttributeAdvertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LegacyLinkAttributeAdvertisement is set, it can
// safely use t.GetLegacyLinkAttributeAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LegacyLinkAttributeAdvertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) GetLegacyLinkAttributeAdvertisement() bool {
	if t == nil || t.LegacyLinkAttributeAdvertisement == nil {
		return true
	}
	return *t.LegacyLinkAttributeAdvertisement
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertisement == nil {
		var v bool = false
		t.Advertisement = &v
	}
	if t.LegacyLinkAttributeAdvertisement == nil {
		var v bool = true
		t.LegacyLinkAttributeAdvertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport struct {
	LspMtuSize *uint16 `path:"lsp-mtu-size" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) IsYANGGoStruct() {}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) GetLspMtuSize() uint16 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspMtuSize == nil {
		var v uint16 = 1492
		t.LspMtuSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding represents the /srl_nokia-network-instance/network-instance/protocols/isis/non-stop-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp represents the /srl_nokia-network-instance/network-instance/protocols/ldp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp struct {
	AdminState        E_SrlNokiaCommon_AdminState                                            `path:"admin-state" module:"srl_nokia-ldp"`
	Discovery         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery       `path:"discovery" module:"srl_nokia-ldp"`
	DynamicLabelBlock *string                                                                `path:"dynamic-label-block" module:"srl_nokia-ldp"`
	GracefulRestart   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart `path:"graceful-restart" module:"srl_nokia-ldp"`
	Ipv4              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4            `path:"ipv4" module:"srl_nokia-ldp"`
	Multipath         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath       `path:"multipath" module:"srl_nokia-ldp"`
	Peers             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers           `path:"peers" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) IsYANGGoStruct() {}

// GetOrCreateDiscovery retrieves the value of the Discovery field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateDiscovery() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery {
	if t.Discovery != nil {
		return t.Discovery
	}
	t.Discovery = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery{}
	return t.Discovery
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4{}
	return t.Ipv4
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath{}
	return t.Multipath
}

// GetOrCreatePeers retrieves the value of the Peers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreatePeers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers {
	if t.Peers != nil {
		return t.Peers
	}
	t.Peers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers{}
	return t.Peers
}

// GetDiscovery returns the value of the Discovery struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Discovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetDiscovery() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery {
	if t != nil && t.Discovery != nil {
		return t.Discovery
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetPeers returns the value of the Peers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Peers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetPeers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers {
	if t != nil && t.Peers != nil {
		return t.Peers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	t.Discovery.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.Peers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery struct {
	Interfaces *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces `path:"interfaces" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) IsYANGGoStruct() {}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) GetOrCreateInterfaces() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces{}
	return t.Interfaces
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) GetInterfaces() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interfaces.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces struct {
	HelloHoldtime *uint16                                                                                          `path:"hello-holdtime" module:"srl_nokia-ldp"`
	HelloInterval *uint16                                                                                          `path:"hello-interval" module:"srl_nokia-ldp"`
	Interface     map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface `path:"interface" module:"srl_nokia-ldp"`
	TraceOptions  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions         `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) NewInterface(
	Name string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetOrCreateInterface(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface {
	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetInterface(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 15
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 5
	}
	return *t.HelloInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloHoldtime == nil {
		var v uint16 = 15
		t.HelloHoldtime = &v
	}
	if t.HelloInterval == nil {
		var v uint16 = 5
		t.HelloInterval = &v
	}
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface struct {
	HelloHoldtime *uint16                                                                                    `path:"hello-holdtime" module:"srl_nokia-ldp"`
	HelloInterval *uint16                                                                                    `path:"hello-interval" module:"srl_nokia-ldp"`
	Ipv4          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 `path:"ipv4" module:"srl_nokia-ldp"`
	Name          *string                                                                                    `path:"name" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 15
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 5
	}
	return *t.HelloInterval
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloHoldtime == nil {
		var v uint16 = 15
		t.HelloHoldtime = &v
	}
	if t.HelloInterval == nil {
		var v uint16 = 5
		t.HelloInterval = &v
	}
	t.Ipv4.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/interface/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 struct {
	AdminState   E_SrlNokiaCommon_AdminState                                                                             `path:"admin-state" module:"srl_nokia-ldp"`
	TraceOptions *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/interface/ipv4/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions struct {
	Trace []E_SrlNokiaLdp_InterfaceTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) GetTrace() []E_SrlNokiaLdp_InterfaceTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions struct {
	Trace []E_SrlNokiaLdp_InterfaceTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) GetTrace() []E_SrlNokiaLdp_InterfaceTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/ldp/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart struct {
	HelperEnable     *bool   `path:"helper-enable" module:"srl_nokia-ldp"`
	MaxReconnectTime *uint16 `path:"max-reconnect-time" module:"srl_nokia-ldp"`
	MaxRecoveryTime  *uint16 `path:"max-recovery-time" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) IsYANGGoStruct() {}

// GetHelperEnable retrieves the value of the leaf HelperEnable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperEnable is set, it can
// safely use t.GetHelperEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperEnable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) GetHelperEnable() bool {
	if t == nil || t.HelperEnable == nil {
		return false
	}
	return *t.HelperEnable
}

// GetMaxReconnectTime retrieves the value of the leaf MaxReconnectTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReconnectTime is set, it can
// safely use t.GetMaxReconnectTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReconnectTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) GetMaxReconnectTime() uint16 {
	if t == nil || t.MaxReconnectTime == nil {
		return 120
	}
	return *t.MaxReconnectTime
}

// GetMaxRecoveryTime retrieves the value of the leaf MaxRecoveryTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRecoveryTime is set, it can
// safely use t.GetMaxRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRecoveryTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) GetMaxRecoveryTime() uint16 {
	if t == nil || t.MaxRecoveryTime == nil {
		return 120
	}
	return *t.MaxRecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperEnable == nil {
		var v bool = false
		t.HelperEnable = &v
	}
	if t.MaxReconnectTime == nil {
		var v uint16 = 120
		t.MaxReconnectTime = &v
	}
	if t.MaxRecoveryTime == nil {
		var v uint16 = 120
		t.MaxRecoveryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/ldp/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 struct {
	FecResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution `path:"fec-resolution" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) IsYANGGoStruct() {}

// GetOrCreateFecResolution retrieves the value of the FecResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) GetOrCreateFecResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution {
	if t.FecResolution != nil {
		return t.FecResolution
	}
	t.FecResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution{}
	return t.FecResolution
}

// GetFecResolution returns the value of the FecResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4. If the receiver or the field FecResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) GetFecResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution {
	if t != nil && t.FecResolution != nil {
		return t.FecResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FecResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution represents the /srl_nokia-network-instance/network-instance/protocols/ldp/ipv4/fec-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution struct {
	LongestPrefix *bool `path:"longest-prefix" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) IsYANGGoStruct() {}

// GetLongestPrefix retrieves the value of the leaf LongestPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LongestPrefix is set, it can
// safely use t.GetLongestPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LongestPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) GetLongestPrefix() bool {
	if t == nil || t.LongestPrefix == nil {
		return false
	}
	return *t.LongestPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LongestPrefix == nil {
		var v bool = false
		t.LongestPrefix = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/ldp/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath struct {
	MaxPaths *uint8 `path:"max-paths" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) IsYANGGoStruct() {}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) GetMaxPaths() uint8 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPaths == nil {
		var v uint8 = 1
		t.MaxPaths = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers struct {
	Peer                     map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer `path:"peer" module:"srl_nokia-ldp"`
	SessionKeepaliveHoldtime *uint16                                                                                                                                    `path:"session-keepalive-holdtime" module:"srl_nokia-ldp"`
	SessionKeepaliveInterval *uint16                                                                                                                                    `path:"session-keepalive-interval" module:"srl_nokia-ldp"`
	TraceOptions             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions                                                                  `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key represents the key for list Peer of element /srl_nokia-network-instance/network-instance/protocols/ldp/peers.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key struct {
	LsrId        string `path:"lsr-id"`
	LabelSpaceId uint16 `path:"label-space-id"`
}

// NewPeer creates a new entry in the Peer list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) NewPeer(LsrId string,
	LabelSpaceId uint16,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer{
		LsrId:        &LsrId,
		LabelSpaceId: &LabelSpaceId,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) RenamePeer(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key,
) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.LsrId = &newK.LsrId
	e.LabelSpaceId = &newK.LabelSpaceId

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetOrCreatePeer(LsrId string,
	LabelSpaceId uint16,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(LsrId, LabelSpaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetPeer(LsrId string,
	LabelSpaceId uint16,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) DeletePeer(LsrId string, LabelSpaceId uint16) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	delete(t.Peer, key)
}

// AppendPeer appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer struct to the
// list Peer of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) AppendPeer(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer,
) error {
	if v.LsrId == nil {
		return fmt.Errorf("invalid nil key for LsrId")
	}

	if v.LabelSpaceId == nil {
		return fmt.Errorf("invalid nil key for LabelSpaceId")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        *v.LsrId,
		LabelSpaceId: *v.LabelSpaceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetSessionKeepaliveHoldtime retrieves the value of the leaf SessionKeepaliveHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionKeepaliveHoldtime is set, it can
// safely use t.GetSessionKeepaliveHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionKeepaliveHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetSessionKeepaliveHoldtime() uint16 {
	if t == nil || t.SessionKeepaliveHoldtime == nil {
		return 180
	}
	return *t.SessionKeepaliveHoldtime
}

// GetSessionKeepaliveInterval retrieves the value of the leaf SessionKeepaliveInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionKeepaliveInterval is set, it can
// safely use t.GetSessionKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionKeepaliveInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetSessionKeepaliveInterval() uint16 {
	if t == nil || t.SessionKeepaliveInterval == nil {
		return 60
	}
	return *t.SessionKeepaliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SessionKeepaliveHoldtime == nil {
		var v uint16 = 180
		t.SessionKeepaliveHoldtime = &v
	}
	if t.SessionKeepaliveInterval == nil {
		var v uint16 = 60
		t.SessionKeepaliveInterval = &v
	}
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/peer YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer struct {
	FecLimit     *uint32                                                                        `path:"fec-limit" module:"srl_nokia-ldp"`
	LabelSpaceId *uint16                                                                        `path:"label-space-id" module:"srl_nokia-ldp"`
	LsrId        *string                                                                        `path:"lsr-id" module:"srl_nokia-ldp"`
	TcpTransport *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport `path:"tcp-transport" module:"srl_nokia-ldp"`
	TraceOptions *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) IsYANGGoStruct() {}

// GetOrCreateTcpTransport retrieves the value of the TcpTransport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetOrCreateTcpTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport {
	if t.TcpTransport != nil {
		return t.TcpTransport
	}
	t.TcpTransport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport{}
	return t.TcpTransport
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions{}
	return t.TraceOptions
}

// GetTcpTransport returns the value of the TcpTransport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer. If the receiver or the field TcpTransport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetTcpTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport {
	if t != nil && t.TcpTransport != nil {
		return t.TcpTransport
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetFecLimit retrieves the value of the leaf FecLimit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecLimit is set, it can
// safely use t.GetFecLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetFecLimit() uint32 {
	if t == nil || t.FecLimit == nil {
		return 0
	}
	return *t.FecLimit
}

// GetLabelSpaceId retrieves the value of the leaf LabelSpaceId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelSpaceId is set, it can
// safely use t.GetLabelSpaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelSpaceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetLabelSpaceId() uint16 {
	if t == nil || t.LabelSpaceId == nil {
		return 0
	}
	return *t.LabelSpaceId
}

// GetLsrId retrieves the value of the leaf LsrId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrId is set, it can
// safely use t.GetLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetLsrId() string {
	if t == nil || t.LsrId == nil {
		return ""
	}
	return *t.LsrId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FecLimit == nil {
		var v uint32 = 0
		t.FecLimit = &v
	}
	t.TcpTransport.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LabelSpaceId == nil {
		return nil, fmt.Errorf("nil value for key LabelSpaceId")
	}

	if t.LsrId == nil {
		return nil, fmt.Errorf("nil value for key LsrId")
	}

	return map[string]interface{}{
		"label-space-id": *t.LabelSpaceId,
		"lsr-id":         *t.LsrId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/peer/tcp-transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/peer/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions struct {
	Trace []E_SrlNokiaLdp_SessionTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) GetTrace() []E_SrlNokiaLdp_SessionTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions struct {
	Trace []E_SrlNokiaLdp_SessionTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) IsYANGGoStruct() {}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) GetTrace() []E_SrlNokiaLdp_SessionTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux represents the /srl_nokia-network-instance/network-instance/protocols/linux YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux struct {
	ExportNeighbors *bool `path:"export-neighbors" module:"srl_nokia-linux"`
	ExportRoutes    *bool `path:"export-routes" module:"srl_nokia-linux"`
	ImportRoutes    *bool `path:"import-routes" module:"srl_nokia-linux"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) IsYANGGoStruct() {}

// GetExportNeighbors retrieves the value of the leaf ExportNeighbors from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportNeighbors is set, it can
// safely use t.GetExportNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportNeighbors == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) GetExportNeighbors() bool {
	if t == nil || t.ExportNeighbors == nil {
		return true
	}
	return *t.ExportNeighbors
}

// GetExportRoutes retrieves the value of the leaf ExportRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRoutes is set, it can
// safely use t.GetExportRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) GetExportRoutes() bool {
	if t == nil || t.ExportRoutes == nil {
		return false
	}
	return *t.ExportRoutes
}

// GetImportRoutes retrieves the value of the leaf ImportRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRoutes is set, it can
// safely use t.GetImportRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) GetImportRoutes() bool {
	if t == nil || t.ImportRoutes == nil {
		return false
	}
	return *t.ImportRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExportNeighbors == nil {
		var v bool = true
		t.ExportNeighbors = &v
	}
	if t.ExportRoutes == nil {
		var v bool = false
		t.ExportRoutes = &v
	}
	if t.ImportRoutes == nil {
		var v bool = false
		t.ImportRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) ΛBelongingModule() string {
	return "srl_nokia-linux"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld represents the /srl_nokia-network-instance/network-instance/protocols/mld YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                 `path:"admin-state" module:"srl_nokia-mld"`
	Interface               map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface `path:"interface" module:"srl_nokia-mld"`
	QueryInterval           *uint32                                                                     `path:"query-interval" module:"srl_nokia-mld"`
	QueryLastMemberInterval *uint32                                                                     `path:"query-last-member-interval" module:"srl_nokia-mld"`
	QueryResponseInterval   *uint32                                                                     `path:"query-response-interval" module:"srl_nokia-mld"`
	RobustCount             *uint32                                                                     `path:"robust-count" module:"srl_nokia-mld"`
	Ssm                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm                  `path:"ssm" module:"srl_nokia-mld"`
	TraceOptions            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions         `path:"trace-options" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) NewInterface(InterfaceName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetInterface(InterfaceName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm{}
	return t.Ssm
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions{}
	return t.TraceOptions
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.Ssm.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping struct {
	AdminState          E_SrlNokiaCommon_AdminState                                                         `path:"admin-state" module:"srl_nokia-mld-snooping"`
	EvpnProxy           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy            `path:"evpn-proxy" module:"srl_nokia-mld-snooping"`
	Interface           map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface `path:"interface" module:"srl_nokia-mld-snooping"`
	Querier             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier              `path:"querier" module:"srl_nokia-mld-snooping"`
	QueryInterval       *uint32                                                                             `path:"query-interval" module:"srl_nokia-mld-snooping"`
	QuerySourceAddress  *string                                                                             `path:"query-source-address" module:"srl_nokia-mld-snooping"`
	ReportSourceAddress *string                                                                             `path:"report-source-address" module:"srl_nokia-mld-snooping"`
	RobustCount         *uint32                                                                             `path:"robust-count" module:"srl_nokia-mld-snooping"`
	TraceOptions        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions         `path:"trace-options" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateEvpnProxy retrieves the value of the EvpnProxy field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetOrCreateEvpnProxy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy {
	if t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	t.EvpnProxy = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy{}
	return t.EvpnProxy
}

// GetOrCreateQuerier retrieves the value of the Querier field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetOrCreateQuerier() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier {
	if t.Querier != nil {
		return t.Querier
	}
	t.Querier = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier{}
	return t.Querier
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions{}
	return t.TraceOptions
}

// GetEvpnProxy returns the value of the EvpnProxy struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the receiver or the field EvpnProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetEvpnProxy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy {
	if t != nil && t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	return nil
}

// GetQuerier returns the value of the Querier struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the receiver or the field Querier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetQuerier() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier {
	if t != nil && t.Querier != nil {
		return t.Querier
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.EvpnProxy.PopulateDefaults()
	t.Querier.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/evpn-proxy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_EvpnProxy) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface struct {
	FastLeave                 *bool                                                                                           `path:"fast-leave" module:"srl_nokia-mld-snooping"`
	ImportPolicy              *string                                                                                         `path:"import-policy" module:"srl_nokia-mld-snooping"`
	InterfaceName             *string                                                                                         `path:"interface-name" module:"srl_nokia-mld-snooping"`
	MaximumNumberGroupSources *uint32                                                                                         `path:"maximum-number-group-sources" module:"srl_nokia-mld-snooping"`
	MaximumNumberGroups       *uint32                                                                                         `path:"maximum-number-groups" module:"srl_nokia-mld-snooping"`
	MaximumNumberSources      *uint32                                                                                         `path:"maximum-number-sources" module:"srl_nokia-mld-snooping"`
	MrouterPort               *bool                                                                                           `path:"mrouter-port" module:"srl_nokia-mld-snooping"`
	QueryInterval             *uint32                                                                                         `path:"query-interval" module:"srl_nokia-mld-snooping"`
	QueryLastMemberInterval   *uint32                                                                                         `path:"query-last-member-interval" module:"srl_nokia-mld-snooping"`
	QueryResponseInterval     *uint32                                                                                         `path:"query-response-interval" module:"srl_nokia-mld-snooping"`
	RobustCount               *uint32                                                                                         `path:"robust-count" module:"srl_nokia-mld-snooping"`
	RouterAlertCheck          *bool                                                                                           `path:"router-alert-check" module:"srl_nokia-mld-snooping"`
	SendQueries               *bool                                                                                           `path:"send-queries" module:"srl_nokia-mld-snooping"`
	StaticMembershipGroups    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-mld-snooping"`
	Version                   *uint8                                                                                          `path:"version" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) IsYANGGoStruct() {}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 2
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == nil {
		var v uint8 = 2
		t.Version = &v
	}
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group `path:"group" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) NewGroup(
	Group string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group)
	}

	key := Group

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group{
		Group: &Group,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Group = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) GetOrCreateGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group {
	key := Group

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Group)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) GetGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group {
	if t == nil {
		return nil
	}

	key := Group

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) DeleteGroup(Group string) {
	key := Group

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group,
) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key received for Group")
	}

	key := *v.Group

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface/static-membership-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct {
	Group  *string                                                                                                                 `path:"group" module:"srl_nokia-mld-snooping"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source `path:"source" module:"srl_nokia-mld-snooping"`
	Starg  YANGEmpty                                                                                                               `path:"starg" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroup retrieves the value of the leaf Group from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"group": *t.Group,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface/static-membership-groups/group/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/querier YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Querier) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace `path:"trace" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace struct {
	Packet *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-mld-snooping" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct {
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-mld-snooping"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Modifier            `path:"modifier" module:"srl_nokia-mld-snooping"`
	SourceMac map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac `path:"source-mac" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSourceMac creates a new entry in the SourceMac list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) NewSourceMac(
	SourceMac string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	key := SourceMac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceMac", key)
	}

	t.SourceMac[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac{
		SourceMac: &SourceMac,
	}

	return t.SourceMac[key], nil
}

// RenameSourceMac renames an entry in the list SourceMac within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) RenameSourceMac(oldK, newK string) error {
	if _, ok := t.SourceMac[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceMac", newK)
	}

	e, ok := t.SourceMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceMac", oldK)
	}
	e.SourceMac = &newK

	t.SourceMac[newK] = e
	delete(t.SourceMac, oldK)
	return nil
}

// GetOrCreateSourceMac retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetOrCreateSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac {
	key := SourceMac

	if v, ok := t.SourceMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceMac(SourceMac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceMac got unexpected error: %v", err))
	}
	return v
}

// GetSourceMac retrieves the value with the specified key from
// the SourceMac map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac {
	if t == nil {
		return nil
	}

	key := SourceMac

	if lm, ok := t.SourceMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceMac deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) DeleteSourceMac(SourceMac string) {
	key := SourceMac

	delete(t.SourceMac, key)
}

// AppendSourceMac appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac struct to the
// list SourceMac of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) AppendSourceMac(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac,
) error {
	if v.SourceMac == nil {
		return fmt.Errorf("invalid nil key received for SourceMac")
	}

	key := *v.SourceMac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	if _, ok := t.SourceMac[key]; ok {
		return fmt.Errorf("duplicate key for list SourceMac %v", key)
	}

	t.SourceMac[key] = v
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceMac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface struct {
	InterfaceName *string `path:"interface-name" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace/packet/source-mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac struct {
	SourceMac *string `path:"source-mac" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) IsYANGGoStruct() {
}

// GetSourceMac retrieves the value of the leaf SourceMac from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceMac == nil {
		return nil, fmt.Errorf("nil value for key SourceMac")
	}

	return map[string]interface{}{
		"source-mac": *t.SourceMac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                             `path:"admin-state" module:"srl_nokia-mld"`
	ImportPolicy            *string                                                                                 `path:"import-policy" module:"srl_nokia-mld"`
	InterfaceName           *string                                                                                 `path:"interface-name" module:"srl_nokia-mld"`
	MaxGroupSources         *uint32                                                                                 `path:"max-group-sources" module:"srl_nokia-mld"`
	MaxGroups               *uint32                                                                                 `path:"max-groups" module:"srl_nokia-mld"`
	MaxSources              *uint32                                                                                 `path:"max-sources" module:"srl_nokia-mld"`
	QueryInterval           *uint32                                                                                 `path:"query-interval" module:"srl_nokia-mld"`
	QueryLastMemberInterval *uint32                                                                                 `path:"query-last-member-interval" module:"srl_nokia-mld"`
	QueryResponseInterval   *uint32                                                                                 `path:"query-response-interval" module:"srl_nokia-mld"`
	RouterAlertCheck        *bool                                                                                   `path:"router-alert-check" module:"srl_nokia-mld"`
	Ssm                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm                    `path:"ssm" module:"srl_nokia-mld"`
	StaticMembershipGroups  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-mld"`
	Version                 *uint8                                                                                  `path:"version" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) IsYANGGoStruct() {}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm{}
	return t.Ssm
}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxGroupSources retrieves the value of the leaf MaxGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroupSources is set, it can
// safely use t.GetMaxGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetMaxGroupSources() uint32 {
	if t == nil || t.MaxGroupSources == nil {
		return 0
	}
	return *t.MaxGroupSources
}

// GetMaxGroups retrieves the value of the leaf MaxGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroups is set, it can
// safely use t.GetMaxGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetMaxGroups() uint32 {
	if t == nil || t.MaxGroups == nil {
		return 0
	}
	return *t.MaxGroups
}

// GetMaxSources retrieves the value of the leaf MaxSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSources is set, it can
// safely use t.GetMaxSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetMaxSources() uint32 {
	if t == nil || t.MaxSources == nil {
		return 0
	}
	return *t.MaxSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 2
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.Version == nil {
		var v uint8 = 2
		t.Version = &v
	}
	t.Ssm.PopulateDefaults()
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings `path:"mappings" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                                    `path:"end" module:"srl_nokia-mld"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-mld"`
	Start  *string                                                                                                    `path:"start" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange `path:"group-range" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct {
	End    *string                                                                                                              `path:"end" module:"srl_nokia-mld"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source `path:"source" module:"srl_nokia-mld"`
	Starg  YANGEmpty                                                                                                            `path:"starg" module:"srl_nokia-mld"`
	Start  *string                                                                                                              `path:"start" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings `path:"mappings" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                          `path:"end" module:"srl_nokia-mld"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-mld"`
	Start  *string                                                                                          `path:"start" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace `path:"trace" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface `path:"interface" module:"srl_nokia-mld" yangPresence:"true"`
	Packet    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet    `path:"packet" module:"srl_nokia-mld" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) IsYANGGoStruct() {}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface{}
	return t.Interface
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interface.PopulateDefaults()
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-mld"`
	Name *string   `path:"name" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-mld" yangPresence:"true"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-mld"`
	Type      E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface{}
	return t.Interface
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Modifier == 0 {
		t.Modifier = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	t.Interface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-mld"`
	Name *string   `path:"name" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf represents the /srl_nokia-network-instance/network-instance/protocols/ospf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf struct {
	Instance map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance `path:"instance" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) NewInstance(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance{
		Name: &Name,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) RenameInstance(oldK, newK string) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.Name = &newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) GetOrCreateInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance {
	key := Name

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) GetInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) DeleteInstance(Name string) {
	key := Name

	delete(t.Instance, key)
}

// AppendInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct to the
// list Instance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) AppendInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct {
	AddressFamily             E_SrlNokiaOspfTypes_Ospfv3AddressFamily                                                     `path:"address-family" module:"srl_nokia-ospf"`
	AdminState                E_SrlNokiaCommon_AdminState                                                                 `path:"admin-state" module:"srl_nokia-ospf"`
	AdvertiseRouterCapability E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_AdvertiseRouterCapability `path:"advertise-router-capability" module:"srl_nokia-ospf"`
	Area                      map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area            `path:"area" module:"srl_nokia-ospf"`
	Asbr                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr                       `path:"asbr" module:"srl_nokia-ospf" yangPresence:"true"`
	ExportLimit               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit                `path:"export-limit" module:"srl_nokia-ospf" yangPresence:"true"`
	ExportPolicy              *string                                                                                     `path:"export-policy" module:"srl_nokia-ospf"`
	ExternalDbOverflow        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow         `path:"external-db-overflow" module:"srl_nokia-ospf" yangPresence:"true"`
	ExternalPreference        *uint8                                                                                      `path:"external-preference" module:"srl_nokia-ospf"`
	GracefulRestart           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart            `path:"graceful-restart" module:"srl_nokia-ospf"`
	InstanceId                *uint32                                                                                     `path:"instance-id" module:"srl_nokia-ospf"`
	LdpSynchronization        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization         `path:"ldp-synchronization" module:"srl_nokia-ospf" yangPresence:"true"`
	MaxEcmpPaths              *uint8                                                                                      `path:"max-ecmp-paths" module:"srl_nokia-ospf"`
	Name                      *string                                                                                     `path:"name" module:"srl_nokia-ospf"`
	Overload                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload                   `path:"overload" module:"srl_nokia-ospf"`
	Preference                *uint8                                                                                      `path:"preference" module:"srl_nokia-ospf"`
	ReferenceBandwidth        *uint64                                                                                     `path:"reference-bandwidth" module:"srl_nokia-ospf"`
	RouterId                  *string                                                                                     `path:"router-id" module:"srl_nokia-ospf"`
	TeDatabaseInstall         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall          `path:"te-database-install" module:"srl_nokia-ospf" yangPresence:"true"`
	Timers                    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers                     `path:"timers" module:"srl_nokia-ospf"`
	TraceOptions              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions               `path:"trace-options" module:"srl_nokia-ospf"`
	TrafficEngineering        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering         `path:"traffic-engineering" module:"srl_nokia-ospf"`
	Version                   E_SrlNokiaOspfTypes_OspfVersion                                                             `path:"version" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) IsYANGGoStruct() {}

// NewArea creates a new entry in the Area list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) NewArea(AreaId string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area)
	}

	key := AreaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area{
		AreaId: &AreaId,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) RenameArea(oldK, newK string) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.AreaId = &newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateArea(
	AreaId string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area {
	key := AreaId

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(AreaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetArea(AreaId string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area {
	if t == nil {
		return nil
	}

	key := AreaId

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) DeleteArea(AreaId string) {
	key := AreaId

	delete(t.Area, key)
}

// AppendArea appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct to the
// list Area of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) AppendArea(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area,
) error {
	if v.AreaId == nil {
		return fmt.Errorf("invalid nil key received for AreaId")
	}

	key := *v.AreaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// GetOrCreateAsbr retrieves the value of the Asbr field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateAsbr() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr {
	if t.Asbr != nil {
		return t.Asbr
	}
	t.Asbr = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr{}
	return t.Asbr
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateExportLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateExternalDbOverflow retrieves the value of the ExternalDbOverflow field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateExternalDbOverflow() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow {
	if t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	t.ExternalDbOverflow = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow{}
	return t.ExternalDbOverflow
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload{}
	return t.Overload
}

// GetOrCreateTeDatabaseInstall retrieves the value of the TeDatabaseInstall field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall {
	if t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	t.TeDatabaseInstall = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall{}
	return t.TeDatabaseInstall
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTrafficEngineering retrieves the value of the TrafficEngineering field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering {
	if t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	t.TrafficEngineering = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering{}
	return t.TrafficEngineering
}

// GetAsbr returns the value of the Asbr struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field Asbr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAsbr() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr {
	if t != nil && t.Asbr != nil {
		return t.Asbr
	}
	return nil
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExportLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetExternalDbOverflow returns the value of the ExternalDbOverflow struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field ExternalDbOverflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExternalDbOverflow() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow {
	if t != nil && t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetTeDatabaseInstall returns the value of the TeDatabaseInstall struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field TeDatabaseInstall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall {
	if t != nil && t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTrafficEngineering returns the value of the TrafficEngineering struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field TrafficEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering {
	if t != nil && t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	return nil
}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAddressFamily() E_SrlNokiaOspfTypes_Ospfv3AddressFamily {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAdvertiseRouterCapability() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_AdvertiseRouterCapability {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return 0
	}
	return t.AdvertiseRouterCapability
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExternalPreference() uint8 {
	if t == nil || t.ExternalPreference == nil {
		return 150
	}
	return *t.ExternalPreference
}

// GetInstanceId retrieves the value of the leaf InstanceId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetMaxEcmpPaths retrieves the value of the leaf MaxEcmpPaths from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpPaths is set, it can
// safely use t.GetMaxEcmpPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetMaxEcmpPaths() uint8 {
	if t == nil || t.MaxEcmpPaths == nil {
		return 1
	}
	return *t.MaxEcmpPaths
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetPreference() uint8 {
	if t == nil || t.Preference == nil {
		return 10
	}
	return *t.Preference
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 400000000
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetVersion() E_SrlNokiaOspfTypes_OspfVersion {
	if t == nil || t.Version == 0 {
		return 0
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.ExternalPreference == nil {
		var v uint8 = 150
		t.ExternalPreference = &v
	}
	if t.MaxEcmpPaths == nil {
		var v uint8 = 1
		t.MaxEcmpPaths = &v
	}
	if t.Preference == nil {
		var v uint8 = 10
		t.Preference = &v
	}
	if t.ReferenceBandwidth == nil {
		var v uint64 = 400000000
		t.ReferenceBandwidth = &v
	}
	t.Asbr.PopulateDefaults()
	t.ExportLimit.PopulateDefaults()
	t.ExternalDbOverflow.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.TeDatabaseInstall.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.TrafficEngineering.PopulateDefaults()
	for _, e := range t.Area {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct {
	AdvertiseRouterCapability *bool                                                                                      `path:"advertise-router-capability" module:"srl_nokia-ospf"`
	AreaId                    *string                                                                                    `path:"area-id" module:"srl_nokia-ospf"`
	AreaRange                 map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange `path:"area-range" module:"srl_nokia-ospf"`
	BgpLsExclude              *bool                                                                                      `path:"bgp-ls-exclude" module:"srl_nokia-ospf"`
	BlackholeAggregate        *bool                                                                                      `path:"blackhole-aggregate" module:"srl_nokia-ospf"`
	ExportPolicy              *string                                                                                    `path:"export-policy" module:"srl_nokia-ospf"`
	Interface                 map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface `path:"interface" module:"srl_nokia-ospf"`
	Nssa                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa                 `path:"nssa" module:"srl_nokia-ospf" yangPresence:"true"`
	Stub                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub                 `path:"stub" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) NewAreaRange(
	IpPrefixMask string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange {
	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange {
	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange struct to the
// list AreaRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) AppendAreaRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange,
) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateNssa retrieves the value of the Nssa field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateNssa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa {
	if t.Nssa != nil {
		return t.Nssa
	}
	t.Nssa = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa{}
	return t.Nssa
}

// GetOrCreateStub retrieves the value of the Stub field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateStub() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub {
	if t.Stub != nil {
		return t.Stub
	}
	t.Stub = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub{}
	return t.Stub
}

// GetNssa returns the value of the Nssa struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver or the field Nssa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetNssa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa {
	if t != nil && t.Nssa != nil {
		return t.Nssa
	}
	return nil
}

// GetStub returns the value of the Stub struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver or the field Stub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetStub() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub {
	if t != nil && t.Stub != nil {
		return t.Stub
	}
	return nil
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAreaId retrieves the value of the leaf AreaId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetBgpLsExclude retrieves the value of the leaf BgpLsExclude from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsExclude is set, it can
// safely use t.GetBgpLsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsExclude == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetBgpLsExclude() bool {
	if t == nil || t.BgpLsExclude == nil {
		return false
	}
	return *t.BgpLsExclude
}

// GetBlackholeAggregate retrieves the value of the leaf BlackholeAggregate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackholeAggregate is set, it can
// safely use t.GetBlackholeAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackholeAggregate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetBlackholeAggregate() bool {
	if t == nil || t.BlackholeAggregate == nil {
		return true
	}
	return *t.BlackholeAggregate
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.BgpLsExclude == nil {
		var v bool = false
		t.BgpLsExclude = &v
	}
	if t.BlackholeAggregate == nil {
		var v bool = true
		t.BlackholeAggregate = &v
	}
	t.Nssa.PopulateDefaults()
	t.Stub.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AreaId == nil {
		return nil, fmt.Errorf("nil value for key AreaId")
	}

	return map[string]interface{}{
		"area-id": *t.AreaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/area-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"srl_nokia-ospf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface struct {
	AdminState                E_SrlNokiaCommon_AdminState                                                                        `path:"admin-state" module:"srl_nokia-ospf"`
	AdvertiseRouterCapability *bool                                                                                              `path:"advertise-router-capability" module:"srl_nokia-ospf"`
	AdvertiseSubnet           *bool                                                                                              `path:"advertise-subnet" module:"srl_nokia-ospf"`
	Authentication            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication     `path:"authentication" module:"srl_nokia-ospf"`
	DeadInterval              *uint32                                                                                            `path:"dead-interval" module:"srl_nokia-ospf"`
	FailureDetection          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection   `path:"failure-detection" module:"srl_nokia-ospf"`
	HelloInterval             *uint32                                                                                            `path:"hello-interval" module:"srl_nokia-ospf"`
	InterfaceName             *string                                                                                            `path:"interface-name" module:"srl_nokia-ospf"`
	InterfaceType             E_SrlNokiaOspfTypes_InterfaceType                                                                  `path:"interface-type" module:"srl_nokia-ospf"`
	LdpSynchronization        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization `path:"ldp-synchronization" module:"srl_nokia-ospf"`
	LsaFilterOut              E_SrlNokiaOspfTypes_LsaFilterOut                                                                   `path:"lsa-filter-out" module:"srl_nokia-ospf"`
	Metric                    *uint16                                                                                            `path:"metric" module:"srl_nokia-ospf"`
	Mtu                       *uint32                                                                                            `path:"mtu" module:"srl_nokia-ospf"`
	Passive                   *bool                                                                                              `path:"passive" module:"srl_nokia-ospf"`
	Priority                  *uint16                                                                                            `path:"priority" module:"srl_nokia-ospf"`
	RetransmitInterval        *uint32                                                                                            `path:"retransmit-interval" module:"srl_nokia-ospf"`
	TraceOptions              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions       `path:"trace-options" module:"srl_nokia-ospf"`
	TransitDelay              *uint32                                                                                            `path:"transit-delay" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions{}
	return t.TraceOptions
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAdvertiseSubnet retrieves the value of the leaf AdvertiseSubnet from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseSubnet is set, it can
// safely use t.GetAdvertiseSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseSubnet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAdvertiseSubnet() bool {
	if t == nil || t.AdvertiseSubnet == nil {
		return true
	}
	return *t.AdvertiseSubnet
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 40
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetInterfaceType() E_SrlNokiaOspfTypes_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetLsaFilterOut() E_SrlNokiaOspfTypes_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return SrlNokiaOspfTypes_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPriority retrieves the value of the leaf Priority from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.AdvertiseSubnet == nil {
		var v bool = true
		t.AdvertiseSubnet = &v
	}
	if t.DeadInterval == nil {
		var v uint32 = 40
		t.DeadInterval = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = SrlNokiaOspfTypes_LsaFilterOut_none
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.Authentication.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) IsYANGGoStruct() {
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection struct {
	EnableBfd *bool `path:"enable-bfd" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) IsYANGGoStruct() {
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization struct {
	Disable       YANGEmpty `path:"disable" module:"srl_nokia-ospf"`
	EndOfLib      *bool     `path:"end-of-lib" module:"srl_nokia-ospf"`
	HoldDownTimer *uint16   `path:"hold-down-timer" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) IsYANGGoStruct() {
}

// GetDisable retrieves the value of the leaf Disable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Disable is set, it can
// safely use t.GetDisable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Disable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) GetDisable() YANGEmpty {
	if t == nil || t.Disable == false {
		return false
	}
	return t.Disable
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace `path:"trace" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) IsYANGGoStruct() {
}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace struct {
	Adjacencies YANGEmpty                                                                                                 `path:"adjacencies" module:"srl_nokia-ospf"`
	Interfaces  YANGEmpty                                                                                                 `path:"interfaces" module:"srl_nokia-ospf"`
	Packet      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// GetAdjacencies retrieves the value of the leaf Adjacencies from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjacencies is set, it can
// safely use t.GetAdjacencies() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjacencies == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetAdjacencies() YANGEmpty {
	if t == nil || t.Adjacencies == false {
		return false
	}
	return t.Adjacencies
}

// GetInterfaces retrieves the value of the leaf Interfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interfaces is set, it can
// safely use t.GetInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetInterfaces() YANGEmpty {
	if t == nil || t.Interfaces == false {
		return false
	}
	return t.Interfaces
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet struct {
	Detail   YANGEmpty                                                                                                           `path:"detail" module:"srl_nokia-ospf"`
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-ospf"`
	Type     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) GetDetail() YANGEmpty {
	if t == nil || t.Detail == false {
		return false
	}
	return t.Detail
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/nssa YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa struct {
	AreaRange             map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange  `path:"area-range" module:"srl_nokia-ospf"`
	OriginateDefaultRoute *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"srl_nokia-ospf" yangPresence:"true"`
	RedistributeExternal  *bool                                                                                            `path:"redistribute-external" module:"srl_nokia-ospf"`
	Summaries             *bool                                                                                            `path:"summaries" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) NewAreaRange(
	IpPrefixMask string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetOrCreateAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange {
	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange {
	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange struct to the
// list AreaRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) AppendAreaRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange,
) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetOrCreateOriginateDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetOriginateDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/nssa/area-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"srl_nokia-ospf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/nssa/originate-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"srl_nokia-ospf"`
	TypeNssa       *bool `path:"type-nssa" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {
}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return true
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = true
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/stub YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub struct {
	DefaultMetric *uint16 `path:"default-metric" module:"srl_nokia-ospf"`
	Summaries     *bool   `path:"summaries" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) GetDefaultMetric() uint16 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint16 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/asbr YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr struct {
	TracePath SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union `path:"trace-path" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) IsYANGGoStruct() {}

// GetTracePath retrieves the value of the leaf TracePath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracePath is set, it can
// safely use t.GetTracePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracePath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) GetTracePath() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union {
	if t == nil || t.TracePath == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum_none
	}
	return t.TracePath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TracePath == nil {
		t.TracePath = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/export-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"srl_nokia-ospf"`
	Number     *uint32 `path:"number" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) IsYANGGoStruct() {
}

// GetLogPercent retrieves the value of the leaf LogPercent from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/external-db-overflow YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"srl_nokia-ospf"`
	Limit    *uint32 `path:"limit" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"srl_nokia-ospf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) IsYANGGoStruct() {
}

// GetHelperMode retrieves the value of the leaf HelperMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return false
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return false
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = false
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = false
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization struct {
	EndOfLib      *bool   `path:"end-of-lib" module:"srl_nokia-ospf"`
	HoldDownTimer *uint16 `path:"hold-down-timer" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) IsYANGGoStruct() {
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 60
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndOfLib == nil {
		var v bool = false
		t.EndOfLib = &v
	}
	if t.HoldDownTimer == nil {
		var v uint16 = 60
		t.HoldDownTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/overload YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload struct {
	Active               *bool                                                                                    `path:"active" module:"srl_nokia-ospf"`
	OverloadIncludeExt_1 *bool                                                                                    `path:"overload-include-ext-1" module:"srl_nokia-ospf"`
	OverloadIncludeExt_2 *bool                                                                                    `path:"overload-include-ext-2" module:"srl_nokia-ospf"`
	OverloadIncludeStub  *bool                                                                                    `path:"overload-include-stub" module:"srl_nokia-ospf"`
	OverloadOnBoot       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot `path:"overload-on-boot" module:"srl_nokia-ospf" yangPresence:"true"`
	RtrAdvLsaLimit       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit `path:"rtr-adv-lsa-limit" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) IsYANGGoStruct() {}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOrCreateOverloadOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateRtrAdvLsaLimit retrieves the value of the RtrAdvLsaLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOrCreateRtrAdvLsaLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit {
	if t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	t.RtrAdvLsaLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit{}
	return t.RtrAdvLsaLimit
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetRtrAdvLsaLimit returns the value of the RtrAdvLsaLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload. If the receiver or the field RtrAdvLsaLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetRtrAdvLsaLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit {
	if t != nil && t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	return nil
}

// GetActive retrieves the value of the leaf Active from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetOverloadIncludeExt_1 retrieves the value of the leaf OverloadIncludeExt_1 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_1 is set, it can
// safely use t.GetOverloadIncludeExt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_1 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadIncludeExt_1() bool {
	if t == nil || t.OverloadIncludeExt_1 == nil {
		return false
	}
	return *t.OverloadIncludeExt_1
}

// GetOverloadIncludeExt_2 retrieves the value of the leaf OverloadIncludeExt_2 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_2 is set, it can
// safely use t.GetOverloadIncludeExt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_2 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadIncludeExt_2() bool {
	if t == nil || t.OverloadIncludeExt_2 == nil {
		return false
	}
	return *t.OverloadIncludeExt_2
}

// GetOverloadIncludeStub retrieves the value of the leaf OverloadIncludeStub from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeStub is set, it can
// safely use t.GetOverloadIncludeStub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeStub == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadIncludeStub() bool {
	if t == nil || t.OverloadIncludeStub == nil {
		return false
	}
	return *t.OverloadIncludeStub
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v bool = false
		t.Active = &v
	}
	if t.OverloadIncludeExt_1 == nil {
		var v bool = false
		t.OverloadIncludeExt_1 = &v
	}
	if t.OverloadIncludeExt_2 == nil {
		var v bool = false
		t.OverloadIncludeExt_2 = &v
	}
	if t.OverloadIncludeStub == nil {
		var v bool = false
		t.OverloadIncludeStub = &v
	}
	t.OverloadOnBoot.PopulateDefaults()
	t.RtrAdvLsaLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/overload/overload-on-boot YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) IsYANGGoStruct() {
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 60
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 60
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/overload/rtr-adv-lsa-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit struct {
	LogOnly          *bool   `path:"log-only" module:"srl_nokia-ospf"`
	MaxLsaCount      *uint32 `path:"max-lsa-count" module:"srl_nokia-ospf"`
	OverloadTimeout  *uint16 `path:"overload-timeout" module:"srl_nokia-ospf"`
	WarningThreshold *uint8  `path:"warning-threshold" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) IsYANGGoStruct() {
}

// GetLogOnly retrieves the value of the leaf LogOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetOverloadTimeout() uint16 {
	if t == nil || t.OverloadTimeout == nil {
		return 0
	}
	return *t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetWarningThreshold() uint8 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WarningThreshold == nil {
		var v uint8 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/te-database-install YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall struct {
	BgpLs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs `path:"bgp-ls" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) IsYANGGoStruct() {
}

// GetOrCreateBgpLs retrieves the value of the BgpLs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) GetOrCreateBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs {
	if t.BgpLs != nil {
		return t.BgpLs
	}
	t.BgpLs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs{}
	return t.BgpLs
}

// GetBgpLs returns the value of the BgpLs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall. If the receiver or the field BgpLs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) GetBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs {
	if t != nil && t.BgpLs != nil {
		return t.BgpLs
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/te-database-install/bgp-ls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs struct {
	BgpLsIdentifier *uint32 `path:"bgp-ls-identifier" module:"srl_nokia-ospf"`
	IgpIdentifier   *uint64 `path:"igp-identifier" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) IsYANGGoStruct() {
}

// GetBgpLsIdentifier retrieves the value of the leaf BgpLsIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsIdentifier is set, it can
// safely use t.GetBgpLsIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) GetBgpLsIdentifier() uint32 {
	if t == nil || t.BgpLsIdentifier == nil {
		return 0
	}
	return *t.BgpLsIdentifier
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers struct {
	IncrementalSpfWait *uint32                                                                             `path:"incremental-spf-wait" module:"srl_nokia-ospf"`
	LsaAccumulate      *uint32                                                                             `path:"lsa-accumulate" module:"srl_nokia-ospf"`
	LsaArrival         *uint32                                                                             `path:"lsa-arrival" module:"srl_nokia-ospf"`
	LsaGenerate        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate `path:"lsa-generate" module:"srl_nokia-ospf"`
	RedistributeDelay  *uint32                                                                             `path:"redistribute-delay" module:"srl_nokia-ospf"`
	SpfWait            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait     `path:"spf-wait" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetOrCreateLsaGenerate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetOrCreateSpfWait() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetLsaGenerate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetSpfWait() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/timers/lsa-generate YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"srl_nokia-ospf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"srl_nokia-ospf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) IsYANGGoStruct() {
}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/timers/spf-wait YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"srl_nokia-ospf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"srl_nokia-ospf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) IsYANGGoStruct() {
}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace `path:"trace" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) IsYANGGoStruct() {
}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace struct {
	Adjacencies     YANGEmpty                                                                                  `path:"adjacencies" module:"srl_nokia-ospf"`
	GracefulRestart YANGEmpty                                                                                  `path:"graceful-restart" module:"srl_nokia-ospf"`
	Interfaces      YANGEmpty                                                                                  `path:"interfaces" module:"srl_nokia-ospf"`
	Lsdb            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb   `path:"lsdb" module:"srl_nokia-ospf" yangPresence:"true"`
	Misc            YANGEmpty                                                                                  `path:"misc" module:"srl_nokia-ospf"`
	Packet          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-ospf" yangPresence:"true"`
	Routes          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes `path:"routes" module:"srl_nokia-ospf" yangPresence:"true"`
	Spf             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf    `path:"spf" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreateLsdb retrieves the value of the Lsdb field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreateLsdb() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb {
	if t.Lsdb != nil {
		return t.Lsdb
	}
	t.Lsdb = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb{}
	return t.Lsdb
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreateRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes{}
	return t.Routes
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreateSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf{}
	return t.Spf
}

// GetLsdb returns the value of the Lsdb struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Lsdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetLsdb() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb {
	if t != nil && t.Lsdb != nil {
		return t.Lsdb
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// GetAdjacencies retrieves the value of the leaf Adjacencies from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjacencies is set, it can
// safely use t.GetAdjacencies() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjacencies == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetAdjacencies() YANGEmpty {
	if t == nil || t.Adjacencies == false {
		return false
	}
	return t.Adjacencies
}

// GetGracefulRestart retrieves the value of the leaf GracefulRestart from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulRestart is set, it can
// safely use t.GetGracefulRestart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulRestart == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetGracefulRestart() YANGEmpty {
	if t == nil || t.GracefulRestart == false {
		return false
	}
	return t.GracefulRestart
}

// GetInterfaces retrieves the value of the leaf Interfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interfaces is set, it can
// safely use t.GetInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetInterfaces() YANGEmpty {
	if t == nil || t.Interfaces == false {
		return false
	}
	return t.Interfaces
}

// GetMisc retrieves the value of the leaf Misc from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Misc is set, it can
// safely use t.GetMisc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Misc == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetMisc() YANGEmpty {
	if t == nil || t.Misc == false {
		return false
	}
	return t.Misc
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Lsdb.PopulateDefaults()
	t.Packet.PopulateDefaults()
	t.Routes.PopulateDefaults()
	t.Spf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/lsdb YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb struct {
	LinkStateId *string                                                                                        `path:"link-state-id" module:"srl_nokia-ospf"`
	RouterId    *string                                                                                        `path:"router-id" module:"srl_nokia-ospf"`
	Type        E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb_Type `path:"type" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) IsYANGGoStruct() {
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet struct {
	Detail   YANGEmpty                                                                                                           `path:"detail" module:"srl_nokia-ospf"`
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-ospf"`
	Type     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) GetDetail() YANGEmpty {
	if t == nil || t.Detail == false {
		return false
	}
	return t.Detail
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes struct {
	DestAddress *string `path:"dest-address" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) IsYANGGoStruct() {
}

// GetDestAddress retrieves the value of the leaf DestAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestAddress is set, it can
// safely use t.GetDestAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) GetDestAddress() string {
	if t == nil || t.DestAddress == nil {
		return ""
	}
	return *t.DestAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/spf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf struct {
	DestAddress *string `path:"dest-address" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) IsYANGGoStruct() {
}

// GetDestAddress retrieves the value of the leaf DestAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestAddress is set, it can
// safely use t.GetDestAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) GetDestAddress() string {
	if t == nil || t.DestAddress == nil {
		return ""
	}
	return *t.DestAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/traffic-engineering YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering struct {
	Advertisement                    *bool `path:"advertisement" module:"srl_nokia-ospf"`
	LegacyLinkAttributeAdvertisement *bool `path:"legacy-link-attribute-advertisement" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) IsYANGGoStruct() {
}

// GetAdvertisement retrieves the value of the leaf Advertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertisement is set, it can
// safely use t.GetAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) GetAdvertisement() bool {
	if t == nil || t.Advertisement == nil {
		return false
	}
	return *t.Advertisement
}

// GetLegacyLinkAttributeAdvertisement retrieves the value of the leaf LegacyLinkAttributeAdvertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LegacyLinkAttributeAdvertisement is set, it can
// safely use t.GetLegacyLinkAttributeAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LegacyLinkAttributeAdvertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) GetLegacyLinkAttributeAdvertisement() bool {
	if t == nil || t.LegacyLinkAttributeAdvertisement == nil {
		return true
	}
	return *t.LegacyLinkAttributeAdvertisement
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertisement == nil {
		var v bool = false
		t.Advertisement = &v
	}
	if t.LegacyLinkAttributeAdvertisement == nil {
		var v bool = true
		t.LegacyLinkAttributeAdvertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim represents the /srl_nokia-network-instance/network-instance/protocols/pim YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim struct {
	AdminState       E_SrlNokiaCommon_AdminState                                                 `path:"admin-state" module:"srl_nokia-pim"`
	EcmpBalance      *bool                                                                       `path:"ecmp-balance" module:"srl_nokia-pim"`
	EcmpBalanceHold  *uint32                                                                     `path:"ecmp-balance-hold" module:"srl_nokia-pim"`
	EcmpHashing      *bool                                                                       `path:"ecmp-hashing" module:"srl_nokia-pim"`
	Interface        map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface `path:"interface" module:"srl_nokia-pim"`
	Ipv4             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4                 `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6                 `path:"ipv6" module:"srl_nokia-pim"`
	RendezvousPoints *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints     `path:"rendezvous-points" module:"srl_nokia-pim"`
	SptSwitchover    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover        `path:"spt-switchover" module:"srl_nokia-pim"`
	Ssm              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm                  `path:"ssm" module:"srl_nokia-pim"`
	TraceOptions     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions         `path:"trace-options" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) NewInterface(InterfaceName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetInterface(InterfaceName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateIpv6() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6{}
	return t.Ipv6
}

// GetOrCreateRendezvousPoints retrieves the value of the RendezvousPoints field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateRendezvousPoints() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints {
	if t.RendezvousPoints != nil {
		return t.RendezvousPoints
	}
	t.RendezvousPoints = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints{}
	return t.RendezvousPoints
}

// GetOrCreateSptSwitchover retrieves the value of the SptSwitchover field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateSptSwitchover() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover {
	if t.SptSwitchover != nil {
		return t.SptSwitchover
	}
	t.SptSwitchover = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover{}
	return t.SptSwitchover
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm{}
	return t.Ssm
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions{}
	return t.TraceOptions
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetIpv6() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetRendezvousPoints returns the value of the RendezvousPoints struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field RendezvousPoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetRendezvousPoints() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints {
	if t != nil && t.RendezvousPoints != nil {
		return t.RendezvousPoints
	}
	return nil
}

// GetSptSwitchover returns the value of the SptSwitchover struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field SptSwitchover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetSptSwitchover() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover {
	if t != nil && t.SptSwitchover != nil {
		return t.SptSwitchover
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEcmpBalance retrieves the value of the leaf EcmpBalance from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpBalance is set, it can
// safely use t.GetEcmpBalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpBalance == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetEcmpBalance() bool {
	if t == nil || t.EcmpBalance == nil {
		return false
	}
	return *t.EcmpBalance
}

// GetEcmpBalanceHold retrieves the value of the leaf EcmpBalanceHold from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpBalanceHold is set, it can
// safely use t.GetEcmpBalanceHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpBalanceHold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetEcmpBalanceHold() uint32 {
	if t == nil || t.EcmpBalanceHold == nil {
		return 1
	}
	return *t.EcmpBalanceHold
}

// GetEcmpHashing retrieves the value of the leaf EcmpHashing from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpHashing is set, it can
// safely use t.GetEcmpHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpHashing == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetEcmpHashing() bool {
	if t == nil || t.EcmpHashing == nil {
		return false
	}
	return *t.EcmpHashing
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EcmpBalance == nil {
		var v bool = false
		t.EcmpBalance = &v
	}
	if t.EcmpBalanceHold == nil {
		var v uint32 = 1
		t.EcmpBalanceHold = &v
	}
	if t.EcmpHashing == nil {
		var v bool = false
		t.EcmpHashing = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.RendezvousPoints.PopulateDefaults()
	t.SptSwitchover.PopulateDefaults()
	t.Ssm.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface represents the /srl_nokia-network-instance/network-instance/protocols/pim/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface struct {
	AdminState      E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-pim"`
	AssertInterval  *uint32                     `path:"assert-interval" module:"srl_nokia-pim"`
	BfdIpv4         *bool                       `path:"bfd-ipv4" module:"srl_nokia-pim"`
	BfdIpv6         *bool                       `path:"bfd-ipv6" module:"srl_nokia-pim"`
	DrPriority      *uint32                     `path:"dr-priority" module:"srl_nokia-pim"`
	HelloInterval   *uint32                     `path:"hello-interval" module:"srl_nokia-pim"`
	HelloMultiplier *uint32                     `path:"hello-multiplier" module:"srl_nokia-pim"`
	InterfaceName   *string                     `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4AdminState  E_SrlNokiaCommon_AdminState `path:"ipv4-admin-state" module:"srl_nokia-pim"`
	Ipv6AdminState  E_SrlNokiaCommon_AdminState `path:"ipv6-admin-state" module:"srl_nokia-pim"`
	MaximumGroups   *uint32                     `path:"maximum-groups" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAssertInterval retrieves the value of the leaf AssertInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssertInterval is set, it can
// safely use t.GetAssertInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssertInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetAssertInterval() uint32 {
	if t == nil || t.AssertInterval == nil {
		return 60
	}
	return *t.AssertInterval
}

// GetBfdIpv4 retrieves the value of the leaf BfdIpv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdIpv4 is set, it can
// safely use t.GetBfdIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdIpv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetBfdIpv4() bool {
	if t == nil || t.BfdIpv4 == nil {
		return false
	}
	return *t.BfdIpv4
}

// GetBfdIpv6 retrieves the value of the leaf BfdIpv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdIpv6 is set, it can
// safely use t.GetBfdIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdIpv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetBfdIpv6() bool {
	if t == nil || t.BfdIpv6 == nil {
		return false
	}
	return *t.BfdIpv6
}

// GetDrPriority retrieves the value of the leaf DrPriority from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrPriority is set, it can
// safely use t.GetDrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrPriority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetDrPriority() uint32 {
	if t == nil || t.DrPriority == nil {
		return 1
	}
	return *t.DrPriority
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 30
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetHelloMultiplier() uint32 {
	if t == nil || t.HelloMultiplier == nil {
		return 35
	}
	return *t.HelloMultiplier
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4AdminState retrieves the value of the leaf Ipv4AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4AdminState is set, it can
// safely use t.GetIpv4AdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetIpv4AdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.Ipv4AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.Ipv4AdminState
}

// GetIpv6AdminState retrieves the value of the leaf Ipv6AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6AdminState is set, it can
// safely use t.GetIpv6AdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetIpv6AdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.Ipv6AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.Ipv6AdminState
}

// GetMaximumGroups retrieves the value of the leaf MaximumGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumGroups is set, it can
// safely use t.GetMaximumGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetMaximumGroups() uint32 {
	if t == nil || t.MaximumGroups == nil {
		return 0
	}
	return *t.MaximumGroups
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.AssertInterval == nil {
		var v uint32 = 60
		t.AssertInterval = &v
	}
	if t.BfdIpv4 == nil {
		var v bool = false
		t.BfdIpv4 = &v
	}
	if t.BfdIpv6 == nil {
		var v bool = false
		t.BfdIpv6 = &v
	}
	if t.DrPriority == nil {
		var v uint32 = 1
		t.DrPriority = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 30
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint32 = 35
		t.HelloMultiplier = &v
	}
	if t.Ipv4AdminState == 0 {
		t.Ipv4AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Ipv6AdminState == 0 {
		t.Ipv6AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/pim/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 represents the /srl_nokia-network-instance/network-instance/protocols/pim/ipv6 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints struct {
	Static *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static `path:"static" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) GetOrCreateStatic() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) GetStatic() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points/static YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static struct {
	RendezvousPoint map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint `path:"rendezvous-point" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) IsYANGGoStruct() {
}

// NewRendezvousPoint creates a new entry in the RendezvousPoint list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) NewRendezvousPoint(
	Address string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RendezvousPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RendezvousPoint", key)
	}

	t.RendezvousPoint[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint{
		Address: &Address,
	}

	return t.RendezvousPoint[key], nil
}

// RenameRendezvousPoint renames an entry in the list RendezvousPoint within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) RenameRendezvousPoint(oldK, newK string) error {
	if _, ok := t.RendezvousPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RendezvousPoint", newK)
	}

	e, ok := t.RendezvousPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RendezvousPoint", oldK)
	}
	e.Address = &newK

	t.RendezvousPoint[newK] = e
	delete(t.RendezvousPoint, oldK)
	return nil
}

// GetOrCreateRendezvousPoint retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) GetOrCreateRendezvousPoint(
	Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint {
	key := Address

	if v, ok := t.RendezvousPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRendezvousPoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRendezvousPoint got unexpected error: %v", err))
	}
	return v
}

// GetRendezvousPoint retrieves the value with the specified key from
// the RendezvousPoint map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) GetRendezvousPoint(
	Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint {
	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.RendezvousPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRendezvousPoint deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) DeleteRendezvousPoint(Address string) {
	key := Address

	delete(t.RendezvousPoint, key)
}

// AppendRendezvousPoint appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct to the
// list RendezvousPoint of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) AppendRendezvousPoint(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint,
) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint)
	}

	if _, ok := t.RendezvousPoint[key]; ok {
		return fmt.Errorf("duplicate key for list RendezvousPoint %v", key)
	}

	t.RendezvousPoint[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RendezvousPoint {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points/static/rendezvous-point YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct {
	Address *string                                                                                                         `path:"address" module:"srl_nokia-pim"`
	Group   map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group `path:"group" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) NewGroup(
	Prefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group{
		Prefix: &Prefix,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Prefix = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) GetOrCreateGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group {
	key := Prefix

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) GetGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) DeleteGroup(Prefix string) {
	key := Prefix

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points/static/rendezvous-point/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group struct {
	Prefix *string `path:"prefix" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) IsYANGGoStruct() {
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover represents the /srl_nokia-network-instance/network-instance/protocols/pim/spt-switchover YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group `path:"group" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) NewGroup(
	Prefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group{
		Prefix: &Prefix,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Prefix = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) GetOrCreateGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group {
	key := Prefix

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) GetGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) DeleteGroup(Prefix string) {
	key := Prefix

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group represents the /srl_nokia-network-instance/network-instance/protocols/pim/spt-switchover/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group struct {
	Prefix    *string                                                                                   `path:"prefix" module:"srl_nokia-pim"`
	Threshold SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union `path:"threshold" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetThreshold retrieves the value of the leaf Threshold from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) GetThreshold() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union {
	if t == nil || t.Threshold == nil {
		return nil
	}
	return t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/pim/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm struct {
	SsmRanges *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges `path:"ssm-ranges" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) IsYANGGoStruct() {}

// GetOrCreateSsmRanges retrieves the value of the SsmRanges field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) GetOrCreateSsmRanges() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges {
	if t.SsmRanges != nil {
		return t.SsmRanges
	}
	t.SsmRanges = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges{}
	return t.SsmRanges
}

// GetSsmRanges returns the value of the SsmRanges struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm. If the receiver or the field SsmRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) GetSsmRanges() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges {
	if t != nil && t.SsmRanges != nil {
		return t.SsmRanges
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SsmRanges.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges represents the /srl_nokia-network-instance/network-instance/protocols/pim/ssm/ssm-ranges YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges struct {
	GroupRange map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange `path:"group-range" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) NewGroupRange(
	IpPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange{
		IpPrefix: &IpPrefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.IpPrefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) GetOrCreateGroupRange(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange {
	key := IpPrefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) GetGroupRange(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange {
	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) DeleteGroupRange(IpPrefix string) {
	key := IpPrefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/pim/ssm/ssm-ranges/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange struct {
	IpPrefix *string `path:"ip-prefix" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace `path:"trace" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace struct {
	Events *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events `path:"events" module:"srl_nokia-pim" yangPresence:"true"`
	Packet *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) IsYANGGoStruct() {}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetOrCreateEvents() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events{}
	return t.Events
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetEvents returns the value of the Events struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetEvents() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Events.PopulateDefaults()
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events struct {
	AllEventTypes *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes `path:"all-event-types" module:"srl_nokia-pim" yangPresence:"true"`
	EventTypes    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes    `path:"event-types" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) IsYANGGoStruct() {
}

// GetOrCreateAllEventTypes retrieves the value of the AllEventTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetOrCreateAllEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes {
	if t.AllEventTypes != nil {
		return t.AllEventTypes
	}
	t.AllEventTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes{}
	return t.AllEventTypes
}

// GetOrCreateEventTypes retrieves the value of the EventTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetOrCreateEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes {
	if t.EventTypes != nil {
		return t.EventTypes
	}
	t.EventTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes{}
	return t.EventTypes
}

// GetAllEventTypes returns the value of the AllEventTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events. If the receiver or the field AllEventTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetAllEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes {
	if t != nil && t.AllEventTypes != nil {
		return t.AllEventTypes
	}
	return nil
}

// GetEventTypes returns the value of the EventTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events. If the receiver or the field EventTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes {
	if t != nil && t.EventTypes != nil {
		return t.EventTypes
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AllEventTypes.PopulateDefaults()
	t.EventTypes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/all-event-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	InterfaceName *string `path:"interface-name" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes struct {
	Adj  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj  `path:"adj" module:"srl_nokia-pim" yangPresence:"true"`
	Asrt *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt `path:"asrt" module:"srl_nokia-pim" yangPresence:"true"`
	Data *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data `path:"data" module:"srl_nokia-pim" yangPresence:"true"`
	Db   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db   `path:"db" module:"srl_nokia-pim" yangPresence:"true"`
	Intf *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf `path:"intf" module:"srl_nokia-pim" yangPresence:"true"`
	Jp   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp   `path:"jp" module:"srl_nokia-pim" yangPresence:"true"`
	Msg  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg  `path:"msg" module:"srl_nokia-pim" yangPresence:"true"`
	Reg  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg  `path:"reg" module:"srl_nokia-pim" yangPresence:"true"`
	Rtm  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm  `path:"rtm" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) IsYANGGoStruct() {
}

// GetOrCreateAdj retrieves the value of the Adj field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateAdj() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj {
	if t.Adj != nil {
		return t.Adj
	}
	t.Adj = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj{}
	return t.Adj
}

// GetOrCreateAsrt retrieves the value of the Asrt field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateAsrt() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt {
	if t.Asrt != nil {
		return t.Asrt
	}
	t.Asrt = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt{}
	return t.Asrt
}

// GetOrCreateData retrieves the value of the Data field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateData() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data {
	if t.Data != nil {
		return t.Data
	}
	t.Data = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data{}
	return t.Data
}

// GetOrCreateDb retrieves the value of the Db field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateDb() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db {
	if t.Db != nil {
		return t.Db
	}
	t.Db = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db{}
	return t.Db
}

// GetOrCreateIntf retrieves the value of the Intf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateIntf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf {
	if t.Intf != nil {
		return t.Intf
	}
	t.Intf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf{}
	return t.Intf
}

// GetOrCreateJp retrieves the value of the Jp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateJp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp {
	if t.Jp != nil {
		return t.Jp
	}
	t.Jp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp{}
	return t.Jp
}

// GetOrCreateMsg retrieves the value of the Msg field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateMsg() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg {
	if t.Msg != nil {
		return t.Msg
	}
	t.Msg = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg{}
	return t.Msg
}

// GetOrCreateReg retrieves the value of the Reg field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateReg() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg {
	if t.Reg != nil {
		return t.Reg
	}
	t.Reg = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg{}
	return t.Reg
}

// GetOrCreateRtm retrieves the value of the Rtm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateRtm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm {
	if t.Rtm != nil {
		return t.Rtm
	}
	t.Rtm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm{}
	return t.Rtm
}

// GetAdj returns the value of the Adj struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Adj is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetAdj() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj {
	if t != nil && t.Adj != nil {
		return t.Adj
	}
	return nil
}

// GetAsrt returns the value of the Asrt struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Asrt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetAsrt() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt {
	if t != nil && t.Asrt != nil {
		return t.Asrt
	}
	return nil
}

// GetData returns the value of the Data struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Data is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetData() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data {
	if t != nil && t.Data != nil {
		return t.Data
	}
	return nil
}

// GetDb returns the value of the Db struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Db is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetDb() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db {
	if t != nil && t.Db != nil {
		return t.Db
	}
	return nil
}

// GetIntf returns the value of the Intf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Intf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetIntf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf {
	if t != nil && t.Intf != nil {
		return t.Intf
	}
	return nil
}

// GetJp returns the value of the Jp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Jp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetJp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp {
	if t != nil && t.Jp != nil {
		return t.Jp
	}
	return nil
}

// GetMsg returns the value of the Msg struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Msg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetMsg() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg {
	if t != nil && t.Msg != nil {
		return t.Msg
	}
	return nil
}

// GetReg returns the value of the Reg struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Reg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetReg() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg {
	if t != nil && t.Reg != nil {
		return t.Reg
	}
	return nil
}

// GetRtm returns the value of the Rtm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Rtm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetRtm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm {
	if t != nil && t.Rtm != nil {
		return t.Rtm
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Adj.PopulateDefaults()
	t.Asrt.PopulateDefaults()
	t.Data.PopulateDefaults()
	t.Db.PopulateDefaults()
	t.Intf.PopulateDefaults()
	t.Jp.PopulateDefaults()
	t.Msg.PopulateDefaults()
	t.Reg.PopulateDefaults()
	t.Rtm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/adj YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adj) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/asrt YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Asrt) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/data YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Data) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/db YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Db) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/intf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	InterfaceName *string `path:"interface-name" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Intf) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/jp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Jp) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/msg YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Msg) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/reg YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Reg) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/rtm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm struct {
	Detail *bool `path:"detail" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Rtm) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet struct {
	AllPacketTypes *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes `path:"all-packet-types" module:"srl_nokia-pim" yangPresence:"true"`
	PacketTypes    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes    `path:"packet-types" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetOrCreateAllPacketTypes retrieves the value of the AllPacketTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetOrCreateAllPacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes {
	if t.AllPacketTypes != nil {
		return t.AllPacketTypes
	}
	t.AllPacketTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes{}
	return t.AllPacketTypes
}

// GetOrCreatePacketTypes retrieves the value of the PacketTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetOrCreatePacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes {
	if t.PacketTypes != nil {
		return t.PacketTypes
	}
	t.PacketTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes{}
	return t.PacketTypes
}

// GetAllPacketTypes returns the value of the AllPacketTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet. If the receiver or the field AllPacketTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetAllPacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes {
	if t != nil && t.AllPacketTypes != nil {
		return t.AllPacketTypes
	}
	return nil
}

// GetPacketTypes returns the value of the PacketTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet. If the receiver or the field PacketTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetPacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes {
	if t != nil && t.PacketTypes != nil {
		return t.PacketTypes
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AllPacketTypes.PopulateDefaults()
	t.PacketTypes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/all-packet-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes struct {
	Asrt    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt    `path:"asrt" module:"srl_nokia-pim" yangPresence:"true"`
	Hello   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello   `path:"hello" module:"srl_nokia-pim" yangPresence:"true"`
	Jp      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Jp      `path:"jp" module:"srl_nokia-pim" yangPresence:"true"`
	Reg     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Reg     `path:"reg" module:"srl_nokia-pim" yangPresence:"true"`
	RegStop *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegStop `path:"reg-stop" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) IsYANGGoStruct() {
}

// GetOrCreateAsrt retrieves the value of the Asrt field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateAsrt() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt {
	if t.Asrt != nil {
		return t.Asrt
	}
	t.Asrt = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt{}
	return t.Asrt
}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateHello() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello{}
	return t.Hello
}

// GetOrCreateJp retrieves the value of the Jp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateJp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Jp {
	if t.Jp != nil {
		return t.Jp
	}
	t.Jp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Jp{}
	return t.Jp
}

// GetOrCreateReg retrieves the value of the Reg field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateReg() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Reg {
	if t.Reg != nil {
		return t.Reg
	}
	t.Reg = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Reg{}
	return t.Reg
}

// GetOrCreateRegStop retrieves the value of the RegStop field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateRegStop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegStop {
	if t.RegStop != nil {
		return t.RegStop
	}
	t.RegStop = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegStop{}
	return t.RegStop
}

// GetAsrt returns the value of the Asrt struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Asrt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetAsrt() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt {
	if t != nil && t.Asrt != nil {
		return t.Asrt
	}
	return nil
}

// GetHello returns the value of the Hello struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetHello() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetJp returns the value of the Jp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Jp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetJp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Jp {
	if t != nil && t.Jp != nil {
		return t.Jp
	}
	return nil
}

// GetReg returns the value of the Reg struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Reg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetReg() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Reg {
	if t != nil && t.Reg != nil {
		return t.Reg
	}
	return nil
}

// GetRegStop returns the value of the RegStop struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field RegStop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetRegStop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegStop {
	if t != nil && t.RegStop != nil {
		return t.RegStop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Asrt.PopulateDefaults()
	t.Hello.PopulateDefaults()
	t.Jp.PopulateDefaults()
	t.Reg.PopulateDefaults()
	t.RegStop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/asrt YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Asrt) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/hello YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) ΛBelongingModule() string {
	return "srl_nokia-pim"
}
